<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Share 杂志</title>
  <icon>https://www.gravatar.com/avatar/67398ac80b713195e4e6faee10834ea3</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://linlshare.github.io/"/>
  <updated>2018-11-22T06:57:47.975Z</updated>
  <id>https://linlshare.github.io/</id>
  
  <author>
    <name>Lshare</name>
    <email>Lshare@outlook.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>NIO</title>
    <link href="https://linlshare.github.io/2018/11/22/it/java/base/NIO/"/>
    <id>https://linlshare.github.io/2018/11/22/it/java/base/NIO/</id>
    <published>2018-11-22T03:27:06.000Z</published>
    <updated>2018-11-22T06:57:47.975Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念（NIO-vs-BIO）"><a href="#概念（NIO-vs-BIO）" class="headerlink" title="概念（NIO vs BIO）"></a>概念（NIO vs BIO）</h2><p>NIO, Non-blocking I/O, 非阻塞式 I/O 模型。也可以解释为 New I/O, 区别于旧的阻塞式 I/O 模型（BIO）。</p><p>BIO 与 NIO 的区别如下：</p><table><thead><tr><th>类别</th><th>I/O 方式</th><th>最低可用的 JDK 版本</th></tr></thead><tbody><tr><td>BIO</td><td>流式</td><td>JDK 1.0</td></tr><tr><td>NIO</td><td>块式</td><td>JDK 1.4</td></tr></tbody></table><p>所谓流式处理，就是单个字节的数据移动，通过一个称为 Stream 的对象一次移动一个字节；而块式处理，就是单个字节数组的数据移动，通过一个叫 Buffer 的对象一次移动一个字节数组。JDK 中的 NIO 库已经集成了原来的标准 I/O 功能。</p><h2 id="缓冲区和通道（Buffer-amp-Channel）"><a href="#缓冲区和通道（Buffer-amp-Channel）" class="headerlink" title="缓冲区和通道（Buffer &amp; Channel）"></a>缓冲区和通道（Buffer &amp; Channel）</h2><p>NIO 中的缓冲区（Buffer）实质是一个数组，通常为字节数组（ByteBuffer），用作读写缓冲，以及对数据的结构化访问，还可以用来跟踪系统的读写进程。</p><p>Buffer 类型：</p><ul><li>ByteBuffer</li><li>CharBuffer</li><li>ShortBuffer</li><li>IntBuffer</li><li>LongBuffer</li><li>FloatBuffer</li><li>DoubleBuffer</li></ul><p>NIO 中的通道（Channel）类似 BIO 中的流（Stream），但是是双向的，可以用来读、写或者同时读写。流之所以是单向的，是因为一个 Stream 要么是 InputStream，要么是 OutputStream，不能兼有。</p><h2 id="缓冲区内部细节（Buffer-Internals）"><a href="#缓冲区内部细节（Buffer-Internals）" class="headerlink" title="缓冲区内部细节（Buffer Internals）"></a>缓冲区内部细节（Buffer Internals）</h2><h3 id="状态变量（State-Variables）"><a href="#状态变量（State-Variables）" class="headerlink" title="状态变量（State Variables）"></a>状态变量（State Variables）</h3><ul><li>position，表征读了或写了多少数据到数组中，指向下一个元素的位置；</li><li>limit，表征剩余可读或可写的的数据量，初始情况下 limit = capacity。</li><li>capacity，表征 Buffer 的最大容量。</li></ul><p>三者关系：position &lt;= limit &lt;= capacity</p><h3 id="存取方法（Accessor-）"><a href="#存取方法（Accessor-）" class="headerlink" title="存取方法（Accessor ）"></a>存取方法（Accessor ）</h3><h2 id="使用（Show-U-the-Code）"><a href="#使用（Show-U-the-Code）" class="headerlink" title="使用（Show U the Code）"></a>使用（Show U the Code）</h2><h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><ol><li>从 FileInputStream 中获取 Channel；</li><li>创建 Buffer；</li><li>将数据从 Channel 读到 Buffer 中。</li></ol><p>示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将 a_file 读到 StringBuilder 中</span></span><br><span class="line">FileInputStream fin = <span class="keyword">new</span> FileInputStream(<span class="string">"/path/to/a_file"</span>);</span><br><span class="line">FileChannel fc = fin.getChannel();</span><br><span class="line"></span><br><span class="line">ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="keyword">while</span> (fc.read(buffer) != -<span class="number">1</span>) &#123;</span><br><span class="line">    sb.append(<span class="keyword">new</span> String(buffer.array(), <span class="number">0</span>, buffer.position()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h3><ol><li>从 FileOutputStream 中获取 Channel；</li><li>创建 Buffer；</li><li>写入数据到 Buffer；</li><li>将数据从 Buffer 写入 Channel 中。</li></ol><p>示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将 "Something" 写入 a_file 中</span></span><br><span class="line">FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"/path/to/a_file"</span>);</span><br><span class="line">FileChannel fc = fos.getChannel();</span><br><span class="line"></span><br><span class="line">ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span>[] content = <span class="string">"Something"</span>.getBytes();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">byte</span> aContent : content) &#123;</span><br><span class="line">    buffer.put(aContent);</span><br><span class="line">&#125;</span><br><span class="line">buffer.flip();</span><br><span class="line"></span><br><span class="line">fc.write(buffer);</span><br></pre></td></tr></table></figure><h3 id="边读边写"><a href="#边读边写" class="headerlink" title="边读边写"></a>边读边写</h3><ol><li>清除 Buffer；</li><li>从输入流的 Channel 读数据到 Buffer；</li><li>写入 Buffer 中的数据到输出流的 Channel；</li><li>循环直到输入流的 Channel 中没有数据。</li></ol><p>示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">FileInputStream fin = <span class="keyword">new</span> FileInputStream(<span class="string">"path/to/in_file"</span>);</span><br><span class="line">FileOutputStream fout = <span class="keyword">new</span> FileOutputStream(<span class="string">"path/to/out_file"</span>);</span><br><span class="line"></span><br><span class="line">FileChannel fcin = fin.getChannel();</span><br><span class="line">FileChannel fcout = fout.getChannel();</span><br><span class="line"></span><br><span class="line">ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">    buffer.clear();</span><br><span class="line">    <span class="keyword">int</span> r = fcin.read(buffer);</span><br><span class="line">    <span class="keyword">if</span> (r == -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    buffer.flip();</span><br><span class="line">    fcout.write(buffer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.ibm.com/developerworks/cn/education/java/j-nio/j-nio.html" target="_blank" rel="noopener">NIO 入门 - IBM</a></li><li><a href="https://www.ibm.com/developerworks/java/tutorials/j-nio/j-nio.html" target="_blank" rel="noopener">Getting started with new I/O (NIO) - IBM</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概念（NIO-vs-BIO）&quot;&gt;&lt;a href=&quot;#概念（NIO-vs-BIO）&quot; class=&quot;headerlink&quot; title=&quot;概念（NIO vs BIO）&quot;&gt;&lt;/a&gt;概念（NIO vs BIO）&lt;/h2&gt;&lt;p&gt;NIO, Non-blocking I/O,
      
    
    </summary>
    
      <category term="it" scheme="https://linlshare.github.io/categories/it/"/>
    
      <category term="java" scheme="https://linlshare.github.io/categories/it/java/"/>
    
      <category term="base" scheme="https://linlshare.github.io/categories/it/java/base/"/>
    
    
      <category term="Java" scheme="https://linlshare.github.io/tags/Java/"/>
    
      <category term="IT" scheme="https://linlshare.github.io/tags/IT/"/>
    
      <category term="NIO" scheme="https://linlshare.github.io/tags/NIO/"/>
    
  </entry>
  
  <entry>
    <title>Netty</title>
    <link href="https://linlshare.github.io/2018/11/22/it/java/base/Netty/"/>
    <id>https://linlshare.github.io/2018/11/22/it/java/base/Netty/</id>
    <published>2018-11-22T03:23:41.000Z</published>
    <updated>2018-11-22T09:23:43.281Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Netty-是干什么的？"><a href="#Netty-是干什么的？" class="headerlink" title="Netty 是干什么的？"></a>Netty 是干什么的？</h2><p>Netty 是一个 NIO 客户端服务器框架，用于快速开发网络应用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Netty-是干什么的？&quot;&gt;&lt;a href=&quot;#Netty-是干什么的？&quot; class=&quot;headerlink&quot; title=&quot;Netty 是干什么的？&quot;&gt;&lt;/a&gt;Netty 是干什么的？&lt;/h2&gt;&lt;p&gt;Netty 是一个 NIO 客户端服务器框架，用于快速开发网
      
    
    </summary>
    
      <category term="it" scheme="https://linlshare.github.io/categories/it/"/>
    
      <category term="java" scheme="https://linlshare.github.io/categories/it/java/"/>
    
      <category term="base" scheme="https://linlshare.github.io/categories/it/java/base/"/>
    
    
      <category term="Java" scheme="https://linlshare.github.io/tags/Java/"/>
    
      <category term="IT" scheme="https://linlshare.github.io/tags/IT/"/>
    
      <category term="Netty" scheme="https://linlshare.github.io/tags/Netty/"/>
    
  </entry>
  
  <entry>
    <title>服务鉴权机制</title>
    <link href="https://linlshare.github.io/2018/11/21/it/secure/%E6%9C%8D%E5%8A%A1%E9%89%B4%E6%9D%83%E6%9C%BA%E5%88%B6/"/>
    <id>https://linlshare.github.io/2018/11/21/it/secure/服务鉴权机制/</id>
    <published>2018-11-21T09:31:26.000Z</published>
    <updated>2018-11-21T09:56:07.253Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Token-验证机制"><a href="#Token-验证机制" class="headerlink" title="Token 验证机制"></a>Token 验证机制</h2><p>Token 是一个字符串，由服务端生成，用于保证请求的有效性，过滤掉非法的请求。一个 Token 可以由以下三部分组成：</p><ul><li>Token 字符串（token），可以是 UUID；</li><li>生成时的时间戳（timestamp）；</li><li>校验因子（sign），由 <code>token + timestamp</code>，通过一定的规则（比如 MD5）生成。</li></ul><p>示例（<code>sg = md5(tk+&quot;*&quot;+tm+&quot;*&quot;+&quot;k2@sz8-iA&quot;</code>）：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"tk"</span>:<span class="string">"116b6451-6028-4490-8869-d32a84082b7c"</span>,</span><br><span class="line">    <span class="attr">"tm"</span>:<span class="string">"1536595200000"</span>,</span><br><span class="line">    <span class="attr">"sg"</span>:<span class="string">"91672a6af6d7d078676e2b26e8396ea1"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，当请求到达客户端时，我们先用先前的规则构造一个 md5 值，看与请求中的 sg 字段值是否相同，再判定 当前的时间戳与 tm 中的时间戳差值是否不超过预定义的过期时长。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Token-验证机制&quot;&gt;&lt;a href=&quot;#Token-验证机制&quot; class=&quot;headerlink&quot; title=&quot;Token 验证机制&quot;&gt;&lt;/a&gt;Token 验证机制&lt;/h2&gt;&lt;p&gt;Token 是一个字符串，由服务端生成，用于保证请求的有效性，过滤掉非法的请
      
    
    </summary>
    
      <category term="it" scheme="https://linlshare.github.io/categories/it/"/>
    
      <category term="secure" scheme="https://linlshare.github.io/categories/it/secure/"/>
    
    
      <category term="IT" scheme="https://linlshare.github.io/tags/IT/"/>
    
      <category term="Secure" scheme="https://linlshare.github.io/tags/Secure/"/>
    
  </entry>
  
  <entry>
    <title>FSM</title>
    <link href="https://linlshare.github.io/2018/11/21/it/code/FSM/"/>
    <id>https://linlshare.github.io/2018/11/21/it/code/FSM/</id>
    <published>2018-11-21T07:37:25.000Z</published>
    <updated>2018-11-21T08:44:59.252Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>FSM, Finite State Machine 有限状态机，是一种数学计算模型，在任意给定的时刻只会存在在给定的有限状态中的一个。FSM 会在特定的外部输入条件下发生从一个状态到另一状态的改变，这个过程叫状态转移（transition）。</p><p>一个 FSM 由以下部分构成：</p><ul><li>状态表（a list of its states）</li><li>初始状态（Initial state）</li><li>每个转移的条件（the conditions for each transition）</li></ul><p>另外，在自动机理论中，FSM 也叫做 DFA（Deterministic Finite Automaton, 确定性有限自动机），与 NFA（Nondeterministic Finite Automaton, 非确定性有限自动机）相对。DFA 的特点是：</p><ul><li>每个状态转移由当前状态和输入唯一确定；</li><li>每次状态转移都要读取输入。</li></ul><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><h3 id="状态转移表（State-Transition-Table）"><a href="#状态转移表（State-Transition-Table）" class="headerlink" title="状态转移表（State Transition Table）"></a>状态转移表（State Transition Table）</h3><table><thead><tr><th>当前状态→ <br>条件↓</th><th>状态A</th><th>状态B</th><th>状态C</th></tr></thead><tbody><tr><td>条件X</td><td>…</td><td>…</td><td>…</td></tr><tr><td>条件Y</td><td>…</td><td>状态C</td><td>…</td></tr><tr><td>条件Z</td><td>…</td><td>…</td><td>…</td></tr></tbody></table><p>状态转移表描述了当某个状态下触发某个条件会达到什么状态。下面以投币式旋转门为例：</p><p><img src="/2018/11/21/it/code/FSM/投币式旋转门.jpg" alt=""></p><table><thead><tr><th>当前状态→ <br>条件↓</th><th>锁定</th><th>解锁</th></tr></thead><tbody><tr><td>推动旋转杠</td><td>锁定</td><td>锁定</td></tr><tr><td>投币</td><td>解锁</td><td>解锁</td></tr></tbody></table><h3 id="UML-状态机（UML-State-Machines）"><a href="#UML-状态机（UML-State-Machines）" class="headerlink" title="UML 状态机（UML State Machines）"></a>UML 状态机（UML State Machines）</h3><p><img src="/2018/11/21/it/code/FSM/FSM_UML.png" alt=""></p><p>使用 UML 语言在 <a href="https://draw.io" target="_blank" rel="noopener">draw.io</a> 上绘制上述的投币式旋转门的状态图如下：</p><p><img src="/2018/11/21/it/code/FSM/投币式旋转门状态图.jpg" alt=""></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://en.wikipedia.org/wiki/Finite-state_machine" target="_blank" rel="noopener">Finite-state mathine - wikipedia</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;FSM, Finite State Machine 有限状态机，是一种数学计算模型，在任意给定的时刻只会存在在给定的有限状态中的一个。FSM
      
    
    </summary>
    
      <category term="it" scheme="https://linlshare.github.io/categories/it/"/>
    
      <category term="code" scheme="https://linlshare.github.io/categories/it/code/"/>
    
    
      <category term="IT" scheme="https://linlshare.github.io/tags/IT/"/>
    
      <category term="FSM" scheme="https://linlshare.github.io/tags/FSM/"/>
    
  </entry>
  
  <entry>
    <title>互联网上的一些概念</title>
    <link href="https://linlshare.github.io/2018/11/21/it/%E4%BA%92%E8%81%94%E7%BD%91%E4%B8%8A%E7%9A%84%E4%B8%80%E4%BA%9B%E6%A6%82%E5%BF%B5/"/>
    <id>https://linlshare.github.io/2018/11/21/it/互联网上的一些概念/</id>
    <published>2018-11-21T06:36:20.000Z</published>
    <updated>2018-11-22T03:22:29.269Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Dark-Net（暗网）"><a href="#Dark-Net（暗网）" class="headerlink" title="Dark Net（暗网）"></a>Dark Net（暗网）</h2><h2 id="NAS"><a href="#NAS" class="headerlink" title="NAS"></a>NAS</h2><p>NAS, Network Attached Storage, 网络附属存储, 简单来说就是连接在网络上, 可以存储资料的装置。可以用来做私有网盘，同步各种设备的照片、视频、音频和文件。</p><p>常见的 NAS 硬件有：</p><ul><li>群晖 / 威联通</li><li>惠普 ProLiant MicroServer</li><li>Acer Altos C100 F3</li></ul><p>常见的 NAS 软件有：</p><ul><li>Nextcloud</li><li>Owncloud</li><li>Seefile</li><li>群晖 / 威联通系列软件</li></ul><p>参考：</p><ul><li><a href="https://www.zhihu.com/question/21359049" target="_blank" rel="noopener">搭建家庭 NAS 服务器有什么好方案？ - 知乎</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Dark-Net（暗网）&quot;&gt;&lt;a href=&quot;#Dark-Net（暗网）&quot; class=&quot;headerlink&quot; title=&quot;Dark Net（暗网）&quot;&gt;&lt;/a&gt;Dark Net（暗网）&lt;/h2&gt;&lt;h2 id=&quot;NAS&quot;&gt;&lt;a href=&quot;#NAS&quot; class
      
    
    </summary>
    
      <category term="it" scheme="https://linlshare.github.io/categories/it/"/>
    
    
      <category term="IT" scheme="https://linlshare.github.io/tags/IT/"/>
    
      <category term="Internet" scheme="https://linlshare.github.io/tags/Internet/"/>
    
  </entry>
  
  <entry>
    <title>Markdown</title>
    <link href="https://linlshare.github.io/2018/11/20/it/tool/Markdown/"/>
    <id>https://linlshare.github.io/2018/11/20/it/tool/Markdown/</id>
    <published>2018-11-20T12:41:20.000Z</published>
    <updated>2018-11-22T09:28:17.869Z</updated>
    
    <content type="html"><![CDATA[<h2 id="在表格中输入管道符（-）"><a href="#在表格中输入管道符（-）" class="headerlink" title="在表格中输入管道符（|）"></a>在表格中输入管道符（|）</h2><p>管道符与表格分隔字段用的相冲突，会导致表格显示不正常，解决方案是：使用 <code>&amp;#124;</code>  代替 <code>|</code> 。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;在表格中输入管道符（-）&quot;&gt;&lt;a href=&quot;#在表格中输入管道符（-）&quot; class=&quot;headerlink&quot; title=&quot;在表格中输入管道符（|）&quot;&gt;&lt;/a&gt;在表格中输入管道符（|）&lt;/h2&gt;&lt;p&gt;管道符与表格分隔字段用的相冲突，会导致表格显示不正常，解决方
      
    
    </summary>
    
      <category term="it" scheme="https://linlshare.github.io/categories/it/"/>
    
      <category term="tool" scheme="https://linlshare.github.io/categories/it/tool/"/>
    
    
      <category term="Markdown" scheme="https://linlshare.github.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Xpath</title>
    <link href="https://linlshare.github.io/2018/11/20/it/robot/Xpath/"/>
    <id>https://linlshare.github.io/2018/11/20/it/robot/Xpath/</id>
    <published>2018-11-20T11:38:55.000Z</published>
    <updated>2018-11-22T09:37:23.260Z</updated>
    
    <content type="html"><![CDATA[<h2 id="何为-Xpath（Introduction）"><a href="#何为-Xpath（Introduction）" class="headerlink" title="何为 Xpath（Introduction）"></a>何为 Xpath（Introduction）</h2><p><a href="https://zh.wikipedia.org/zh-hans/XPath" target="_blank" rel="noopener">维基百科</a>：XPath 即为 XML 路径语言（XML Path Language），它是一种用来确定XML文档中某部分位置的语言。 XPath基于XML的树状结构，提供在数据结构树中找寻节点的能力。</p><p>所谓节点有七种，分别是：</p><ul><li>元素（element）</li><li>属性（attribute）</li><li>文本（text）</li><li>命名空间（namespace）</li><li>处理指令（processing-instruction）</li><li>注释（comment）</li><li>文档节点（document node, also called root element）</li></ul><p>示例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bookstore</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">book</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span>Harry Potter<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">author</span>&gt;</span>J K. Rowling<span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">year</span>&gt;</span>2005<span class="tag">&lt;/<span class="name">year</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">price</span>&gt;</span>29.99<span class="tag">&lt;/<span class="name">price</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">book</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bookstore</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中，</p><ul><li><code>&lt;bookstore&gt;</code> 为根节点，或者称为文档节点；</li><li><code>&lt;title lang=&quot;en&quot;&gt;Harry Potter&lt;/title&gt;</code> 为元素节点；</li><li><code>lang=&quot;en&quot;</code> 为属性节点；</li><li><code>Harry Potter</code> 为文本节点。</li></ul><h2 id="基础语法（Syntax）"><a href="#基础语法（Syntax）" class="headerlink" title="基础语法（Syntax）"></a>基础语法（Syntax）</h2><h3 id="路径表达式（Path-Expressions）"><a href="#路径表达式（Path-Expressions）" class="headerlink" title="路径表达式（Path Expressions）"></a>路径表达式（Path Expressions）</h3><table><thead><tr><th>表达式</th><th>描述</th></tr></thead><tbody><tr><td>nodename</td><td>选取此节点的所有子节点。</td></tr><tr><td>/</td><td>从根节点选取。</td></tr><tr><td>//</td><td>从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置。</td></tr><tr><td>.</td><td>选取当前节点。</td></tr><tr><td>..</td><td>选取当前节点的父节点。</td></tr><tr><td>@</td><td>选取属性。</td></tr><tr><td>text()</td><td>选取文本。</td></tr></tbody></table><h3 id="断言（Predicates）"><a href="#断言（Predicates）" class="headerlink" title="断言（Predicates）"></a>断言（Predicates）</h3><p>断言被用来在查找指定的节点或者包含指定值的节点，通常放在方括号 <code>[]</code> 中。</p><p>示例：</p><table><thead><tr><th>路径表达式</th><th>结果</th></tr></thead><tbody><tr><td>/bookstore/book[1]</td><td>选取属于 bookstore 子元素的第一个 book 元素。</td></tr><tr><td>/bookstore/book[last()]</td><td>选取属于 bookstore 子元素的最后一个 book 元素。</td></tr><tr><td>/bookstore/book[last()-1]</td><td>选取属于 bookstore 子元素的倒数第二个 book 元素。</td></tr><tr><td>/bookstore/book[position()&lt;3]</td><td>选取最前面的两个属于 bookstore 元素的子元素的 book 元素。</td></tr><tr><td>//title[@lang]</td><td>选取所有拥有名为 lang 的属性的 title 元素。</td></tr><tr><td>//title[@lang=’eng’]</td><td>选取所有 title 元素，且这些元素拥有值为 eng 的 lang 属性。</td></tr><tr><td>//book[author[text()=’J K. Rowling’]]</td><td>选取 author 为 J K. Rowling 的 book 元素。</td></tr><tr><td>/bookstore/book[price&gt;35.00]</td><td>选取 bookstore 元素的所有 book 元素，且其中的 price 元素的值须大于 35.00。</td></tr><tr><td>/bookstore/book[price&gt;35.00]/title</td><td>选取 bookstore 元素中的 book 元素的所有 title 元素，且其中的 price 元素的值须大于 35.00。</td></tr></tbody></table><h3 id="模糊选取（Selecting-Unknown-Nodes）"><a href="#模糊选取（Selecting-Unknown-Nodes）" class="headerlink" title="模糊选取（Selecting Unknown Nodes）"></a>模糊选取（Selecting Unknown Nodes）</h3><table><thead><tr><th>通配符</th><th>描述</th></tr></thead><tbody><tr><td>*</td><td>匹配任何元素节点。</td></tr><tr><td>@*</td><td>匹配任何属性节点。</td></tr><tr><td>node()</td><td>匹配任何类型的节点。</td></tr></tbody></table><h3 id="合并选取（Selecting-Several-Paths）"><a href="#合并选取（Selecting-Several-Paths）" class="headerlink" title="合并选取（Selecting Several Paths）"></a>合并选取（Selecting Several Paths）</h3><p>使用管道符 <code>|</code>  合并两个选取结果。</p><p>示例：</p><table><thead><tr><th>路径表达式</th><th>结果</th></tr></thead><tbody><tr><td>//book/title&#124; //book/price</td><td>选取 book 元素的所有 title 和 price 元素。</td></tr><tr><td>//title &#124;  //price</td><td>选取文档中的所有 title 和 price 元素。</td></tr><tr><td>/bookstore/book/title &#124; //price</td><td>选取属于 bookstore 元素的 book 元素的所有 title 元素，以及文档中所有的 price 元素。</td></tr></tbody></table><h2 id="正则匹配（Regular-Match）"><a href="#正则匹配（Regular-Match）" class="headerlink" title="正则匹配（Regular Match）"></a>正则匹配（Regular Match）</h2><p>可以使用 <code>starts-with</code> 和 <code>ends-with</code> 进行简单的正则匹配。</p><p>比如获取 Github 上某仓库的星星数的 Xpath 为，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//div/a[ends-with(@href, &apos;stargazers&apos;)]/text()</span><br></pre></td></tr></table></figure><p> 表示获取 <code>div</code> 节点下的具备有属性为 <code>href</code>且值为 <code>stargazers</code> 结尾的 <code>a</code> 节点的文本内容。</p><h2 id="测试我的-Xpath（Test-Xpath）"><a href="#测试我的-Xpath（Test-Xpath）" class="headerlink" title="测试我的 Xpath（Test Xpath）"></a>测试我的 Xpath（Test Xpath）</h2><p> 可以使用 freeformatter.com 上提供的 <a href="https://www.freeformatter.com/xpath-tester.html" target="_blank" rel="noopener">Xpath Tester</a> 进行在线测试。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;何为-Xpath（Introduction）&quot;&gt;&lt;a href=&quot;#何为-Xpath（Introduction）&quot; class=&quot;headerlink&quot; title=&quot;何为 Xpath（Introduction）&quot;&gt;&lt;/a&gt;何为 Xpath（Introductio
      
    
    </summary>
    
      <category term="it" scheme="https://linlshare.github.io/categories/it/"/>
    
      <category term="robot" scheme="https://linlshare.github.io/categories/it/robot/"/>
    
    
      <category term="Java" scheme="https://linlshare.github.io/tags/Java/"/>
    
      <category term="Robot" scheme="https://linlshare.github.io/tags/Robot/"/>
    
      <category term="Xpath" scheme="https://linlshare.github.io/tags/Xpath/"/>
    
  </entry>
  
  <entry>
    <title>Selenium</title>
    <link href="https://linlshare.github.io/2018/11/20/it/robot/Selenium/"/>
    <id>https://linlshare.github.io/2018/11/20/it/robot/Selenium/</id>
    <published>2018-11-20T09:18:59.000Z</published>
    <updated>2018-11-22T09:37:10.026Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装-Selenium"><a href="#安装-Selenium" class="headerlink" title="安装 Selenium"></a>安装 Selenium</h2><p><strong>（1）Java 编程环境下</strong></p><p>针对 Gradle</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="string">'org.seleniumhq.selenium:selenium-java:RELEASE'</span></span><br></pre></td></tr></table></figure><p> 针对 Maven</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.seleniumhq.selenium<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>selenium-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>（2）Python 编程环境下</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install selenium</span><br></pre></td></tr></table></figure><h2 id="安装和配置-Driver"><a href="#安装和配置-Driver" class="headerlink" title="安装和配置 Driver"></a>安装和配置 Driver</h2><h3 id="下载-Driver"><a href="#下载-Driver" class="headerlink" title="下载 Driver"></a>下载 Driver</h3><p>不同的操作系统和浏览器有不同的 Driver 需根据需求选取：</p><ul><li>Chrome <a href="https://sites.google.com/a/chromium.org/chromedriver/downloads" target="_blank" rel="noopener">driver</a></li><li>Edge <a href="https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/" target="_blank" rel="noopener">driver</a></li><li>Firefox <a href="https://github.com/mozilla/geckodriver/releases" target="_blank" rel="noopener">driver</a></li><li>Safari <a href="https://webkit.org/blog/6900/webdriver-support-in-safari-10/" target="_blank" rel="noopener">driver</a></li></ul><h3 id="配置-Driver（以-Mac-Linux-为例）"><a href="#配置-Driver（以-Mac-Linux-为例）" class="headerlink" title="配置 Driver（以 Mac/Linux 为例）"></a>配置 Driver（以 Mac/Linux 为例）</h3><p>（1）将下载的 driver zip 压缩包解压</p><p>（2）将文件复制到系统的 bin 目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp path/to/driver /usr/local/bin</span><br></pre></td></tr></table></figure><p>（3）赋予 driver 可执行权限（以chromdriver为例）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod a+x /usr/local/bin/chromdriver</span><br></pre></td></tr></table></figure><blockquote><p>注意：Driver 的版本是跟 Selenium 相匹配的，如果发现有 NoSuchMethodError，请更新两者版本到最新稳定版。</p></blockquote><h2 id="自动生成-Selenium-代码"><a href="#自动生成-Selenium-代码" class="headerlink" title="自动生成 Selenium 代码"></a>自动生成 Selenium 代码</h2><p>在 Firefox 中安装插件 <a href="https://addons.mozilla.org/en-US/firefox/addon/katalon-automation-record/" target="_blank" rel="noopener">Katalon Recorder</a> 可以方便地进行录制用户行为，然后导出各个语言环境下的 Selenium 代码。使用路径：Record –&gt; [Some interactions] –&gt; Stop –&gt; Export。</p><h2 id="Headless-Chrome"><a href="#Headless-Chrome" class="headerlink" title="Headless Chrome"></a>Headless Chrome</h2><p>没有 UI 界面的 Chrome 浏览器，便于进行自动化测试和在服务端环境运行，支持所有现代 Web 平台的特性。可参见 <a href="https://developers.google.com/web/updates/2017/04/headless-chrome" target="_blank" rel="noopener">官网</a> 了解更多。</p><h3 id="支持情况"><a href="#支持情况" class="headerlink" title="支持情况"></a>支持情况</h3><p>Chrome 59+</p><h3 id="CLI（Command-Line-Interface）"><a href="#CLI（Command-Line-Interface）" class="headerlink" title="CLI（Command Line Interface）"></a>CLI（Command Line Interface）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;chrome&#125; \</span><br><span class="line">  --headless \                   # 以 Headless 模式运行 Chrome</span><br><span class="line">  --disable-gpu \                # 运行在带视窗的环境中时暂时需要该 Flag.</span><br><span class="line">  --remote-debugging-port=9222 \</span><br><span class="line">  https://www.chromestatus.com   # 要打开的 URL, 默认为 about:blank.</span><br></pre></td></tr></table></figure><p>上述的 <code>{chrome}</code> 在 Mac 中为 <code>/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome</code> ，</p><p>在 Windows 中为 <code>/path/to/chrome.exe</code>。</p><p>建议设置 <code>alias</code> 将具体的路径对应到 <code>chrome</code> 命令，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span># 编辑 .bash_profile</span><br><span class="line">vim ~/.bash_profile</span><br><span class="line"><span class="meta">#</span># 末尾追加</span><br><span class="line">alias chrome='/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome'</span><br><span class="line"><span class="meta">#</span># 保存退出</span><br><span class="line">:wq</span><br><span class="line"><span class="meta">#</span># 使 .bash_profile 立即生效</span><br><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure><h3 id="调试-Headless-Chrome"><a href="#调试-Headless-Chrome" class="headerlink" title="调试 Headless Chrome"></a>调试 Headless Chrome</h3><p>执行以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chrome --headless --disable-gpu --remote-debugging-port=9222 https://www.github.com</span><br></pre></td></tr></table></figure><p>然后在 Chrome 浏览器窗口打开 <code>http://localhost:9222</code>  就可以使用 <code>dev-tools</code> 进行远程调试了。</p><h3 id="在-Selenium-中使用-Headless-Chrome"><a href="#在-Selenium-中使用-Headless-Chrome" class="headerlink" title="在 Selenium 中使用 Headless Chrome"></a>在 Selenium 中使用 Headless Chrome</h3><p><strong>（1）Java 环境下</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ChromeOptions options = <span class="keyword">new</span> ChromeOptions();</span><br><span class="line">options.addArguments(<span class="string">"headless"</span>);</span><br><span class="line">options.addArguments(<span class="string">"window-size=1200x600"</span>);</span><br><span class="line">WebDriver driver = <span class="keyword">new</span> ChromeDriver(options);</span><br><span class="line">driver.get(<span class="string">"http://www.github.com"</span>);</span><br></pre></td></tr></table></figure><p><strong>（2）Python3 环境下</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os  </span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver  </span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys  </span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Optionschrome_options = Options()  </span><br><span class="line">chrome_options.add_argument(<span class="string">"--headless"</span>)</span><br><span class="line">chrome_options.binary_location =<span class="string">'/usr/bin/google-chrome-stable'</span></span><br><span class="line">chrome_options.add_argument(<span class="string">'--no-sandbox'</span>)driver = webdriver.Chrome(chrome_options=chrome_options)</span><br><span class="line">driver.get(<span class="string">'https://www.github.com'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装-Selenium&quot;&gt;&lt;a href=&quot;#安装-Selenium&quot; class=&quot;headerlink&quot; title=&quot;安装 Selenium&quot;&gt;&lt;/a&gt;安装 Selenium&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;（1）Java 编程环境下&lt;/strong&gt;&lt;/p&gt;
      
    
    </summary>
    
      <category term="it" scheme="https://linlshare.github.io/categories/it/"/>
    
      <category term="robot" scheme="https://linlshare.github.io/categories/it/robot/"/>
    
    
      <category term="Java" scheme="https://linlshare.github.io/tags/Java/"/>
    
      <category term="Robot" scheme="https://linlshare.github.io/tags/Robot/"/>
    
      <category term="Selenium" scheme="https://linlshare.github.io/tags/Selenium/"/>
    
  </entry>
  
  <entry>
    <title>周记 20181118</title>
    <link href="https://linlshare.github.io/2018/11/18/thinking/weekly/%E5%91%A8%E8%AE%B0%2020181118/"/>
    <id>https://linlshare.github.io/2018/11/18/thinking/weekly/周记 20181118/</id>
    <published>2018-11-18T15:19:05.000Z</published>
    <updated>2018-11-18T16:21:52.876Z</updated>
    
    <content type="html"><![CDATA[<p>又翻起了《瓦尔登湖》，一本自高中就伴随着我的书，王义国的译本。记得当时是在家附近的一所书店里买的，店里有卖各种盗版教辅书。书的纸质很粗糙，也不知是因为用了再生纸还是本身就是盗版的。不过，如今纸张愈加泛黄了，与书里节俭和自然的精神倒是挺配的。</p><p>每次拾起这本书都觉内心似泛着粼粼微波的湖面般平静，不管对现实有多大的不满足，对世界有什么欲求，都在此刻停止了，只觉得此刻的宁静是一种享受，很少有人能享受这份宁静，而我在这里找到了。</p><p>梭罗绝对是一个生活的冒险家，他认为当生活的必需品（食物、栖息处、衣服和燃料）满足之后，就应该开始生活的冒险，就像植物一样，根扎好了就要向上开花结果；而不是继续去追求奢侈品，或者说非必需品，那是一种被物役的表现，智者不为。</p><p>对待劳作，梭罗说：<code>劳作的人日复一日，都没有闲情逸致获得一种真正的人格</code>。劳作不息人就如机器，失去了人格。故而要好好对待自己的时间，合理平衡工作和生活，健全自己的人格才是。</p><p>对于生活，梭罗说：<code>芸芸众生过的生活是既安静又绝望</code>，又说：<code>老的行为是让老年人来做的，而新的行为则是让年轻人来做</code>。这是说不要只听老人言而不动脑，不要老是在旧的生活方式中打转，要敢于尝试新的东西，不要害怕失败，不要听天由命。</p><p>论及衣服，梭罗认为舒适保暖的衣服才是恰当的，像国王和王后一套衣服只穿一次的不过是挂新衣服的衣架罢了，并不知道一套合身衣服的舒适之处。同时，他也指出<code>文明国家是以衣取人的</code>。</p><p>说到房屋，梭罗比喻成是人类最外层的衣服，其最初的目的还是保暖。文明所创造出的现代房屋对大多数人来说是不必要的，因为<code>文明创造出了宫殿，但要创造出贵族和国王来却并不这么容易</code>。他认为我们的家具应该像印第安人和阿拉伯人一样简单，应该把家里乱七八糟的家具扔掉，以减少清晨清扫的工作，从而不被家具或者说现代房屋所奴役。</p><p>以上是我重温第一章节俭部分记录或划线的。《瓦尔登湖》是一本值得终身阅读的书，当时读不懂，只觉得读起来心情很平静，现在又多了一些体悟，说不定以后还会有更多的感受。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;又翻起了《瓦尔登湖》，一本自高中就伴随着我的书，王义国的译本。记得当时是在家附近的一所书店里买的，店里有卖各种盗版教辅书。书的纸质很粗糙，也不知是因为用了再生纸还是本身就是盗版的。不过，如今纸张愈加泛黄了，与书里节俭和自然的精神倒是挺配的。&lt;/p&gt;
&lt;p&gt;每次拾起这本书都觉
      
    
    </summary>
    
      <category term="thinking" scheme="https://linlshare.github.io/categories/thinking/"/>
    
      <category term="weekly" scheme="https://linlshare.github.io/categories/thinking/weekly/"/>
    
    
      <category term="自省" scheme="https://linlshare.github.io/tags/%E8%87%AA%E7%9C%81/"/>
    
      <category term="周记" scheme="https://linlshare.github.io/tags/%E5%91%A8%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>aws</title>
    <link href="https://linlshare.github.io/2018/11/09/it/java/aws/aws/"/>
    <id>https://linlshare.github.io/2018/11/09/it/java/aws/aws/</id>
    <published>2018-11-09T09:54:48.000Z</published>
    <updated>2018-11-22T09:39:02.858Z</updated>
    
    <content type="html"><![CDATA[<h3 id="清除配置的-access-key（clear-the-credentials-in-aws-configure）"><a href="#清除配置的-access-key（clear-the-credentials-in-aws-configure）" class="headerlink" title="清除配置的 access key（clear the credentials in aws configure）"></a>清除配置的 access key（clear the credentials in aws configure）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> rm -rf ~/.aws/credentials</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;清除配置的-access-key（clear-the-credentials-in-aws-configure）&quot;&gt;&lt;a href=&quot;#清除配置的-access-key（clear-the-credentials-in-aws-configure）&quot; class=
      
    
    </summary>
    
      <category term="it" scheme="https://linlshare.github.io/categories/it/"/>
    
      <category term="java" scheme="https://linlshare.github.io/categories/it/java/"/>
    
      <category term="aws" scheme="https://linlshare.github.io/categories/it/java/aws/"/>
    
    
      <category term="Java" scheme="https://linlshare.github.io/tags/Java/"/>
    
      <category term="aws" scheme="https://linlshare.github.io/tags/aws/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB</title>
    <link href="https://linlshare.github.io/2018/11/09/it/java/base/MongoDB/"/>
    <id>https://linlshare.github.io/2018/11/09/it/java/base/MongoDB/</id>
    <published>2018-11-09T03:45:03.000Z</published>
    <updated>2018-11-22T09:24:25.914Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Mac 用户可以直接使用 Homebrew 安装，命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo brew install mongodb</span><br></pre></td></tr></table></figure><p>也可以自己到 <a href="https://www.mongodb.com/download-center/community" target="_blank" rel="noopener">MongoDB 的下载中心</a> 下载并配置环境变量，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> export PATH=&#123;MONGODB_DIR&#125;/bin:$PATH</span><br></pre></td></tr></table></figure><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> &#123;mongo_db_file_path&#125; 为指定的数据库文件存放位置，不支持~符号。如果使用默认位置 /data/db ，也需要先手动创建。</span><br><span class="line"><span class="meta">$</span> mongod --dbpath=&#123;mongo_db_file_path&#125;</span><br></pre></td></tr></table></figure><h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><p>（1）本地连接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> mongo</span><br></pre></td></tr></table></figure><p>（2）远程连接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> mongo</span><br><span class="line"><span class="meta">&gt;</span> mongodb://admin:123456@localhost/</span><br></pre></td></tr></table></figure><h2 id="操作数据库"><a href="#操作数据库" class="headerlink" title="操作数据库"></a>操作数据库</h2><h3 id="database-级别"><a href="#database-级别" class="headerlink" title="database 级别"></a>database 级别</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 列出所有的数据库</span><br><span class="line"><span class="meta">&gt;</span> show dbs</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 查看当前使用的数据库</span><br><span class="line"><span class="meta">&gt;</span> db</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 切换当前使用的数据库</span><br><span class="line"><span class="meta">&gt;</span> use a_db</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 创建数据库</span><br><span class="line"><span class="meta">&gt;</span> use new_db</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 删除数据库</span><br><span class="line"><span class="meta">&gt;</span> db.dropDatabase()</span><br></pre></td></tr></table></figure><h3 id="collection-级别"><a href="#collection-级别" class="headerlink" title="collection 级别"></a>collection 级别</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 显示数据库中的所有 collection</span><br><span class="line"><span class="meta">&gt;</span> show collections</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 列出 collection 中的所有列</span><br><span class="line"><span class="meta">&gt;</span> db.a_collection.find()</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 删除 collection</span><br><span class="line"><span class="meta">&gt;</span> db.a_collection.drop()</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 新建 collection</span><br><span class="line"><span class="meta">&gt;</span> db.createCollection("new_collection")</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 重命名 collection</span><br><span class="line"><span class="meta">&gt;</span> db.a_collection.renameCollection("new_name")</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 清空 collection 中数据</span><br><span class="line"><span class="meta">&gt;</span> db.a_collection.drop(&#123;&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;Mac 用户可以直接使用 Homebrew 安装，命令如下：&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;ta
      
    
    </summary>
    
      <category term="it" scheme="https://linlshare.github.io/categories/it/"/>
    
      <category term="java" scheme="https://linlshare.github.io/categories/it/java/"/>
    
      <category term="base" scheme="https://linlshare.github.io/categories/it/java/base/"/>
    
    
      <category term="Java" scheme="https://linlshare.github.io/tags/Java/"/>
    
      <category term="MongoDB" scheme="https://linlshare.github.io/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>Gradle</title>
    <link href="https://linlshare.github.io/2018/11/07/it/java/base/Gradle/"/>
    <id>https://linlshare.github.io/2018/11/07/it/java/base/Gradle/</id>
    <published>2018-11-07T11:44:00.000Z</published>
    <updated>2018-11-22T09:30:03.915Z</updated>
    
    <content type="html"><![CDATA[<h3 id="使用初始化配置"><a href="#使用初始化配置" class="headerlink" title="使用初始化配置"></a>使用初始化配置</h3><p>（1）场景</p><p>当需要所有的 gradle 项目都进行同样的配置时。</p><p>（2）过程</p><ol><li>在 <code>USER_HOME/.gradle</code> 目录创建名为 <code>init.gradle</code>的文本文件；</li><li>在 <code>init.gradle</code> 编写初始化脚本。</li></ol><p>（3）案例：配置自建的 Maven 私有服务器</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// init.gradle</span></span><br><span class="line">allprojects &#123;</span><br><span class="line"> </span><br><span class="line">  ext.RepoConfigurator = &#123;</span><br><span class="line">    maven &#123;</span><br><span class="line">      url <span class="string">'http://maven-xx-inc.com/repository/maven-public/'</span></span><br><span class="line">    &#125;</span><br><span class="line">    maven &#123;</span><br><span class="line">      url <span class="string">'http://nexus.mobisummer-inc.com/nexus/content/groups/public'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  buildscript.repositories RepoConfigurator</span><br><span class="line">  repositories RepoConfigurator</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;使用初始化配置&quot;&gt;&lt;a href=&quot;#使用初始化配置&quot; class=&quot;headerlink&quot; title=&quot;使用初始化配置&quot;&gt;&lt;/a&gt;使用初始化配置&lt;/h3&gt;&lt;p&gt;（1）场景&lt;/p&gt;
&lt;p&gt;当需要所有的 gradle 项目都进行同样的配置时。&lt;/p&gt;
&lt;p&gt;（2）
      
    
    </summary>
    
      <category term="it" scheme="https://linlshare.github.io/categories/it/"/>
    
      <category term="java" scheme="https://linlshare.github.io/categories/it/java/"/>
    
      <category term="base" scheme="https://linlshare.github.io/categories/it/java/base/"/>
    
    
      <category term="Gradle" scheme="https://linlshare.github.io/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title>周记 20181140</title>
    <link href="https://linlshare.github.io/2018/11/04/thinking/weekly/%E5%91%A8%E8%AE%B0%2020181104/"/>
    <id>https://linlshare.github.io/2018/11/04/thinking/weekly/周记 20181104/</id>
    <published>2018-11-04T13:51:00.000Z</published>
    <updated>2018-11-04T14:43:52.948Z</updated>
    
    <content type="html"><![CDATA[<p>已经决定挑战，往后台方向发展了。接手了一个爬虫框架的设计和开发任务，但心里其实没底的，因为不曾独立设计和开发过一个框架，对 Java EE 世界中的各种框架其实也不甚了解。但还是硬着头皮上了，花了两三天阅读已有案例的设计文档、代码，并亲手画出一个既有框架的类图，画了又睡，睡了又画。成了之后找框架的设计者聊了一下，消解了设计上的一些疑惑。然，接下来才是重头戏，要基于此抽取并加入新的模块设计，编码还没到时候呢。加油吧，到时候多总结下。</p><p><img src="/2018/11/04/thinking/weekly/周记 20181104/code_design.png" alt="亲手画的类图，不努力的时候看一下"></p><p>另外，这几天不知为何睡眠质量很差，几乎没有深度睡眠，晚上早睡睡不着，早上四五点就自然醒了，搞得预定的任务缩水了。不过今晚研究《甲骨文简易词典》时倒是气定神闲，脑壳没有沉重的感觉，可能我比较适合从事文字学特别是汉字学的工作也不一定。</p><p>阅读《枕草子》时读到一首和歌很感动，原文是这样的：</p><blockquote><p>心是地下逝水在翻滚了</p><p>不言语，但相思</p><p>还胜似语话</p></blockquote><p>中宫久不见清少纳言，托人送信，信中引用该和歌，只写着  <code>不言语，但相思</code> ，令少纳言读后顿时落泪，过几天后就进宫去了。她们见面的情形大概可以用《鹊桥仙·纤云弄巧》里的 <code>金风玉露一相逢，便胜却，人间无数</code> （最近想起这句词，不自觉地背起来了）来表达了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;已经决定挑战，往后台方向发展了。接手了一个爬虫框架的设计和开发任务，但心里其实没底的，因为不曾独立设计和开发过一个框架，对 Java EE 世界中的各种框架其实也不甚了解。但还是硬着头皮上了，花了两三天阅读已有案例的设计文档、代码，并亲手画出一个既有框架的类图，画了又睡，睡
      
    
    </summary>
    
      <category term="thinking" scheme="https://linlshare.github.io/categories/thinking/"/>
    
      <category term="weekly" scheme="https://linlshare.github.io/categories/thinking/weekly/"/>
    
    
      <category term="自省" scheme="https://linlshare.github.io/tags/%E8%87%AA%E7%9C%81/"/>
    
      <category term="周记" scheme="https://linlshare.github.io/tags/%E5%91%A8%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Pipeline 模型</title>
    <link href="https://linlshare.github.io/2018/11/04/it/java/arch/Pipeline%20%E6%A8%A1%E5%9E%8B/"/>
    <id>https://linlshare.github.io/2018/11/04/it/java/arch/Pipeline 模型/</id>
    <published>2018-11-04T13:49:00.000Z</published>
    <updated>2018-11-04T13:49:45.863Z</updated>
    
    <content type="html"><![CDATA[<h3 id="解决的问题"><a href="#解决的问题" class="headerlink" title="解决的问题"></a>解决的问题</h3><p>解决并发效率问题，将任务拆分成流水线，然后多线程并发执行，比之单线程执行快。</p><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><ul><li>CPU 流水线</li><li>Tomcat 容器</li><li>Structs</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;解决的问题&quot;&gt;&lt;a href=&quot;#解决的问题&quot; class=&quot;headerlink&quot; title=&quot;解决的问题&quot;&gt;&lt;/a&gt;解决的问题&lt;/h3&gt;&lt;p&gt;解决并发效率问题，将任务拆分成流水线，然后多线程并发执行，比之单线程执行快。&lt;/p&gt;
&lt;h3 id=&quot;案例&quot;&gt;&lt;a 
      
    
    </summary>
    
      <category term="it" scheme="https://linlshare.github.io/categories/it/"/>
    
      <category term="java" scheme="https://linlshare.github.io/categories/it/java/"/>
    
      <category term="arch" scheme="https://linlshare.github.io/categories/it/java/arch/"/>
    
    
      <category term="Java" scheme="https://linlshare.github.io/tags/Java/"/>
    
      <category term="pipeline" scheme="https://linlshare.github.io/tags/pipeline/"/>
    
  </entry>
  
  <entry>
    <title>Java EE</title>
    <link href="https://linlshare.github.io/2018/10/29/it/java/base/Java%20EE/"/>
    <id>https://linlshare.github.io/2018/10/29/it/java/base/Java EE/</id>
    <published>2018-10-29T12:14:00.000Z</published>
    <updated>2018-11-22T09:27:14.725Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java-EE"><a href="#Java-EE" class="headerlink" title="Java EE"></a>Java EE</h2><p>Java平台企业版，2018年3月更名为 <strong>Jakarta EE</strong>。Jave EE 是一系列技术标准所组成的平台，包括：</p><ul><li>Servlet</li><li>EJB</li><li>JDBC</li><li>JSP</li><li>JSTL</li><li>…</li></ul><h2 id="服务器与容器（Server-and-Container）"><a href="#服务器与容器（Server-and-Container）" class="headerlink" title="服务器与容器（Server and Container）"></a>服务器与容器（Server and Container）</h2><h3 id="服务器的定义"><a href="#服务器的定义" class="headerlink" title="服务器的定义"></a>服务器的定义</h3><p>依<a href="https://zh.wikipedia.org/zh-cn/%E6%9C%8D%E5%8A%A1%E5%99%A8" target="_blank" rel="noopener"><em>维基</em></a>，服务器（软件）是指一个管理资源并为用户提供服务的计算机软件。可分为：</p><ul><li>文件服务器（File Server），提供文件存取服务。</li><li>数据库服务器（Database Server），提供数据库存取服务。</li><li>邮件服务器（Mail Server），提供邮件存取服务。</li><li><strong>网页服务器</strong>（Web Server），提供网页浏览服务，通常所说的 Web 服务器，含义更广，包括了应用程序服务器。</li><li>FTP 服务器（FTP Server），提供文件传输服务。</li><li><strong>应用程序服务器</strong>（Application Server），提供应用程序接口服务。</li><li><strong>代理服务器</strong>（Proxy Server），提供代理服务，分正向和反向代理。</li><li>…</li></ul><h3 id="正向代理（Forward-Proxy）与反向代理（Reverse-Proxy）"><a href="#正向代理（Forward-Proxy）与反向代理（Reverse-Proxy）" class="headerlink" title="正向代理（Forward Proxy）与反向代理（Reverse Proxy）"></a>正向代理（Forward Proxy）与反向代理（Reverse Proxy）</h3><p>正向代理和反向代理以代理对象为区分，正向代理代理的是客户端，而目标服务器对真实的客户端的请求是无感的；反向代理代理的是服务器群（或簇），而客户端对真实处理请求的服务器是无感的。更多信息参见：<a href="https://www.zhihu.com/question/24723688/answer/128105528" target="_blank" rel="noopener"><em>反向代理为何叫反向代理？ - 刘志军的回答 - 知乎</em></a>。</p><h3 id="容器的定义"><a href="#容器的定义" class="headerlink" title="容器的定义"></a>容器的定义</h3><p>该语境下的容器，既不是上街买菜用的容器，也不是存取其他类的集合（比如 List），而是一个运行在 JVM 的 Java 程序，本身作为一个组件的运行时 ，起组件与服务器之间的接口作用，实际上也可以称之为服务器软件，只是当处在大的服务器软件包裹下时，选择另一种称呼罢了。</p><p>随着网络服务的要求越来越复杂，开发人员使用规范和组件的概念将服务划分，组件实现了规范，容器运行着组件，最新的 <em>规范-组件-功能-容器</em> 对应关系如下：</p><table><thead><tr><th>规范</th><th>组件</th><th>功能</th><th>容器</th></tr></thead><tbody><tr><td>JSR 369</td><td>Servlet 4.0</td><td>Server Applet，服务端小程序，处理基于 HTTP 的 Web 请求，响应动态 Web 内容。</td><td>Servlet 容器</td></tr><tr><td>JSR 245</td><td>JSP 2.1</td><td>JavaServer Pages，实现动态网页，其基于 Servlet 技术，故 JSP 容器是 Servlet 容器的子集。</td><td>JSP 容器</td></tr><tr><td>JSR 220</td><td>EJB 3.0</td><td><a href="https://zh.wikipedia.org/zh-cn/EJB#EJB_3.0" target="_blank" rel="noopener">Enterprise JavaBean</a>，封装业务逻辑，包括 Session Bean，Entity Bean 和 Message Driven Bean。</td><td>EJB 容器</td></tr></tbody></table><h3 id="常见的-Web-服务器"><a href="#常见的-Web-服务器" class="headerlink" title="常见的 Web 服务器"></a>常见的 Web 服务器</h3><ul><li>Apache HTTP Server</li><li>Nginx</li><li>IIS</li><li>Tomcat</li><li>Jetty</li><li>WildFly（原名JBoss AS或者JBoss）</li><li>Netty</li></ul><h2 id="架构（Architecture）"><a href="#架构（Architecture）" class="headerlink" title="架构（Architecture）"></a>架构（Architecture）</h2><p>软件架构是指软件的基本结构，阮一峰在 <a href="http://www.ruanyifeng.com/blog/2016/09/software-architecture.html" target="_blank" rel="noopener"><em>软件架构入门</em></a> 中谈及架构的分类，可分为：分层架构（Layered Architecture）、事件驱动架构（Event-driven Architecture）、微核架构（Microkernel Architecture）、微服务架构（Microservices Architecture）、云架构（Cloud Architecture）。</p><ul><li>分层架构的核心是 “数据”，围绕数据的呈现、逻辑处理、持久化和存储进行分层；</li><li>事件驱动架构的核心是 “事件”，围绕事件的整个发出、队列、分发、通道、处理进行分层；</li><li>微核架构的核心是 “插件”，将每个小功能做成可插拔的插件形式嵌入内核；</li><li>微服务架构的核心是 “微服务”，将每个服务单独运行，并通过远程通信协议联系在一起；</li><li>云架构的核心是 “虚拟化”，没有中央数据库，由一个虚拟中间件（Virtualized Middleware）和若干处理单元（Processing Unit）组成，数据通过虚拟中间件中的数据中间件进行同步。</li></ul><h2 id="框架（Framework）"><a href="#框架（Framework）" class="headerlink" title="框架（Framework）"></a>框架（Framework）</h2><p>参考<a href="https://en.wikipedia.org/wiki/Software_framework" target="_blank" rel="noopener"><em>维基</em></a>，软件框架是指一种通用的，实现基本功能的软件，用户可以在上面添加业务特定的代码。软件框架可能包括支持程序，编译器，代码库，工具集和应用程序编程接口（API），它汇集了所有不同的组件，以支持项目或系统的开发。框架相较于普通的代码库有如下特征：</p><ol><li>控制反转，由框架决定程序的控制流程。</li><li>可扩展性。</li><li>封闭性，框架代码不可修改。</li></ol><p>常见的 Java EE 开发框架：</p><ul><li>Spring</li><li>Spring MVC</li><li>Spring Cloud</li><li>Hibernate</li><li>MyBatis</li><li>Dubbo</li><li>Kafka</li></ul><p>常见的 Java EE 开发框架集：</p><ul><li>Spring Boot</li><li>SSH（Spring + Spring MVC + Hibernate）</li><li>SSM（Spring + Spring MVC + MyBatis）</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Java-EE&quot;&gt;&lt;a href=&quot;#Java-EE&quot; class=&quot;headerlink&quot; title=&quot;Java EE&quot;&gt;&lt;/a&gt;Java EE&lt;/h2&gt;&lt;p&gt;Java平台企业版，2018年3月更名为 &lt;strong&gt;Jakarta EE&lt;/strong&gt;。J
      
    
    </summary>
    
      <category term="it" scheme="https://linlshare.github.io/categories/it/"/>
    
      <category term="java" scheme="https://linlshare.github.io/categories/it/java/"/>
    
      <category term="base" scheme="https://linlshare.github.io/categories/it/java/base/"/>
    
    
      <category term="Java" scheme="https://linlshare.github.io/tags/Java/"/>
    
      <category term="JavaEE" scheme="https://linlshare.github.io/tags/JavaEE/"/>
    
      <category term="服务器" scheme="https://linlshare.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>周记 20181028</title>
    <link href="https://linlshare.github.io/2018/10/28/thinking/weekly/%E5%91%A8%E8%AE%B0%2020181028/"/>
    <id>https://linlshare.github.io/2018/10/28/thinking/weekly/周记 20181028/</id>
    <published>2018-10-28T15:50:00.000Z</published>
    <updated>2018-11-04T13:50:25.924Z</updated>
    
    <content type="html"><![CDATA[<p>怎么说呢？先说坏的地方吧，Spring 的学习任务全部没完成，真遗憾，到底没能坚持，练吉他的安排也暂时搁置了，对音调的高低把握不准，再想想看有无方法解决。日语和古代汉语的学习任务完成 70% 左右，阅读《枕草子》的计划算是完成较好的，完成了 80% 。</p><p>值得开心的是，发现了原来可以使用 github page + hexo + wikitten 搭建一个个人的 wiki，知识管理又迈上了一个新台阶。</p><p>还有許進雄的《甲骨文簡易詞典》已经看完 1/3 了，等看完了一定要整理一份文档，从最简单的构件开始讲述文字隐藏的朴素的创意。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;怎么说呢？先说坏的地方吧，Spring 的学习任务全部没完成，真遗憾，到底没能坚持，练吉他的安排也暂时搁置了，对音调的高低把握不准，再想想看有无方法解决。日语和古代汉语的学习任务完成 70% 左右，阅读《枕草子》的计划算是完成较好的，完成了 80% 。&lt;/p&gt;
&lt;p&gt;值得开
      
    
    </summary>
    
      <category term="thinking" scheme="https://linlshare.github.io/categories/thinking/"/>
    
      <category term="weekly" scheme="https://linlshare.github.io/categories/thinking/weekly/"/>
    
    
      <category term="自省" scheme="https://linlshare.github.io/tags/%E8%87%AA%E7%9C%81/"/>
    
      <category term="周记" scheme="https://linlshare.github.io/tags/%E5%91%A8%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Redis</title>
    <link href="https://linlshare.github.io/2018/10/28/it/java/base/Redis/"/>
    <id>https://linlshare.github.io/2018/10/28/it/java/base/Redis/</id>
    <published>2018-10-28T15:02:00.000Z</published>
    <updated>2018-11-22T09:26:46.508Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> brew install redis</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="启动-Redis-Server"><a href="#启动-Redis-Server" class="headerlink" title="启动 Redis Server"></a>启动 Redis Server</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span>./redis-server</span><br></pre></td></tr></table></figure><h3 id="进入-Redis-命令行"><a href="#进入-Redis-命令行" class="headerlink" title="进入 Redis 命令行"></a>进入 Redis 命令行</h3><p>（1）本地连接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span>redis-cli</span><br><span class="line">redis 127.0.0.1:6379&gt;</span><br><span class="line">redis 127.0.0.1:6379&gt; PING</span><br><span class="line"></span><br><span class="line">PONG</span><br></pre></td></tr></table></figure><p>（2）远程连接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> redis-cli -h host -p port -a password</span><br></pre></td></tr></table></figure><h3 id="取键相关命令"><a href="#取键相关命令" class="headerlink" title="取键相关命令"></a>取键相关命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 查找所有 key</span><br><span class="line"><span class="meta">&gt;</span> KEYS *</span><br><span class="line"><span class="meta">#</span> 查找符合给定正则的 key</span><br><span class="line"><span class="meta">&gt;</span> KEYS pattern</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 删除某个 key</span><br><span class="line"><span class="meta">&gt;</span> DEL a_key</span><br><span class="line"><span class="meta">#</span> 检查某个 key 是否存在</span><br><span class="line"><span class="meta">&gt;</span> EXISTS a_key</span><br><span class="line"><span class="meta">#</span> 以秒为单位，返回给定 key 的剩余生存时间(TTL, time to live)。</span><br><span class="line"><span class="meta">&gt;</span> TTL a_key</span><br><span class="line"><span class="meta">#</span> 获知某个 key 存储值的类型</span><br><span class="line"><span class="meta">&gt;</span> TYPE a_key</span><br></pre></td></tr></table></figure><h3 id="取值相关命令"><a href="#取值相关命令" class="headerlink" title="取值相关命令"></a>取值相关命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 设置指定 key 的值</span><br><span class="line"><span class="meta">&gt;</span> SET a_key a_value</span><br><span class="line"><span class="meta">#</span> 获取指定 key 的字符串值</span><br><span class="line"><span class="meta">&gt;</span> GET a_key</span><br></pre></td></tr></table></figure><h3 id="List-相关命令"><a href="#List-相关命令" class="headerlink" title="List 相关命令"></a>List 相关命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 获知列表长度</span><br><span class="line"><span class="meta">&gt;</span> Llen a_key</span><br><span class="line"><span class="meta">#</span> 获取列表指定范围内的元素。其中 0 表示列表的第一个元素， 1 表示列表的第二个元素，以此类推。 你也可以使用负数下标，以 -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素，以此类推。</span><br><span class="line"><span class="meta">&gt;</span> Lrange a_key start end</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。</span><br><span class="line"><span class="meta">&gt;</span> Ltrim a_key start end</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 移除并返回列表的最后一个元素。</span><br><span class="line"><span class="meta">&gt;</span> Lpop a_key</span><br></pre></td></tr></table></figure><h3 id="删库跑路相关命令"><a href="#删库跑路相关命令" class="headerlink" title="删库跑路相关命令"></a>删库跑路相关命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 删除所有数据库的所有key</span><br><span class="line"><span class="meta">&gt;</span> FLUSHALL</span><br><span class="line"><span class="meta">#</span> 删除当前数据库的所有key</span><br><span class="line"><span class="meta">&gt;</span> FLUSHDB</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://www.redis.net.cn/order/" target="_blank" rel="noopener">Redis 命令参考</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span 
      
    
    </summary>
    
      <category term="it" scheme="https://linlshare.github.io/categories/it/"/>
    
      <category term="java" scheme="https://linlshare.github.io/categories/it/java/"/>
    
      <category term="base" scheme="https://linlshare.github.io/categories/it/java/base/"/>
    
    
      <category term="Java" scheme="https://linlshare.github.io/tags/Java/"/>
    
      <category term="Redis" scheme="https://linlshare.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Hexo + Github Page = 个人 wiki.</title>
    <link href="https://linlshare.github.io/2018/10/28/it/tool/Hexo%20+%20Github%20Page%20=%20%E4%B8%AA%E4%BA%BA%20wiki/"/>
    <id>https://linlshare.github.io/2018/10/28/it/tool/Hexo + Github Page = 个人 wiki/</id>
    <published>2018-10-27T16:00:00.000Z</published>
    <updated>2018-11-22T09:38:16.190Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hexo-安装"><a href="#Hexo-安装" class="headerlink" title="Hexo 安装"></a>Hexo 安装</h2><h3 id="环境依赖"><a href="#环境依赖" class="headerlink" title="环境依赖"></a>环境依赖</h3><ul><li>Node.js</li><li>Git</li></ul><h3 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">npm install hexo --save</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>如果命令无法运行，可以尝试更换taobao的npm源</span><br><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h3 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>Hexo 将会在指定文件夹中新建所需要的文件。</span><br><span class="line">hexo init &lt;folder&gt;</span><br><span class="line">cd &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>安装Hexo插件</span><br><span class="line">npm install hexo-generator-index --save</span><br><span class="line">npm install hexo-generator-archive --save</span><br><span class="line">npm install hexo-generator-category --save</span><br><span class="line">npm install hexo-generator-tag --save</span><br><span class="line">npm install hexo-server --save</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">npm install hexo-deployer-heroku --save</span><br><span class="line">npm install hexo-deployer-rsync --save</span><br><span class="line">npm install hexo-deployer-openshift --save</span><br><span class="line">npm install hexo-renderer-marked@0.2 --save</span><br><span class="line">npm install hexo-renderer-stylus@0.2 --save</span><br><span class="line">npm install hexo-generator-feed@1 --save</span><br><span class="line">npm install hexo-generator-sitemap@1 --save</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 在本地查看效果</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><h3 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h3><p>修改根目录的 <code>_config.yml</code>，具体如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: http://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/tommy351/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site #整站的基本信息</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">IT协会</span> <span class="comment">#网站标题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">学习</span> <span class="string">总结</span> <span class="string">分享</span> <span class="comment">#网站副标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">学习</span> <span class="string">总结</span> <span class="string">分享</span> <span class="comment">#网站描述</span></span><br><span class="line"><span class="attr">author:</span>  <span class="string">itxiehui#网站作者</span></span><br><span class="line"><span class="attr">email:</span> <span class="string">gdinit@163.com</span> <span class="comment">#联系邮箱</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory</span></span><br><span class="line"><span class="attr">url:</span> <span class="attr">http://itxiehui.github.io</span> <span class="comment">#你的域名</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span></span><br><span class="line"></span><br><span class="line"><span class="string">......</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">10</span> <span class="comment">#每页10篇文章</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Disqus #社会化评论disqus</span></span><br><span class="line"><span class="attr">disqus_shortname:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://github.com/tommy351/hexo/wiki/Plugins</span></span><br><span class="line"><span class="comment">## Themes: https://github.com/tommy351/hexo/wiki/Themes</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">jacman</span> <span class="comment">#修改主题</span></span><br><span class="line"><span class="attr">exclude_generator:</span></span><br><span class="line"><span class="attr">Plugins:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">hexo-generator-feed</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">hexo-generator-sitemap</span></span><br><span class="line"></span><br><span class="line"><span class="string">......</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: http://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span> <span class="comment"># 部署位置</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">github</span></span><br><span class="line"><span class="attr">  repository:</span> <span class="attr">https://github.com/test/test.github.io.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><h3 id="开始写作"><a href="#开始写作" class="headerlink" title="开始写作"></a>开始写作</h3><p>使用 <code>hexo new &quot;article&quot;</code>创建一个新文件，该文件为<code>*.md</code> 格式，可以使用 <strong>Typora</strong>（<em>一款优秀的 Markdown 写作工具，支持侧边栏显示目录和文件夹，最令人惊叹的是编辑和渲染合一的写作方式</em>）进行写作。然后使用 <code>hexo d -g</code> 生成相关 web 页面并部署到 Github 上。注意在 <code>_config.yml</code>中配置的 deploy 的 repository 要看是否电脑有多个 Github 账号。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>常用命令</span><br><span class="line">hexo new "postName" #新建文章</span><br><span class="line">hexo new page "pageName" #新建页面</span><br><span class="line">hexo generate #生成静态页面至public目录</span><br><span class="line">hexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span><br><span class="line">hexo deploy #将.deploy目录部署到GitHub</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#简写</span><br><span class="line">hexo n == hexo new</span><br><span class="line">hexo g == hexo generate</span><br><span class="line">hexo s == hexo server</span><br><span class="line">hexo d == hexo deploy</span><br></pre></td></tr></table></figure><h2 id="使用-Wikitten-主题"><a href="#使用-Wikitten-主题" class="headerlink" title="使用 Wikitten 主题"></a>使用 Wikitten 主题</h2><p>访问 <a href="https://github.com/zthxxx/hexo-theme-Wikitten" target="_blank" rel="noopener">hexo-theme-Wikitten</a> 了解如何安装该款主题。</p><h2 id="默认显示文章目录（toc-as-default）"><a href="#默认显示文章目录（toc-as-default）" class="headerlink" title="默认显示文章目录（toc as default）"></a>默认显示文章目录（toc as default）</h2><p>在 <code>hemes/Wikitten/layout/common</code> 找到 <code>article.ejs</code> ，并修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (post.toc) &#123; %&gt;</span><br><span class="line">&lt;div id=&quot;toc&quot; class=&quot;toc-article&quot;&gt;</span><br><span class="line">&lt;strong class=&quot;toc-title&quot;&gt;&lt;%= __(&apos;article.catalogue&apos;) %&gt;&lt;/strong&gt;</span><br><span class="line">&lt;%- toc(post.content) %&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (post.toc!=false) &#123; %&gt;</span><br><span class="line">&lt;div id=&quot;toc&quot; class=&quot;toc-article&quot;&gt;</span><br><span class="line">&lt;strong class=&quot;toc-title&quot;&gt;&lt;%= __(&apos;article.catalogue&apos;) %&gt;&lt;/strong&gt;</span><br><span class="line">&lt;%- toc(post.content) %&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>然后重新生成部署（<code>hexo g -d</code>）即可。</p><h2 id="引用本地图片"><a href="#引用本地图片" class="headerlink" title="引用本地图片"></a>引用本地图片</h2><p>按照官方的 <a href="https://hexo.io/zh-cn/docs/asset-folders.html" target="_blank" rel="noopener">asset-folders</a> 的方法处理图片引用，在本地预览时是无法显示的，参考文章 <a href="http://etrd.org/2017/01/23/hexo%E4%B8%AD%E5%AE%8C%E7%BE%8E%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/" target="_blank" rel="noopener">hexo中完美插入本地图片</a> ，总结出如下的解决方案：</p><p>（1）开启 <code>post_asset_folder</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">//</span> <span class="string">config.yml</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>（2）安装 <code>hexo-asset-image</code> 插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install https://github.com/CodeFalling/hexo-asset-image --save</span><br></pre></td></tr></table></figure><p>（3）使用方式</p><ol><li>在与 <code>_posts/my_article.md</code>的平级位置上创建文件夹 <code>my_article</code>；</li><li>放置 <code>my_article.md</code> 文件中引用到的图片，例如 <code>my_pic.jpg</code>；</li><li>在 <code>my_article.md</code> 以 <code>![my_pic](my_article/my_pic.jpg)</code> 方式引用。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Hexo-安装&quot;&gt;&lt;a href=&quot;#Hexo-安装&quot; class=&quot;headerlink&quot; title=&quot;Hexo 安装&quot;&gt;&lt;/a&gt;Hexo 安装&lt;/h2&gt;&lt;h3 id=&quot;环境依赖&quot;&gt;&lt;a href=&quot;#环境依赖&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="it" scheme="https://linlshare.github.io/categories/it/"/>
    
      <category term="tool" scheme="https://linlshare.github.io/categories/it/tool/"/>
    
    
      <category term="Hexo" scheme="https://linlshare.github.io/tags/Hexo/"/>
    
      <category term="Wiki" scheme="https://linlshare.github.io/tags/Wiki/"/>
    
  </entry>
  
  <entry>
    <title>Draw.io</title>
    <link href="https://linlshare.github.io/2018/10/23/it/tool/Draw.io/"/>
    <id>https://linlshare.github.io/2018/10/23/it/tool/Draw.io/</id>
    <published>2018-10-23T02:14:00.000Z</published>
    <updated>2018-11-22T09:29:47.170Z</updated>
    
    <content type="html"><![CDATA[<h2 id="如何给类图增加一个字段？"><a href="#如何给类图增加一个字段？" class="headerlink" title="如何给类图增加一个字段？"></a>如何给类图增加一个字段？</h2><p>选中一个字段，然后按 <code>Ctrl +Enter</code> 即可。</p><p>参考：<a href="https://stackoverflow.com/a/48559108/5671221" target="_blank" rel="noopener">Add row to class diagram - stackoverflow</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;如何给类图增加一个字段？&quot;&gt;&lt;a href=&quot;#如何给类图增加一个字段？&quot; class=&quot;headerlink&quot; title=&quot;如何给类图增加一个字段？&quot;&gt;&lt;/a&gt;如何给类图增加一个字段？&lt;/h2&gt;&lt;p&gt;选中一个字段，然后按 &lt;code&gt;Ctrl +Enter&lt;/
      
    
    </summary>
    
      <category term="it" scheme="https://linlshare.github.io/categories/it/"/>
    
      <category term="tool" scheme="https://linlshare.github.io/categories/it/tool/"/>
    
    
      <category term="Draw.io" scheme="https://linlshare.github.io/tags/Draw-io/"/>
    
      <category term="绘图" scheme="https://linlshare.github.io/tags/%E7%BB%98%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>周记 20181021</title>
    <link href="https://linlshare.github.io/2018/10/21/thinking/weekly/%E5%91%A8%E8%AE%B0%2020181021/"/>
    <id>https://linlshare.github.io/2018/10/21/thinking/weekly/周记 20181021/</id>
    <published>2018-10-21T08:51:00.000Z</published>
    <updated>2018-11-04T13:50:41.937Z</updated>
    
    <content type="html"><![CDATA[<p>恍恍惚，又一周过去了。想下，周一以来工作上一直在不断地修补后台好友邀请服务的 bug，还有就是开发聊天和推送服务，顺便补了下 Spring 的知识。学习上似乎晚上会看下《枕草子》，不过速度有点慢了，后面还有好几千页呢。情感上，因为早晚听巴赫作品集的关系，基本稳定，不会有太大波动，就是有时候夜里难以入睡，解决方案是看 Kindle，看着看着不知不觉就睡过去了。最大的收获是发现了一款叫 “方片” 的产品（包含移动端和 Chrome 插件），相见恨晚，它快速简便地收集资料（文字、图片和链接），多端同步，还可以同步到印象笔记中，这样的软件即使付费使用我也愿意。哦，对了，我还重新认识了 Afred 这款 Mac 上的效率佳软，其剪贴板历史功能、查字典和文件查找快捷命令令我折服。</p><p>另一个我：工作上能意识到不足，然后补充相关的知识，这点很不错。但是要 output 啊，没见你输出什么笔记之类的，还有要有计划地学习，不能逮到什么学习什么，看到不足的可以先收集起来，然后下一周努力补上。学习上也是，那么厚的书，你有考虑到后果吗？你有安排什么时候会读完吗？不过说来你有在进行细致的读书补遗，这点很 nice，坚持补遗，才能有接近作者生活体验的读书体验。还有巴赫作品集实在是你这种单身狗的救星了，平和而又有变化的旋律可以稳定人的情绪，特别是那平均律，足以令你陶然其中。最后，效率软件要用起来，不能再依赖慢吞吞的触摸板点来点去了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;恍恍惚，又一周过去了。想下，周一以来工作上一直在不断地修补后台好友邀请服务的 bug，还有就是开发聊天和推送服务，顺便补了下 Spring 的知识。学习上似乎晚上会看下《枕草子》，不过速度有点慢了，后面还有好几千页呢。情感上，因为早晚听巴赫作品集的关系，基本稳定，不会有太大
      
    
    </summary>
    
      <category term="thinking" scheme="https://linlshare.github.io/categories/thinking/"/>
    
      <category term="weekly" scheme="https://linlshare.github.io/categories/thinking/weekly/"/>
    
    
      <category term="自省" scheme="https://linlshare.github.io/tags/%E8%87%AA%E7%9C%81/"/>
    
      <category term="周记" scheme="https://linlshare.github.io/tags/%E5%91%A8%E8%AE%B0/"/>
    
  </entry>
  
</feed>
