<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lshare手札</title>
  <icon>https://www.gravatar.com/avatar/67398ac80b713195e4e6faee10834ea3</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://linlshare.github.io/"/>
  <updated>2018-10-29T12:18:02.347Z</updated>
  <id>https://linlshare.github.io/</id>
  
  <author>
    <name>Lshare</name>
    <email>Lshare@outlook.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java EE 世界的一些概念</title>
    <link href="https://linlshare.github.io/2018/10/29/it/java/Java%20EE%20%E4%B8%96%E7%95%8C%E7%9A%84%E4%B8%80%E4%BA%9B%E6%A6%82%E5%BF%B5/"/>
    <id>https://linlshare.github.io/2018/10/29/it/java/Java EE 世界的一些概念/</id>
    <published>2018-10-29T12:14:00.000Z</published>
    <updated>2018-10-29T12:18:02.347Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java-EE"><a href="#Java-EE" class="headerlink" title="Java EE"></a>Java EE</h2><p>Java平台企业版，2018年3月更名为 <strong>Jakarta EE</strong>。Jave EE 是一系列技术标准所组成的平台，包括：</p><ul><li>Servlet</li><li>EJB</li><li>JDBC</li><li>JSP</li><li>JSTL</li><li>…</li></ul><h2 id="服务器与容器（Server-and-Container）"><a href="#服务器与容器（Server-and-Container）" class="headerlink" title="服务器与容器（Server and Container）"></a>服务器与容器（Server and Container）</h2><h3 id="服务器的定义"><a href="#服务器的定义" class="headerlink" title="服务器的定义"></a>服务器的定义</h3><p>依<a href="https://zh.wikipedia.org/zh-cn/%E6%9C%8D%E5%8A%A1%E5%99%A8" target="_blank" rel="noopener">维基百科</a>，服务器（软件）是指一个管理资源并为用户提供服务的计算机软件。可分为：</p><ul><li>文件服务器（File Server），提供文件存取服务。</li><li>数据库服务器（Database Server），提供数据库存取服务。</li><li>邮件服务器（Mail Server），提供邮件存取服务。</li><li><strong>网页服务器</strong>（Web Server），提供网页浏览服务，通常所说的 Web 服务器，含义更广，包括了应用程序服务器。</li><li>FTP 服务器（FTP Server），提供文件传输服务。</li><li><strong>应用程序服务器</strong>（Application Server），提供应用程序接口服务。</li><li><strong>代理服务器</strong>（Proxy Server），提供代理服务，分正向和反向代理。</li><li>…</li></ul><h3 id="正向代理（Forward-Proxy）与反向代理（Reverse-Proxy）"><a href="#正向代理（Forward-Proxy）与反向代理（Reverse-Proxy）" class="headerlink" title="正向代理（Forward Proxy）与反向代理（Reverse Proxy）"></a>正向代理（Forward Proxy）与反向代理（Reverse Proxy）</h3><p>正向代理和反向代理以代理对象为区分，正向代理代理的是客户端，而目标服务器对真实的客户端的请求是无感的；反向代理代理的是服务器群（或簇），而客户端对真实处理请求的服务器是无感的。更多信息参见：<a href="https://www.zhihu.com/question/24723688/answer/128105528" target="_blank" rel="noopener">反向代理为何叫反向代理？ - 刘志军的回答 - 知乎</a>。</p><h3 id="容器的定义"><a href="#容器的定义" class="headerlink" title="容器的定义"></a>容器的定义</h3><p>该语境下的容器，既不是上街买菜用的容器，也不是存取其他类的集合（比如 List），而是一个运行在 JVM 的 Java 程序，本身作为一个组件的运行时 ，起组件与服务器之间的接口作用，实际上也可以称之为服务器软件，只是当处在大的服务器软件包裹下时，选择另一种称呼罢了。</p><p>随着网络服务的要求越来越复杂，开发人员使用规范和组件的概念将服务划分，组件实现了规范，容器运行着组件，最新的 <em>规范-组件-功能-容器</em> 对应关系如下：</p><table><thead><tr><th>规范</th><th>组件</th><th>功能</th><th>容器</th></tr></thead><tbody><tr><td>JSR 369</td><td>Servlet 4.0</td><td>Server Applet，服务端小程序，处理基于 HTTP 的 Web 请求，响应动态 Web 内容。</td><td>Servlet 容器</td></tr><tr><td>JSR 245</td><td>JSP 2.1</td><td>JavaServer Pages，实现动态网页，其基于 Servlet 技术，故 JSP 容器是 Servlet 容器的子集。</td><td>JSP 容器</td></tr><tr><td>JSR 220</td><td>EJB 3.0</td><td><a href="https://zh.wikipedia.org/zh-cn/EJB#EJB_3.0" target="_blank" rel="noopener">Enterprise JavaBean</a>，封装业务逻辑，包括 Session Bean，Entity Bean 和 Message Driven Bean。</td><td>EJB 容器</td></tr></tbody></table><h3 id="常见的-Web-服务器"><a href="#常见的-Web-服务器" class="headerlink" title="常见的 Web 服务器"></a>常见的 Web 服务器</h3><ul><li>Apache HTTP Server</li><li>Nginx</li><li>IIS</li><li>Tomcat</li><li>Jetty</li><li>WildFly（原名JBoss AS或者JBoss）</li><li>Netty</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Java-EE&quot;&gt;&lt;a href=&quot;#Java-EE&quot; class=&quot;headerlink&quot; title=&quot;Java EE&quot;&gt;&lt;/a&gt;Java EE&lt;/h2&gt;&lt;p&gt;Java平台企业版，2018年3月更名为 &lt;strong&gt;Jakarta EE&lt;/strong&gt;。J
      
    
    </summary>
    
      <category term="it" scheme="https://linlshare.github.io/categories/it/"/>
    
      <category term="java" scheme="https://linlshare.github.io/categories/it/java/"/>
    
    
      <category term="Java" scheme="https://linlshare.github.io/tags/Java/"/>
    
      <category term="JavaEE" scheme="https://linlshare.github.io/tags/JavaEE/"/>
    
      <category term="服务器" scheme="https://linlshare.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>周记1028</title>
    <link href="https://linlshare.github.io/2018/10/28/thinking/%E8%87%AA%E7%9C%81/%E5%91%A8%E8%AE%B01028/"/>
    <id>https://linlshare.github.io/2018/10/28/thinking/自省/周记1028/</id>
    <published>2018-10-28T15:50:00.000Z</published>
    <updated>2018-10-28T16:02:48.040Z</updated>
    
    <content type="html"><![CDATA[<p>怎么说呢？先说坏的地方吧，Spring 的学习任务全部没完成，真遗憾，到底没能坚持，练吉他的安排也暂时搁置了，对音调的高低把握不准，再想想看有无方法解决。日语和古代汉语的学习任务完成 70% 左右，阅读《枕草子》的计划算是完成较好的，完成了 80% 。</p><p>值得开心的是，发现了原来可以使用 github page + hexo + wikitten 搭建一个个人的 wiki，知识管理又迈上了一个新台阶。</p><p>还有許進雄的《甲骨文簡易詞典》已经看完 1/3 了，等看完了一定要整理一份文档，从最简单的构件开始讲述文字隐藏的朴素的创意。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;怎么说呢？先说坏的地方吧，Spring 的学习任务全部没完成，真遗憾，到底没能坚持，练吉他的安排也暂时搁置了，对音调的高低把握不准，再想想看有无方法解决。日语和古代汉语的学习任务完成 70% 左右，阅读《枕草子》的计划算是完成较好的，完成了 80% 。&lt;/p&gt;
&lt;p&gt;值得开
      
    
    </summary>
    
      <category term="thinking" scheme="https://linlshare.github.io/categories/thinking/"/>
    
      <category term="自省" scheme="https://linlshare.github.io/categories/thinking/%E8%87%AA%E7%9C%81/"/>
    
    
      <category term="自省" scheme="https://linlshare.github.io/tags/%E8%87%AA%E7%9C%81/"/>
    
      <category term="周记" scheme="https://linlshare.github.io/tags/%E5%91%A8%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Java 后端基础之 8. Redis</title>
    <link href="https://linlshare.github.io/2018/10/28/it/java/Java%20%E5%90%8E%E7%AB%AF%E5%9F%BA%E7%A1%80/Java%20%E5%90%8E%E7%AB%AF%E5%9F%BA%E7%A1%80%E4%B9%8B%208.%20Redis/"/>
    <id>https://linlshare.github.io/2018/10/28/it/java/Java 后端基础/Java 后端基础之 8. Redis/</id>
    <published>2018-10-28T15:02:00.000Z</published>
    <updated>2018-10-28T15:10:36.807Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">==&gt; Downloading https://homebrew.bintray.com/bottles/redis-4.0.6.high_sierra.bottle.tar.gz</span><br><span class="line">######################################################################## 100.0%</span><br><span class="line">==&gt; Pouring redis-4.0.6.high_sierra.bottle.tar.gz</span><br><span class="line">==&gt; Caveats</span><br><span class="line">To have launchd start redis now and restart at login:</span><br><span class="line">  brew services start redis</span><br><span class="line">Or, if you don&apos;t want/need a background service you can just run:</span><br><span class="line">  redis-server /usr/local/etc/redis.conf</span><br><span class="line">==&gt; Summary</span><br><span class="line">🍺  /usr/local/Cellar/redis/4.0.6: 13 files, 2.8MB</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span 
      
    
    </summary>
    
      <category term="it" scheme="https://linlshare.github.io/categories/it/"/>
    
      <category term="java" scheme="https://linlshare.github.io/categories/it/java/"/>
    
      <category term="Java 后端基础" scheme="https://linlshare.github.io/categories/it/java/Java-%E5%90%8E%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://linlshare.github.io/tags/Java/"/>
    
      <category term="Redis" scheme="https://linlshare.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>使用 Hexo 和 Github Page 搭建个人 wiki</title>
    <link href="https://linlshare.github.io/2018/10/28/it/tool/%E4%BD%BF%E7%94%A8%20Hexo%20%E5%92%8C%20Github%20Page%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%20wiki/"/>
    <id>https://linlshare.github.io/2018/10/28/it/tool/使用 Hexo 和 Github Page 搭建个人 wiki/</id>
    <published>2018-10-27T16:00:00.000Z</published>
    <updated>2018-10-29T13:46:50.928Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hexo-安装"><a href="#Hexo-安装" class="headerlink" title="Hexo 安装"></a>Hexo 安装</h2><h3 id="环境依赖"><a href="#环境依赖" class="headerlink" title="环境依赖"></a>环境依赖</h3><ul><li>Node.js</li><li>Git</li></ul><h3 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">npm install hexo --save</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>如果命令无法运行，可以尝试更换taobao的npm源</span><br><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h3 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>Hexo 将会在指定文件夹中新建所需要的文件。</span><br><span class="line">hexo init &lt;folder&gt;</span><br><span class="line">cd &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>安装Hexo插件</span><br><span class="line">npm install hexo-generator-index --save</span><br><span class="line">npm install hexo-generator-archive --save</span><br><span class="line">npm install hexo-generator-category --save</span><br><span class="line">npm install hexo-generator-tag --save</span><br><span class="line">npm install hexo-server --save</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">npm install hexo-deployer-heroku --save</span><br><span class="line">npm install hexo-deployer-rsync --save</span><br><span class="line">npm install hexo-deployer-openshift --save</span><br><span class="line">npm install hexo-renderer-marked@0.2 --save</span><br><span class="line">npm install hexo-renderer-stylus@0.2 --save</span><br><span class="line">npm install hexo-generator-feed@1 --save</span><br><span class="line">npm install hexo-generator-sitemap@1 --save</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 在本地查看效果</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><h3 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h3><p>修改根目录的 <code>_config.yml</code>，具体如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: http://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/tommy351/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site #整站的基本信息</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">IT协会</span> <span class="comment">#网站标题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">学习</span> <span class="string">总结</span> <span class="string">分享</span> <span class="comment">#网站副标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">学习</span> <span class="string">总结</span> <span class="string">分享</span> <span class="comment">#网站描述</span></span><br><span class="line"><span class="attr">author:</span>  <span class="string">itxiehui#网站作者</span></span><br><span class="line"><span class="attr">email:</span> <span class="string">gdinit@163.com</span> <span class="comment">#联系邮箱</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory</span></span><br><span class="line"><span class="attr">url:</span> <span class="attr">http://itxiehui.github.io</span> <span class="comment">#你的域名</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span></span><br><span class="line"></span><br><span class="line"><span class="string">......</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">10</span> <span class="comment">#每页10篇文章</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Disqus #社会化评论disqus</span></span><br><span class="line"><span class="attr">disqus_shortname:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://github.com/tommy351/hexo/wiki/Plugins</span></span><br><span class="line"><span class="comment">## Themes: https://github.com/tommy351/hexo/wiki/Themes</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">jacman</span> <span class="comment">#修改主题</span></span><br><span class="line"><span class="attr">exclude_generator:</span></span><br><span class="line"><span class="attr">Plugins:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">hexo-generator-feed</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">hexo-generator-sitemap</span></span><br><span class="line"></span><br><span class="line"><span class="string">......</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: http://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span> <span class="comment"># 部署位置</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">github</span></span><br><span class="line"><span class="attr">  repository:</span> <span class="attr">https://github.com/test/test.github.io.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><h3 id="开始写作"><a href="#开始写作" class="headerlink" title="开始写作"></a>开始写作</h3><p>使用 <code>hexo new &quot;article&quot;</code>创建一个新文件，该文件为<code>*.md</code> 格式，可以使用 <strong>Typora</strong>（<em>一款优秀的 Markdown 写作工具，支持侧边栏显示目录和文件夹，最令人惊叹的是编辑和渲染合一的写作方式</em>）进行写作。然后使用 <code>hexo d -g</code> 生成相关 web 页面并部署到 Github 上。注意在 <code>_config.yml</code>中配置的 deploy 的 repository 要看是否电脑有多个 Github 账号。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>常用命令</span><br><span class="line">hexo new "postName" #新建文章</span><br><span class="line">hexo new page "pageName" #新建页面</span><br><span class="line">hexo generate #生成静态页面至public目录</span><br><span class="line">hexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span><br><span class="line">hexo deploy #将.deploy目录部署到GitHub</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#简写</span><br><span class="line">hexo n == hexo new</span><br><span class="line">hexo g == hexo generate</span><br><span class="line">hexo s == hexo server</span><br><span class="line">hexo d == hexo deploy</span><br></pre></td></tr></table></figure><h2 id="使用-Wikitten-主题"><a href="#使用-Wikitten-主题" class="headerlink" title="使用 Wikitten 主题"></a>使用 Wikitten 主题</h2><p>访问 <a href="https://github.com/zthxxx/hexo-theme-Wikitten" target="_blank" rel="noopener">hexo-theme-Wikitten</a> 了解如何安装该款主题。</p><h2 id="默认显示文章目录（toc-as-default）"><a href="#默认显示文章目录（toc-as-default）" class="headerlink" title="默认显示文章目录（toc as default）"></a>默认显示文章目录（toc as default）</h2><p>在 <code>hemes/Wikitten/layout/common</code> 找到 <code>article.ejs</code> ，并修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (post.toc) &#123; %&gt;</span><br><span class="line">&lt;div id=&quot;toc&quot; class=&quot;toc-article&quot;&gt;</span><br><span class="line">&lt;strong class=&quot;toc-title&quot;&gt;&lt;%= __(&apos;article.catalogue&apos;) %&gt;&lt;/strong&gt;</span><br><span class="line">&lt;%- toc(post.content) %&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (post.toc!=false) &#123; %&gt;</span><br><span class="line">&lt;div id=&quot;toc&quot; class=&quot;toc-article&quot;&gt;</span><br><span class="line">&lt;strong class=&quot;toc-title&quot;&gt;&lt;%= __(&apos;article.catalogue&apos;) %&gt;&lt;/strong&gt;</span><br><span class="line">&lt;%- toc(post.content) %&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>然后重新生成部署（<code>hexo g -d</code>）即可。</p><h2 id="引用本地图片"><a href="#引用本地图片" class="headerlink" title="引用本地图片"></a>引用本地图片</h2><p>按照官方的 <a href="https://hexo.io/zh-cn/docs/asset-folders.html" target="_blank" rel="noopener">asset-folders</a> 的方法处理图片引用，在本地预览时是无法显示的，参考文章 <a href="http://etrd.org/2017/01/23/hexo%E4%B8%AD%E5%AE%8C%E7%BE%8E%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/" target="_blank" rel="noopener">hexo中完美插入本地图片</a> ，总结出如下的解决方案：</p><p>（1）开启 <code>post_asset_folder</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">//</span> <span class="string">config.yml</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>（2）安装 <code>hexo-asset-image</code> 插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install https://github.com/CodeFalling/hexo-asset-image --save</span><br></pre></td></tr></table></figure><p>（3）使用方式</p><ol><li>在与 <code>_posts/my_article.md</code>的平级位置上创建文件夹 <code>my_article</code>；</li><li>放置 <code>my_article.md</code> 文件中引用到的图片，例如 <code>my_pic.jpg</code>；</li><li>在 <code>my_article.md</code> 以 <code>![my_pic](my_article/my_pic.jpg)</code> 方式引用。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Hexo-安装&quot;&gt;&lt;a href=&quot;#Hexo-安装&quot; class=&quot;headerlink&quot; title=&quot;Hexo 安装&quot;&gt;&lt;/a&gt;Hexo 安装&lt;/h2&gt;&lt;h3 id=&quot;环境依赖&quot;&gt;&lt;a href=&quot;#环境依赖&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="it" scheme="https://linlshare.github.io/categories/it/"/>
    
      <category term="tool" scheme="https://linlshare.github.io/categories/it/tool/"/>
    
    
      <category term="Hexo" scheme="https://linlshare.github.io/tags/Hexo/"/>
    
      <category term="Wiki" scheme="https://linlshare.github.io/tags/Wiki/"/>
    
  </entry>
  
  <entry>
    <title>Draw.io 使用笔记</title>
    <link href="https://linlshare.github.io/2018/10/23/it/tool/Draw.io%20%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    <id>https://linlshare.github.io/2018/10/23/it/tool/Draw.io 使用笔记/</id>
    <published>2018-10-23T02:14:00.000Z</published>
    <updated>2018-10-26T16:11:34.275Z</updated>
    
    <content type="html"><![CDATA[<h2 id="如何给类图增加一个字段？"><a href="#如何给类图增加一个字段？" class="headerlink" title="如何给类图增加一个字段？"></a>如何给类图增加一个字段？</h2><p>选中一个字段，然后按 <code>Ctrl +Enter</code> 即可。</p><p>参考：<a href="https://stackoverflow.com/a/48559108/5671221" target="_blank" rel="noopener">Add row to class diagram - stackoverflow</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;如何给类图增加一个字段？&quot;&gt;&lt;a href=&quot;#如何给类图增加一个字段？&quot; class=&quot;headerlink&quot; title=&quot;如何给类图增加一个字段？&quot;&gt;&lt;/a&gt;如何给类图增加一个字段？&lt;/h2&gt;&lt;p&gt;选中一个字段，然后按 &lt;code&gt;Ctrl +Enter&lt;/
      
    
    </summary>
    
      <category term="it" scheme="https://linlshare.github.io/categories/it/"/>
    
      <category term="tool" scheme="https://linlshare.github.io/categories/it/tool/"/>
    
    
      <category term="Draw.io" scheme="https://linlshare.github.io/tags/Draw-io/"/>
    
      <category term="绘图" scheme="https://linlshare.github.io/tags/%E7%BB%98%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>周记1021</title>
    <link href="https://linlshare.github.io/2018/10/21/thinking/%E8%87%AA%E7%9C%81/%E5%91%A8%E8%AE%B01021/"/>
    <id>https://linlshare.github.io/2018/10/21/thinking/自省/周记1021/</id>
    <published>2018-10-21T08:51:00.000Z</published>
    <updated>2018-10-28T15:57:09.884Z</updated>
    
    <content type="html"><![CDATA[<p>恍恍惚，又一周过去了。想下，周一以来工作上一直在不断地修补后台好友邀请服务的 bug，还有就是开发聊天和推送服务，顺便补了下 Spring 的知识。学习上似乎晚上会看下《枕草子》，不过速度有点慢了，后面还有好几千页呢。情感上，因为早晚听巴赫作品集的关系，基本稳定，不会有太大波动，就是有时候夜里难以入睡，解决方案是看 Kindle，看着看着不知不觉就睡过去了。最大的收获是发现了一款叫 “方片” 的产品（包含移动端和 Chrome 插件），相见恨晚，它快速简便地收集资料（文字、图片和链接），多端同步，还可以同步到印象笔记中，这样的软件即使付费使用我也愿意。哦，对了，我还重新认识了 Afred 这款 Mac 上的效率佳软，其剪贴板历史功能、查字典和文件查找快捷命令令我折服。</p><p>另一个我：工作上能意识到不足，然后补充相关的知识，这点很不错。但是要 output 啊，没见你输出什么笔记之类的，还有要有计划地学习，不能逮到什么学习什么，看到不足的可以先收集起来，然后下一周努力补上。学习上也是，那么厚的书，你有考虑到后果吗？你有安排什么时候会读完吗？不过说来你有在进行细致的读书补遗，这点很 nice，坚持补遗，才能有接近作者生活体验的读书体验。还有巴赫作品集实在是你这种单身狗的救星了，平和而又有变化的旋律可以稳定人的情绪，特别是那平均律，足以令你陶然其中。最后，效率软件要用起来，不能再依赖慢吞吞的触摸板点来点去了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;恍恍惚，又一周过去了。想下，周一以来工作上一直在不断地修补后台好友邀请服务的 bug，还有就是开发聊天和推送服务，顺便补了下 Spring 的知识。学习上似乎晚上会看下《枕草子》，不过速度有点慢了，后面还有好几千页呢。情感上，因为早晚听巴赫作品集的关系，基本稳定，不会有太大
      
    
    </summary>
    
      <category term="thinking" scheme="https://linlshare.github.io/categories/thinking/"/>
    
      <category term="自省" scheme="https://linlshare.github.io/categories/thinking/%E8%87%AA%E7%9C%81/"/>
    
    
      <category term="自省" scheme="https://linlshare.github.io/tags/%E8%87%AA%E7%9C%81/"/>
    
      <category term="周记" scheme="https://linlshare.github.io/tags/%E5%91%A8%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Git 实战记录</title>
    <link href="https://linlshare.github.io/2018/10/17/it/tool/Git%20%E5%AE%9E%E6%88%98%E8%AE%B0%E5%BD%95/"/>
    <id>https://linlshare.github.io/2018/10/17/it/tool/Git 实战记录/</id>
    <published>2018-10-17T03:44:00.000Z</published>
    <updated>2018-10-28T15:15:52.707Z</updated>
    
    <content type="html"><![CDATA[<h3 id="提交当前分支的更改到远程的同名分支"><a href="#提交当前分支的更改到远程的同名分支" class="headerlink" title="提交当前分支的更改到远程的同名分支"></a>提交当前分支的更改到远程的同名分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin HEAD</span><br></pre></td></tr></table></figure><h3 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin :dev-sth</span><br><span class="line"># 相当于</span><br><span class="line">$ git push origin --delete dev-sth</span><br></pre></td></tr></table></figure><h3 id="撤销-git-commit-但未-git-push-的修改"><a href="#撤销-git-commit-但未-git-push-的修改" class="headerlink" title="撤销 git commit 但未 git push 的修改"></a>撤销 git commit 但未 git push 的修改</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#找到想要撤销的 commit id</span><br><span class="line">$ git log</span><br><span class="line">#撤销，但不对代码修改进行撤销，还可以再次 commit</span><br><span class="line">$ git reset &lt;commit id&gt; </span><br><span class="line">#撤销并忽略该次 commit 的代码修改</span><br><span class="line">$ git reset --hard &lt;commit id&gt;</span><br></pre></td></tr></table></figure><h3 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h3><h4 id="Git是什么？"><a href="#Git是什么？" class="headerlink" title="Git是什么？"></a>Git是什么？</h4><p>Git中译为混账，是Linus先生花了一个星期写的分布式版本控制系统（VCS，Version Control System），用于Linux内核的协同开发。所谓版本控制系统，个人理解就是可以保存文本文件的历史版本信息，并且可以回溯到某个历史版本的文本文件管理系统。它的设计就是为了方便软件开发的版本迭代和协同开发。</p><p>比如，你打开电脑的记事本，一个不小心把昨天写的备忘全给删除了，而且还习惯性地按了Ctrl+S，你懵了。一般情况下是找不回来了。除非有版本备份，现在有些云笔记类软件就提供了这样的功能。其实质就是版本控制，它可以让你回溯到某个历史版本，像是吃了后悔药一般美妙。</p><h4 id="Git怎么玩？"><a href="#Git怎么玩？" class="headerlink" title="Git怎么玩？"></a>Git怎么玩？</h4><h5 id="配置Git环境"><a href="#配置Git环境" class="headerlink" title="配置Git环境"></a>配置Git环境</h5><p>玩什么都有第一步，已经司空见惯了呃。没错就是配置环境。Git的环境配置还不算复杂：</p><ol><li><a href="https://git-scm.com/download/win" target="_blank" rel="noopener">下载Git</a>并安装Git（注意：不懂英文的按默认配置就好）;</li><li><p>向全世界宣称你的存在</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//注意：--global表示你电脑里的所以Git仓库都采用相同的配置</span><br><span class="line">//如果有不用用户的Git仓库，就去掉吧。</span><br><span class="line">$ git config --global user.name &quot;Your Name&quot;</span><br><span class="line">$ git config --global user.email &quot;email@example.com&quot;</span><br></pre></td></tr></table></figure></li></ol><h5 id="建个仓库放点东西"><a href="#建个仓库放点东西" class="headerlink" title="建个仓库放点东西"></a>建个仓库放点东西</h5><ol><li>建库简单：在磁盘上新建个文件夹作为工作区，然后右击打开Git Bash，执行<code>git init</code>，你会发现多了个<code>.git</code>文件夹。</li><li>放东西有点复杂<ul><li>第一步：在工作区新建一个文件，命名为yuren.txt。注意：文本文件的编码是UTF-8 without BOM（使用Notepad++可以查看和修改）</li><li>第二步：<code>git add .</code>添加文件到暂存区</li><li>第三步：<code>git commit -m &quot;add yuren.txt&quot;</code>添加文件到本地仓库</li></ul></li></ol><p>历尽千辛万苦终于把文件交给Git来管理了。</p><h5 id="时光机穿梭"><a href="#时光机穿梭" class="headerlink" title="时光机穿梭"></a>时光机穿梭</h5><p>假定你在上个步骤中放入的文件是：yuren.txt。里面的内容是（标记为v1）：</p><blockquote><p>[微信红包]恭喜发财，大吉大利！<br>是不是又冲进来了，这么激动干嘛，发几个文字而已~</p></blockquote><p>后来，你想了想，改成了（标记为v2）：</p><blockquote><p>[微信红包]愚人节Happy！<br>是不是又冲进来了，这么激动干嘛，发几个文字而已~</p></blockquote><p>根据【建个仓库放点东西】里说的步骤更新本地仓库中的信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m &quot;update yuren.txt&quot;</span><br></pre></td></tr></table></figure><hr><p>不知道哪根筋不对，你又想要v1版本的yuren.txt了，但是又忘了上一次写的内容，怎么办？</p><p>没关系，可以通过<code>git log</code>查看每次的提交信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ git log</span><br><span class="line">commit 1ba454f3ef3e48b88b4c24f72dc8055407cd9019</span><br><span class="line">Author: Your Name &lt;email@example.com&gt;</span><br><span class="line">Date:   Fri Apr 1 16:19:41 2016 +0800</span><br><span class="line"></span><br><span class="line">    update yuren.txt</span><br><span class="line"></span><br><span class="line">commit ce58ee1a57d21c9d752e80b820b7f2968249ac2e</span><br><span class="line">Author: Your Name &lt;email@example.com&gt;</span><br><span class="line">Date:   Fri Apr 1 16:17:35 2016 +0800</span><br><span class="line"></span><br><span class="line">    add yuren.text</span><br></pre></td></tr></table></figure><p>回退到上一次commit，只需要执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard HEAD^</span><br><span class="line">HEAD is now at ce58ee1 add yuren.text</span><br></pre></td></tr></table></figure><p>这里，HEAD^代表上一个版本，HEAD^^代表上上个版本，HEAD~100代表上100个版本。当然可以使用具体的commit id来回退，比如上面的等价于<code>$ git reset --hard ce58ee1</code></p><p>重新打开yuren.txt来看，v1版本的信息果然回来了。</p><hr><p>人的心理真是捉摸不透，刚找回v1版本的信息了，就又怀念v2版本的信息了。然而，现在使用<code>git log</code>都救不了你了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git log</span><br><span class="line">commit ce58ee1a57d21c9d752e80b820b7f2968249ac2e</span><br><span class="line">Author: Lshare &lt;linlshare@gmail.com&gt;</span><br><span class="line">Date:   Fri Apr 1 16:17:35 2016 +0800</span><br><span class="line"></span><br><span class="line">    add yuren.text</span><br></pre></td></tr></table></figure><p>v2版本的信息似乎丢失了。怎么办？</p><ul><li>方法一：如果你还知道v2版本的commit id的话可以<code>$ git reset --hard &lt;commit id&gt;</code>来解决；</li><li><p>方法二：假如你不知道也没关系，使用<code>git reflog</code>查看你的每次命令，接下来就可以用方法一解决了。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git reflog</span><br><span class="line">ce58ee1 HEAD@&#123;0&#125;: reset: moving to HEAD^</span><br><span class="line">1ba454f HEAD@&#123;1&#125;: commit: update yuren.txt</span><br><span class="line">ce58ee1 HEAD@&#123;2&#125;: commit (initial): add yuren.text</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;提交当前分支的更改到远程的同名分支&quot;&gt;&lt;a href=&quot;#提交当前分支的更改到远程的同名分支&quot; class=&quot;headerlink&quot; title=&quot;提交当前分支的更改到远程的同名分支&quot;&gt;&lt;/a&gt;提交当前分支的更改到远程的同名分支&lt;/h3&gt;&lt;figure class
      
    
    </summary>
    
      <category term="it" scheme="https://linlshare.github.io/categories/it/"/>
    
      <category term="tool" scheme="https://linlshare.github.io/categories/it/tool/"/>
    
    
      <category term="Git" scheme="https://linlshare.github.io/tags/Git/"/>
    
      <category term="版本控制" scheme="https://linlshare.github.io/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>日语一周七天的记忆方法</title>
    <link href="https://linlshare.github.io/2018/09/29/language/%E6%97%A5%E8%AA%9E/%E6%97%A5%E8%AF%AD%E4%B8%80%E5%91%A8%E4%B8%83%E5%A4%A9%E7%9A%84%E8%AE%B0%E5%BF%86%E6%96%B9%E6%B3%95/"/>
    <id>https://linlshare.github.io/2018/09/29/language/日語/日语一周七天的记忆方法/</id>
    <published>2018-09-29T15:46:00.000Z</published>
    <updated>2018-10-26T16:23:11.271Z</updated>
    
    <content type="html"><![CDATA[<h2 id="速记"><a href="#速记" class="headerlink" title="速记"></a>速记</h2><table><thead><tr><th>汉语</th><th>日语</th><th>英语</th><th>来源</th></tr></thead><tbody><tr><td>星期日</td><td>日曜日</td><td>Sunday</td><td>Sun Day（太阳之日）</td></tr><tr><td>星期一</td><td>月曜日</td><td>MonDay</td><td>Moon Day（月亮之日）</td></tr><tr><td>星期二</td><td>火曜日</td><td>Tuesday</td><td>Tiu’s Day（ Tiu 是日耳曼战争之神，代替古罗马中的战神 Mars，中国命名为火星）</td></tr><tr><td>星期三</td><td>水曜日</td><td>Wednesday</td><td>Woden’s Day（ Woden 是日耳曼神话中的至高神，代替古罗马中的 信使 Mercury ，中国命名为水星）</td></tr><tr><td>星期四</td><td>木曜日</td><td>ThursDay</td><td>Thor’s Day（ Thor 是北欧雷神，代替古罗马中的爱神 Jupiter，中国命名为木星）</td></tr><tr><td>星期五</td><td>金曜日</td><td>FriDay</td><td>Freya’s Day… Or Frigg’s Day（ Freya 和 Frigg 都是北欧女神，代替古罗马中的女神 Venus，中国命名为金星）</td></tr><tr><td>星期六</td><td>土曜日</td><td>Saturday</td><td>Saturn’s Day（ Saturn 是古罗马中的农神）</td></tr></tbody></table><h2 id="Week"><a href="#Week" class="headerlink" title="Week"></a>Week</h2><p>古巴比伦人首先使用 7 日为一周的时间单位，后来犹太人把它传到古埃及，又由古埃及传到罗马，公元3世纪以后，就广泛地传播到欧洲各国。唐朝时期在西域和中国的交流中传入了中土获得发展，再传入朝鲜半岛，日本。</p><h3 id="七曜"><a href="#七曜" class="headerlink" title="七曜"></a>七曜</h3><p>杨士勋（唐）疏：“ 谓之七曜者，日月五星皆照天下，故谓之曜。” 一个曜日就是日月五星轮流照耀世界的一天。日本曜日的说法就是从中国传入的。</p><h3 id="星期"><a href="#星期" class="headerlink" title="星期"></a>星期</h3><p>“星期”原是指牛郎星和织女星相会之期，现代意义的“星期”是个旧词新义词。光绪三十一年（1905年）由袁嘉谷所定用“星期”代替“曜日”，到了民国以后星期被广泛使用。</p><h3 id="礼拜"><a href="#礼拜" class="headerlink" title="礼拜"></a>礼拜</h3><p>到了19世纪20年代，有人将汉语中的“礼拜”一词用作英语 week 的对应词了，如1828年马礼逊《广东省土话字汇》：“WEEK ，a ，一个礼拜。”“礼拜”原为动词，指宗教徒向所信奉的神行礼。由于基督教、伊斯兰教是一星期做一次礼拜，故此词慢慢引申用来指 week 了。</p><h3 id="周"><a href="#周" class="headerlink" title="周"></a>周</h3><p>日本还有一个表示 week 的“周”字，而且这个词还传到了中国。如1901年《清议报》七十八册《马塞多尼亚》：“前在欧洲定造水雷艇六只。目下有二只，业已竣工，数周间（即数礼拜）必到。”</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><p><a href="https://www.thefreedictionary.com/How-every-day-of-the-week-got-its-name.htm" target="_blank" rel="noopener">How every day of the week got its name</a></p></li><li><p><a href="http://huayuqiao.org/articles/huangheqing/hhq16.htm" target="_blank" rel="noopener">从七曜说到“礼拜”、“星期”、“周”的语源</a></p></li><li><p><a href="https://zh.wikipedia.org/zh-cn/%E6%98%9F%E6%9C%9F" target="_blank" rel="noopener">星期 - 维基百科</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;速记&quot;&gt;&lt;a href=&quot;#速记&quot; class=&quot;headerlink&quot; title=&quot;速记&quot;&gt;&lt;/a&gt;速记&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;汉语&lt;/th&gt;
&lt;th&gt;日语&lt;/th&gt;
&lt;th&gt;英语&lt;/th&gt;
&lt;th&gt;来源&lt;/th&gt;
&lt;/tr
      
    
    </summary>
    
      <category term="language" scheme="https://linlshare.github.io/categories/language/"/>
    
      <category term="日語" scheme="https://linlshare.github.io/categories/language/%E6%97%A5%E8%AA%9E/"/>
    
    
      <category term="日语" scheme="https://linlshare.github.io/tags/%E6%97%A5%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>汉语音韵中的四声八调及平仄</title>
    <link href="https://linlshare.github.io/2018/09/28/language/%E6%BC%A2%E8%AA%9E%E8%A8%80/%E6%B1%89%E8%AF%AD%E9%9F%B3%E9%9F%B5%E4%B8%AD%E7%9A%84%E5%9B%9B%E5%A3%B0%E5%85%AB%E8%B0%83%E5%8F%8A%E5%B9%B3%E4%BB%84/"/>
    <id>https://linlshare.github.io/2018/09/28/language/漢語言/汉语音韵中的四声八调及平仄/</id>
    <published>2018-09-28T00:32:00.000Z</published>
    <updated>2018-10-26T16:26:41.148Z</updated>
    
    <content type="html"><![CDATA[<h2 id="四声八调"><a href="#四声八调" class="headerlink" title="四声八调"></a>四声八调</h2><p>国语拼音中的四声为：一声、二声、三声、四声，其正式学名分别为：阴平、阳平、上声、去声。其 IPA 调值（根据五度分音法确定的相对调值）如下：</p><table><thead><tr><th>声调</th><th>IPA 调值</th><th>记号</th></tr></thead><tbody><tr><td>阴平</td><td>55</td><td>¯</td></tr><tr><td>阳平</td><td>35</td><td>ˊ</td></tr><tr><td>上声</td><td>214</td><td>ˇ</td></tr><tr><td>去声</td><td>51</td><td>ˋ</td></tr></tbody></table><p>在古代汉语中<strong>四声八调</strong>的说法。“四声” 源自唐宋时期中古汉语的 “平上去入” 四个声调。在发展过程中经历了以下的流变：</p><h3 id="平分阴阳"><a href="#平分阴阳" class="headerlink" title="平分阴阳"></a>平分阴阳</h3><p>在元代受声母发音方法中的清浊从每一声中分出阴阳二调（清者为阴，浊者为阳），构成 “阴平”、“阳平”、“阴上”、“阳上”、“阴去”、“阳去”、“阴去”、“阳去”、“阴入”、“阳入” 共八个调。</p><p>如今，官话北京话只有平声分阴阳，而吴语和闽南语只有上声不分阴阳。</p><h3 id="浊上归去"><a href="#浊上归去" class="headerlink" title="浊上归去"></a>浊上归去</h3><p>指声母为全浊的上声字改读去声（而次浊上字声调和清上字相同）。次浊和全浊的关键在于声带震动的程度，笔者母语福佬话中刚好与中古音相符。</p><table><thead><tr><th>汉字</th><th>中古音</th><th>汉语拼音</th><th>闽南语台罗拼音</th><th>吴语拼音（苏州闲话）</th></tr></thead><tbody><tr><td>岛</td><td>清上</td><td>dǎo</td><td>tó</td><td>tau5</td></tr><tr><td>道</td><td>全浊上</td><td>dào</td><td>tō</td><td>dau6</td></tr><tr><td>老</td><td>次浊上</td><td>lǎo</td><td>láu</td><td>lau6</td></tr></tbody></table><h3 id="入派三声"><a href="#入派三声" class="headerlink" title="入派三声"></a>入派三声</h3><p>官话及大多数方言中入声消失了，并归入了其他三声，而在南方的方言（包括粤语、闽南语、客语和吴语等）中仍然包含着入声。比如 “屋” 在在粤语、闽南语、客语和吴语都是入声，而在国语中是平声。</p><h2 id="平仄"><a href="#平仄" class="headerlink" title="平仄"></a>平仄</h2><p>中古汉语中，“平仄” 是指 平声为 “平”，其他三声为 “仄”。之后随着音韵的流变，原本诗词中的 “仄” 声变得难以判断。但是根据流变规律可以得出一个简易的判别方法：如果国语中为非平声，那么就是 “仄”；如果国语中为平声，而南方方言中为入声，那么就是 “仄”，否则为 “平”。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://blog.udn.com/wangtao/17127620" target="_blank" rel="noopener">【語文常識】甚麼是「四聲」、「平仄」- 教研札記</a></li><li><a href="https://zh.wikipedia.org/wiki/%E5%9B%9B%E8%81%B2" target="_blank" rel="noopener">四聲 - 維基百科</a></li><li><a href="https://www.wugniu.com/" target="_blank" rel="noopener">吳語學堂</a></li><li><a href="https://twblg.dict.edu.tw/holodict_new/index.html" target="_blank" rel="noopener">台灣閩南語常用詞辭典</a></li><li><a href="https://www.bilibili.com/video/av11828488/?p=5" target="_blank" rel="noopener">【苏白学堂/教程】吴语苏州话语音基础入门（学堂版拼音）- Bilibili</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;四声八调&quot;&gt;&lt;a href=&quot;#四声八调&quot; class=&quot;headerlink&quot; title=&quot;四声八调&quot;&gt;&lt;/a&gt;四声八调&lt;/h2&gt;&lt;p&gt;国语拼音中的四声为：一声、二声、三声、四声，其正式学名分别为：阴平、阳平、上声、去声。其 IPA 调值（根据五度分音法确定的
      
    
    </summary>
    
      <category term="language" scheme="https://linlshare.github.io/categories/language/"/>
    
      <category term="漢語言" scheme="https://linlshare.github.io/categories/language/%E6%BC%A2%E8%AA%9E%E8%A8%80/"/>
    
    
      <category term="古漢語" scheme="https://linlshare.github.io/tags/%E5%8F%A4%E6%BC%A2%E8%AA%9E/"/>
    
  </entry>
  
  <entry>
    <title>SSH 登录须知</title>
    <link href="https://linlshare.github.io/2018/09/26/it/tool/SSH%20%E7%99%BB%E5%BD%95%E9%A1%BB%E7%9F%A5/"/>
    <id>https://linlshare.github.io/2018/09/26/it/tool/SSH 登录须知/</id>
    <published>2018-09-26T09:22:00.000Z</published>
    <updated>2018-10-26T16:17:03.412Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SSH-背景"><a href="#SSH-背景" class="headerlink" title="SSH 背景"></a>SSH 背景</h2><ul><li><p>解决的问题：明文登录信息暴露问题。</p></li><li><p>历史：</p><ol><li>1995 年，芬兰赫尔辛基理工大学的 <strong>Tatu Ylonen</strong> 发现自己学校存在嗅探密码的网络攻击，于是开发了 SSH （<strong>Secure Shell</strong>）通信安全协议，用于加密登录，并随后以免费软件形式发布，并创办 SSH 通信安全公司来继续开发和销售SSH。</li><li>截至2005年，<strong>OpenSSH</strong> 是唯一一种最流行的SSH实现，而且成为了大量操作系统的默认组件。</li></ol></li></ul><h2 id="SSH-原理"><a href="#SSH-原理" class="headerlink" title="SSH 原理"></a>SSH 原理</h2><p>核心：<strong>非对称加密</strong>。</p><p>整个过程是这样的：</p><ol><li>远程主机收到用户的登录请求，把自己的公钥发给用户。</li><li>用户使用这个公钥，将登录密码加密后，发送回来。</li><li>远程主机用自己的私钥，解密登录密码，如果密码正确，就同意用户登录。</li></ol><h2 id="口令登录"><a href="#口令登录" class="headerlink" title="口令登录"></a>口令登录</h2><p>用户使用 <code>ssh user@host</code> 登录远程主机时，系统会提示远程主机的公钥指纹，当用户确认接收该公钥指纹时，会保存到 <code>$HOME/.ssh/known_hosts</code> 中，下次登录时会跳过。</p><blockquote><p>公钥指纹：公钥长度较长（这里采用RSA算法，长达1024位），很难比对，所以对其进行MD5计算，将它变成一个128位的指纹。上例中是 <code>98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d</code>，再进行比较。</p></blockquote><h2 id="公钥登录"><a href="#公钥登录" class="headerlink" title="公钥登录"></a>公钥登录</h2><p>所谓”公钥登录”，原理很简单，就是用户将自己的公钥储存在远程主机上。登录的时候，远程主机会向用户发送一段随机字符串，用户用自己的私钥加密后，再发回来。远程主机用事先储存的公钥进行解密，如果成功，就证明用户是可信的，直接允许登录shell，不再要求密码。</p><p>用户将自己的公钥储存在远程主机的具体过程如下：</p><ol><li><p>使用 <code>ssh-keygen</code> 在本地目录 <code>$HOME/.ssh/</code> 生成公钥 <code>id_rsa.pub</code> 和密钥 <code>id_rsa</code> ；</p></li><li><p>使用 <code>ssh-copy-id user@host</code> 将公钥上传至远程主机 host 中，实现细节是：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> ssh user@host 'mkdir -p .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys' &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure></li></ol><h2 id="SSH-CONFIG-FILE"><a href="#SSH-CONFIG-FILE" class="headerlink" title="SSH CONFIG FILE"></a>SSH CONFIG FILE</h2><p>可以通过配置文件快速进行 ssh 登录，配置文件有两种：</p><ol><li>用户配置文件 <code>~/.ssh/config</code>；</li><li>系统配置文件 <code>/etc/ssh/ssh_config)</code>。</li></ol><p>可配置项有：</p><ul><li><strong>Host</strong>，配置标识，使用 <code>ssh [Host]</code> 进行快速登录；</li><li><strong>HostName</strong>，服务器所在地址，可以是域名或 IP；</li><li><strong>User</strong>，进行 ssh 登录的用户名；</li><li><strong>Port</strong>，指定服务器端口；</li><li><strong>IdentityFile</strong>，指定私钥文件的位置。</li></ul><p>如在 <code>~/.ssh/config</code>文件中按如下配置，则可以通过 <code>ssh xx-server</code> 进行快速 ssh 登录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Host xx-server</span><br><span class="line">    HostName ssh.xx-server.com</span><br><span class="line">    User xx_user</span><br><span class="line">    Port 2200</span><br><span class="line">    IdentityFile ~/.ssh/local_id_rsa</span><br></pre></td></tr></table></figure><h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><table><thead><tr><th>名词</th><th>含义</th></tr></thead><tbody><tr><td>X.509</td><td>一种通用的<strong>证书格式</strong>，包含证书持有人的公钥，加密算法等信息</td></tr><tr><td>pkcs1 ~ pkcs12</td><td>公钥加密（非对称加密）的一种标准，一般存储为 <code>*.pN</code>，<code>*.p12</code> 是包含证书和密钥的封装格式</td></tr><tr><td>*.der</td><td>证书的<strong>二进制存储格式</strong>（不常用）</td></tr><tr><td>*.pem</td><td>证书或密钥的 <strong>Base64 文本存储格式</strong>，可以单独存放证书或密钥，也可以同时存放</td></tr><tr><td>*.key</td><td><strong>单独存放的 pem 格式的密钥</strong>，一般保存为 <code>*.key</code></td></tr><tr><td><em>.cer </em>.crt</td><td>两个指的都是证书，Linux 下叫 crt，Windows 下叫 cer；存储格式可以是 <code>pem</code> 也可以是 <code>der</code></td></tr><tr><td>*.pfx</td><td>微软 IIS 的实现</td></tr><tr><td>*.jks</td><td>Java Keytool 实现的证书格式</td></tr></tbody></table><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://zh.wikipedia.org/zh-cn/Secure_Shell" target="_blank" rel="noopener">Secure Shell - 维基百科</a></li><li><a href="http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html" target="_blank" rel="noopener">SSH原理与运用（一）：远程登录</a></li><li><a href="https://www.ssh.com/ssh/config/" target="_blank" rel="noopener">SSH CONFIG FILE - ssh.com</a></li><li><a href="https://www.zhihu.com/question/29620953/answer/242467271" target="_blank" rel="noopener">SSL中，公钥、私钥、证书的后缀名都是些啥？ - 海棠依旧的回答 - 知乎</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;SSH-背景&quot;&gt;&lt;a href=&quot;#SSH-背景&quot; class=&quot;headerlink&quot; title=&quot;SSH 背景&quot;&gt;&lt;/a&gt;SSH 背景&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;解决的问题：明文登录信息暴露问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;历史：&lt;/p&gt;
&lt;o
      
    
    </summary>
    
      <category term="it" scheme="https://linlshare.github.io/categories/it/"/>
    
      <category term="tool" scheme="https://linlshare.github.io/categories/it/tool/"/>
    
    
      <category term="SSH" scheme="https://linlshare.github.io/tags/SSH/"/>
    
  </entry>
  
  <entry>
    <title>关于字体的一些小知识</title>
    <link href="https://linlshare.github.io/2018/09/25/design/typeface/%E5%85%B3%E4%BA%8E%E5%AD%97%E4%BD%93%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
    <id>https://linlshare.github.io/2018/09/25/design/typeface/关于字体的一些小知识/</id>
    <published>2018-09-25T03:04:00.000Z</published>
    <updated>2018-10-26T16:08:11.192Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Atypl"><a href="#Atypl" class="headerlink" title="Atypl"></a>Atypl</h3><p>ATypI 或 Association Typographique Internationale （国际排印协会）是一家致力于排版和类型设计的国际非营利组织。该协会的主要活动是每年秋季会议，每年在不同的全球城市举行。第62届年会于2018年9月11至15日在比利时安特卫普举办，主题为 “Type Legacies”（字体遗产）。</p><h3 id="字体类型（数字化字体，Digital-Font）"><a href="#字体类型（数字化字体，Digital-Font）" class="headerlink" title="字体类型（数字化字体，Digital Font）"></a>字体类型（数字化字体，Digital Font）</h3><ul><li><strong>点阵字体</strong>（Bitmap Font）通过点阵表现字形，其本质上只是一组图片。每一种字体变体都包括一组完整的字符，一个字符占一张图片。假设总字符数量为3，即包括三个字符，提供粗体和斜体的组合（即无、粗体、斜体、粗斜体四种变体），该字体总共有12张图片。</li><li><strong>轮廓字体</strong>（outline font），又称描边字体。这类字体使用贝兹曲线描述轮廓，可以通过简单的数学变形放大或缩小。但是很小的字体经常需要额外的信息（hints）指导笔画取舍进行润算，不然容易漆黑一团。<ul><li>PostScript，由Adobe公司为专业数字排版开发。它使用PostScript，字形以3次贝兹曲线描述。</li><li>OpentType，是一种最初由苹果计算机公司开发的字体技术。</li><li>TrueType，为了实现Windows和Macintosh系统兼容，而产生的一种新字体格式。</li></ul></li><li><strong>笔画字体</strong>（Stroke-based font），字形的轮廓由分离的笔画顶点和笔画外形（profile）定义。它优于轮廓字体之处在于：减少了定义字形的顶点数，允许同一组顶点生成不同的字体（不同的粗细，不同大小或不同衬线规则）所以节省大小。<ul><li>METAFONT，美国计算机科学家高德纳（Donald Knuth）于1977年着手字体制作软件，并于1979年发布的第一个版本METAFONT。与TrueType类似，它是一种数学上的字体描述系统，只是描述字符使用圆点（circular pen）。这意味着由METAFONT产生的字形，没有锐利的点（sharp points），即笔尖大小是有限的。</li></ul></li></ul><h3 id="带喇叭口的黑体"><a href="#带喇叭口的黑体" class="headerlink" title="带喇叭口的黑体"></a>带喇叭口的黑体</h3><blockquote><p>在设计横画起笔、收笔处向上下微微扩张，形成喇叭口的黑体。 </p><p>–摘自 <a href="http://blog.sina.com.cn/s/blog_6ac18e3a0102wge5.html" target="_blank" rel="noopener">有喇叭口的黑一体<em>蓬间雀</em>新浪博客</a></p></blockquote><blockquote><p>这种装饰源于早些时候的铅字印刷的铅字，由于当时技术的限制，笔画的端口会收缩，为了解决这个问题，当时设计铅字的工作人员就把黑体设计成喇叭口的。</p><p>– 摘自 <a href="https://baike.baidu.com/item/%E9%BB%91%E4%BD%93/10402" target="_blank" rel="noopener">黑体 -百度百科</a></p></blockquote><h3 id="Variable-Font"><a href="#Variable-Font" class="headerlink" title="Variable Font"></a>Variable Font</h3><p>2016 年 9 月在华沙召开的第 60 届 ATypI 年会上，Adobe, Apple, Google, Microsoft 4大巨头联合宣布了Variable Font 的字体规格- OpenType v1.8 。</p><h3 id="字体分类（按-末端是否有修饰）"><a href="#字体分类（按-末端是否有修饰）" class="headerlink" title="字体分类（按 末端是否有修饰）"></a>字体分类（按 末端是否有修饰）</h3><ul><li>衬线字体（Serif），衬线指的是字形笔画末端的装饰细节部分。</li><li>无衬线字体（Sans-Serif），与衬线字体相反，完全抛弃装饰衬线，只剩下主干，造型简明有力，更具现代感，起源也很晚。适用于标题、广告，瞬间的识别性高。</li></ul><h3 id="字体分类（按字符宽度）"><a href="#字体分类（按字符宽度）" class="headerlink" title="字体分类（按字符宽度）"></a>字体分类（按字符宽度）</h3><ul><li>等宽字体（Monospaced Font），指字符宽度相同的计算机字体。</li><li>比例字体（Proportional Font），与等宽字体相反，字符宽度不尽相同的计算机字体。</li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://zh.wikipedia.org/zh-cn/" target="_blank" rel="noopener">维基百科</a></li><li><a href="https://thetype.com/2016/09/10968/" target="_blank" rel="noopener">参数化设计与字体战争：从 OpenType 1.8 说起 -Type is Beautiful</a></li><li><a href="https://thetype.com/2018/09/15774/" target="_blank" rel="noopener">字谈字畅 082：安特卫普阿蒂皮</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Atypl&quot;&gt;&lt;a href=&quot;#Atypl&quot; class=&quot;headerlink&quot; title=&quot;Atypl&quot;&gt;&lt;/a&gt;Atypl&lt;/h3&gt;&lt;p&gt;ATypI 或 Association Typographique Internationale （国际排印协会）是
      
    
    </summary>
    
      <category term="design" scheme="https://linlshare.github.io/categories/design/"/>
    
      <category term="typeface" scheme="https://linlshare.github.io/categories/design/typeface/"/>
    
    
      <category term="字体设计" scheme="https://linlshare.github.io/tags/%E5%AD%97%E4%BD%93%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>讀懂漢字偏旁部首</title>
    <link href="https://linlshare.github.io/2018/09/14/language/%E6%BC%A2%E8%AA%9E%E8%A8%80/%E5%AD%97%E6%BA%90/%E8%AE%80%E6%87%82%E6%BC%A2%E5%AD%97%E5%81%8F%E6%97%81%E9%83%A8%E9%A6%96/"/>
    <id>https://linlshare.github.io/2018/09/14/language/漢語言/字源/讀懂漢字偏旁部首/</id>
    <published>2018-09-14T00:16:00.000Z</published>
    <updated>2018-10-26T16:25:56.276Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一劃"><a href="#一劃" class="headerlink" title="一劃"></a>一劃</h2><table><thead><tr><th>形</th><th>音</th><th>義</th></tr></thead><tbody><tr><td>丨</td><td>gǔn</td><td>《說文》上下通也。</td></tr><tr><td>亅</td><td>jué</td><td>《說文》鉤逆者謂之亅。</td></tr><tr><td>丿</td><td>piě</td><td>《說文》右戾也。象左引之形。《註》戾，曲也。</td></tr><tr><td>乛</td><td>yǐ</td><td>同“乙”。</td></tr><tr><td>一</td><td>yī</td><td>《說文》惟初大始，道立於一。造分天地，化成萬物。《廣韻》數之始也，物之極也。</td></tr><tr><td>乙</td><td>yǐ</td><td>《說文》象春艸木冤曲而出，陰气尚彊，其出乙乙也。與丨同意。乙承甲，象人頸。</td></tr><tr><td>乚</td><td>háo</td><td>同“毫”。《說文》玄鳥也。齊魯謂之乚。取其鳴自呼。象形。凡乚之屬皆从乚。鳦，乙或从鳥。《註》鳦，燕子。</td></tr><tr><td>丶</td><td>zhǔ</td><td>《說文》有所絕止，丶而識之也。</td></tr></tbody></table><h2 id="二劃"><a href="#二劃" class="headerlink" title="二劃"></a>二劃</h2><table><thead><tr><th>形</th><th>音</th><th>義</th></tr></thead><tbody><tr><td>八</td><td>bā</td><td>《說文》別也。象分別相背之形。</td></tr><tr><td>勹</td><td>bāo</td><td>《說文》裹也。象人曲形，有所包裹。</td></tr><tr><td>匕</td><td>bǐ</td><td>《說文》相與比敘也。从反人。匕，亦所以用比取飯，一名柶。《註》柶，古代舀取食物的礼器，像勺子，多用角做成。</td></tr><tr><td>冫</td><td>bīng</td><td>古同“冰”。</td></tr><tr><td>卜</td><td>bǔ</td><td>《說文》灼剝龜也。象炙龜之形。一曰象龜兆之縱橫也。一說是樹杈或神杖。</td></tr><tr><td>厂</td><td>hàn</td><td>《說文》山石之厓巖，人可居。</td></tr><tr><td>刀</td><td>dāo</td><td>《說文》兵也。</td></tr><tr><td>刂</td><td>dāo</td><td>同“刀”。</td></tr><tr><td>儿</td><td>ér</td><td>同“兒”。《說文》从儿，象小兒頭囟未合。</td></tr><tr><td>二</td><td>èr</td><td>《說文》地之數也。</td></tr><tr><td>匚</td><td>fāng</td><td>《說文》受物之器。</td></tr><tr><td>阝</td><td>fǔ</td><td>同“阜”，《說文》山無石者。《釋名》土山曰阜，言高厚也。</td></tr><tr><td>丷</td><td>bā</td><td>同“八”</td></tr><tr><td>几</td><td>jī</td><td>《說文》踞几也。《註》古人坐而凭几。</td></tr><tr><td>卩</td><td>jié</td><td>《說文》瑞信也。守國者用玉卪，守都鄙者用角卪…</td></tr><tr><td>冂</td><td>jiōng</td><td>《說文》邑外謂之郊，郊外謂之野，野外謂之林，林外謂之冂。象遠界也。</td></tr><tr><td>力</td><td>lì</td><td>《說文》筋也。象人筋之形。</td></tr><tr><td>冖</td><td>mì</td><td>《說文》覆也。从一下垂也。《註》今俗作冪。</td></tr><tr><td>凵</td><td>qiǎn</td><td>《說文》張口也。</td></tr><tr><td>人</td><td>rén</td><td>《說文》天地之性最貴者也。此籒文。象臂脛之形。</td></tr><tr><td>亻</td><td>rén</td><td>同“人”</td></tr><tr><td>入</td><td>rù</td><td>《說文》内也。象从上俱下也。《註》上下者、外中之象。</td></tr><tr><td>十</td><td>shí</td><td>《說文》數之具也。一爲東西，丨爲南北，則四方中央備矣。</td></tr><tr><td>厶</td><td>sī</td><td>《說文》姦衺也。韓非曰：“蒼頡作字，自營爲厶。”《象形字典—夜遊人》私：先有厶，也是私有的意思，这个字很直接形象，像人的臂弯，向自己怀中搂，那点像手里拿的东西，也就是把别人的东西拿到手并向自己的怀里搂据为已有。后来加“禾”，是将人们活命的稻谷搂在怀里据为已有。</td></tr><tr><td>亠</td><td>tóu</td><td>《字彙》徒鉤切，音頭。義闕。</td></tr><tr><td>匸</td><td>xì</td><td>《說文》衺徯，有所俠藏也。</td></tr><tr><td>讠</td><td>yán</td><td>同“言”。《說文》直言曰言，論難曰語。</td></tr><tr><td>廴</td><td>yǐn</td><td>《說文》長行也。</td></tr><tr><td>又</td><td>yòu</td><td>《說文註》手也。象形。此卽今之右字。</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一劃&quot;&gt;&lt;a href=&quot;#一劃&quot; class=&quot;headerlink&quot; title=&quot;一劃&quot;&gt;&lt;/a&gt;一劃&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;形&lt;/th&gt;
&lt;th&gt;音&lt;/th&gt;
&lt;th&gt;義&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbo
      
    
    </summary>
    
      <category term="language" scheme="https://linlshare.github.io/categories/language/"/>
    
      <category term="漢語言" scheme="https://linlshare.github.io/categories/language/%E6%BC%A2%E8%AA%9E%E8%A8%80/"/>
    
      <category term="字源" scheme="https://linlshare.github.io/categories/language/%E6%BC%A2%E8%AA%9E%E8%A8%80/%E5%AD%97%E6%BA%90/"/>
    
    
      <category term="古漢語" scheme="https://linlshare.github.io/tags/%E5%8F%A4%E6%BC%A2%E8%AA%9E/"/>
    
  </entry>
  
  <entry>
    <title>Android 使用 DiffUtil 处理 RecyclerView 数据更新问题</title>
    <link href="https://linlshare.github.io/2018/09/13/it/android/Android%20%E4%BD%BF%E7%94%A8%20DiffUtil%20%E5%A4%84%E7%90%86%20RecyclerView%20%E6%95%B0%E6%8D%AE%E6%9B%B4%E6%96%B0%E9%97%AE%E9%A2%98/"/>
    <id>https://linlshare.github.io/2018/09/13/it/android/Android 使用 DiffUtil 处理 RecyclerView 数据更新问题/</id>
    <published>2018-09-13T09:33:00.000Z</published>
    <updated>2018-10-26T15:48:06.946Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ol><li><code>RecyclerView.Adapter#notifyDataSetChanged()</code> 会每次刷新整个布局；</li><li>每次手动调用 <code>RecyclerView.Adapter#notifyItemXx</code> 系列方法很麻烦；</li><li>需要在新增的项目中跟旧的列表项重复时，只更新内容，而不是插入重复项。</li></ol><h2 id="DiffUtil"><a href="#DiffUtil" class="headerlink" title="DiffUtil"></a>DiffUtil</h2><p><code>DiffUtil</code> 就是为了简化 RecyclerVeiw 更新数据操作而生。其关键类和方法如下：</p><table><thead><tr><th>类</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>DiffUtil</td><td>public static DiffResult <strong>calculateDiff</strong>(Callback cb)</td><td>根据 Callback 提供的数据分析出新旧数据列表的差异，返回 DiffResult</td></tr><tr><td>DiffUtil.Callback</td><td>public abstract int <strong>getOldListSize</strong>()</td><td>返回旧数据的数量</td></tr><tr><td></td><td>public abstract int <strong>getNewListSize</strong>()</td><td>返回新数据的数量</td></tr><tr><td></td><td>public abstract boolean <strong>areItemsTheSame</strong>(int oldItemPosition, int newItemPosition)</td><td>决定两个数据项是否是同一个</td></tr><tr><td></td><td>public abstract boolean <strong>areContentsTheSame</strong>(int oldItemPosition, int newItemPosition)</td><td>（当两个数据项是同一个时，）决定两个数据项的内容是否同样，或者说是否需要进行更新</td></tr><tr><td>DiffUtil.DiffResult</td><td>public void <strong>dispatchUpdatesTo</strong>(final RecyclerView.Adapter adapter)</td><td>将差异信息更新到 RecyclerView.Adapter 中</td></tr></tbody></table><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li>创建一个类实现 <code>DiffUtil.Callback</code> ；</li><li>当新数据到来时，实例化自定义的 callback，传入新旧数据；</li><li>在子线程调用 <code>DiffUtil#calculateDiff</code> 计算差异；</li><li>将差异结果 <code>DiffResult</code> 更新到 RecyclerView.Adapter 中。</li></ol><h2 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h2><ul><li>使用 <code>android.support.v7.recyclerview.extensions.ListAdapter</code> 和 <code>android.support.v7.recyclerview.extensions.AsyncListDiffer</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;RecyclerView.Adapter#notifyDataSetChanged()&lt;/code&gt; 会每次刷新整个
      
    
    </summary>
    
      <category term="it" scheme="https://linlshare.github.io/categories/it/"/>
    
      <category term="android" scheme="https://linlshare.github.io/categories/it/android/"/>
    
    
      <category term="Android" scheme="https://linlshare.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>《日語自遊行の最和味》第四課 名古屋相撲大會</title>
    <link href="https://linlshare.github.io/2018/09/12/language/%E6%97%A5%E8%AA%9E/%E3%80%8A%E6%97%A5%E8%AA%9E%E8%87%AA%E9%81%8A%E8%A1%8C%E3%81%AE%E6%9C%80%E5%92%8C%E5%91%B3%E3%80%8B%E7%AC%AC%E5%9B%9B%E8%AA%B2%20%E5%90%8D%E5%8F%A4%E5%B1%8B%E7%9B%B8%E6%92%B2%E5%A4%A7%E6%9C%83/"/>
    <id>https://linlshare.github.io/2018/09/12/language/日語/《日語自遊行の最和味》第四課 名古屋相撲大會/</id>
    <published>2018-09-12T01:03:00.000Z</published>
    <updated>2018-10-26T16:21:43.322Z</updated>
    
    <content type="html"><![CDATA[<h2 id="詞彙"><a href="#詞彙" class="headerlink" title="詞彙"></a>詞彙</h2><table><thead><tr><th>詞</th><th>音</th><th>義</th></tr></thead><tbody><tr><td>大　相撲</td><td>おお　ずもう</td><td>日本相撲協會主辦的職業相撲比賽。分析：「おお」是對漢字「大」或「太」的訓讀，「すもう」是對漢字「相撲」或「角力」的訓讀。</td></tr><tr><td>場所</td><td>ばしょ</td><td>（專指相撲的）會場；（專指相撲的）會期；地點。「ばしょ」是中文「場所」的音讀。</td></tr><tr><td>力士</td><td>りきし</td><td>相撲選手。「りきし」是對漢字「力士」的音讀。</td></tr><tr><td>体重</td><td>たいじゅう</td><td>體重。「たいじゅう」是對漢字「體重」的音讀。</td></tr><tr><td>大きい</td><td></td><td>高大；大氣的，大度的；誇大的；數量多的。</td></tr><tr><td>どのぐらい</td><td></td><td>大約多少。「どの」或「何の」，表示詢問大致的數量。「くらい」在這裡是副詞助詞，表示「大約」。</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;詞彙&quot;&gt;&lt;a href=&quot;#詞彙&quot; class=&quot;headerlink&quot; title=&quot;詞彙&quot;&gt;&lt;/a&gt;詞彙&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;詞&lt;/th&gt;
&lt;th&gt;音&lt;/th&gt;
&lt;th&gt;義&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbo
      
    
    </summary>
    
      <category term="language" scheme="https://linlshare.github.io/categories/language/"/>
    
      <category term="日語" scheme="https://linlshare.github.io/categories/language/%E6%97%A5%E8%AA%9E/"/>
    
    
      <category term="日語自遊行の最和味" scheme="https://linlshare.github.io/tags/%E6%97%A5%E8%AA%9E%E8%87%AA%E9%81%8A%E8%A1%8C%E3%81%AE%E6%9C%80%E5%92%8C%E5%91%B3/"/>
    
      <category term="日语" scheme="https://linlshare.github.io/tags/%E6%97%A5%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>Axure 使用笔记</title>
    <link href="https://linlshare.github.io/2018/09/11/it/tool/Axure%20%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    <id>https://linlshare.github.io/2018/09/11/it/tool/Axure 使用笔记/</id>
    <published>2018-09-11T09:07:00.000Z</published>
    <updated>2018-10-26T16:11:45.383Z</updated>
    
    <content type="html"><![CDATA[<h3 id="使用第三方组件库"><a href="#使用第三方组件库" class="headerlink" title="使用第三方组件库"></a>使用第三方组件库</h3><p>（1）下载第三方组件库</p><p>Refs.cn 原型设计元件库，基于Axure RP 8，支持 Android、Apple、Windows、微信，移动、桌面平台的应用和网站原型设计。 <a href="http://refs.cn/rplibs" target="_blank" rel="noopener">http://refs.cn/rplibs</a></p><p>（2）导入第三方组件库</p><p>打开 Axure，点击右侧的 Libraries 面板的菜单按钮，在弹框中选择 <code>Load Library...</code> 然后选择下载的 <code>.rplib</code> 格式的文件，确定即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;使用第三方组件库&quot;&gt;&lt;a href=&quot;#使用第三方组件库&quot; class=&quot;headerlink&quot; title=&quot;使用第三方组件库&quot;&gt;&lt;/a&gt;使用第三方组件库&lt;/h3&gt;&lt;p&gt;（1）下载第三方组件库&lt;/p&gt;
&lt;p&gt;Refs.cn 原型设计元件库，基于Axure RP 
      
    
    </summary>
    
      <category term="it" scheme="https://linlshare.github.io/categories/it/"/>
    
      <category term="tool" scheme="https://linlshare.github.io/categories/it/tool/"/>
    
    
      <category term="Axure" scheme="https://linlshare.github.io/tags/Axure/"/>
    
      <category term="原型设计" scheme="https://linlshare.github.io/tags/%E5%8E%9F%E5%9E%8B%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>《日語自遊行の最和味》第三課 七夕</title>
    <link href="https://linlshare.github.io/2018/09/10/language/%E6%97%A5%E8%AA%9E/%E3%80%8A%E6%97%A5%E8%AA%9E%E8%87%AA%E9%81%8A%E8%A1%8C%E3%81%AE%E6%9C%80%E5%92%8C%E5%91%B3%E3%80%8B%E7%AC%AC%E4%B8%89%E8%AA%B2%20%E4%B8%83%E5%A4%95/"/>
    <id>https://linlshare.github.io/2018/09/10/language/日語/《日語自遊行の最和味》第三課 七夕/</id>
    <published>2018-09-10T15:05:00.000Z</published>
    <updated>2018-10-26T16:21:28.652Z</updated>
    
    <content type="html"><![CDATA[<h2 id="對話"><a href="#對話" class="headerlink" title="對話"></a>對話</h2><table><thead><tr><th>人</th><th>語</th></tr></thead><tbody><tr><td>桜</td><td>健さん、香港　にも　七夕祭りがありますが。</td></tr><tr><td>健</td><td>牽牛　と織女　が　一年に一度　天の川　で　デイトを　する。</td></tr><tr><td></td><td>ごの話　は　ありますが。</td></tr><tr><td>桜</td><td>子ども　たち　は　短冊に　願い事　を　書きます。</td></tr><tr><td></td><td>そして、笹の葉　に　その短冊　を　飾ります。</td></tr><tr><td>健</td><td>いいですね。</td></tr><tr><td></td><td>私は　「日本語　が　上手に　なります　ように。」と書きたいです。</td></tr><tr><td>桜</td><td>私　は　「すてきな　出会い　が　ありますように。」と書きたいです。</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">桜：阿健，香港也有七夕節嗎？</span><br><span class="line">健：我們有牛郎和織女一年一度在銀河相會的傳說。</span><br><span class="line">桜：(在日本) 小孩子們把願望寫在小紙條上，然後裝飾在幼竹葉上。</span><br><span class="line">健：這個很不錯。我想寫「希望我的日文更加進步」。</span><br><span class="line">桜：我想寫「希望能遇到我的白馬王子」。</span><br></pre></td></tr></table></figure><h2 id="附錄"><a href="#附錄" class="headerlink" title="附錄"></a>附錄</h2><ol><li><a href="http://rthk9.rthk.hk/elearning/gogojapan3/lesson.htm" target="_blank" rel="noopener">日語自遊行の最和味</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;對話&quot;&gt;&lt;a href=&quot;#對話&quot; class=&quot;headerlink&quot; title=&quot;對話&quot;&gt;&lt;/a&gt;對話&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;人&lt;/th&gt;
&lt;th&gt;語&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;t
      
    
    </summary>
    
      <category term="language" scheme="https://linlshare.github.io/categories/language/"/>
    
      <category term="日語" scheme="https://linlshare.github.io/categories/language/%E6%97%A5%E8%AA%9E/"/>
    
    
      <category term="日語自遊行の最和味" scheme="https://linlshare.github.io/tags/%E6%97%A5%E8%AA%9E%E8%87%AA%E9%81%8A%E8%A1%8C%E3%81%AE%E6%9C%80%E5%92%8C%E5%91%B3/"/>
    
      <category term="日语" scheme="https://linlshare.github.io/tags/%E6%97%A5%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>閩南語俚語小記</title>
    <link href="https://linlshare.github.io/2018/09/10/language/%E9%96%A9%E5%8D%97%E8%AA%9E/%E9%96%A9%E5%8D%97%E8%AA%9E%E4%BF%9A%E8%AA%9E%E5%B0%8F%E8%A8%98/"/>
    <id>https://linlshare.github.io/2018/09/10/language/閩南語/閩南語俚語小記/</id>
    <published>2018-09-10T11:25:00.000Z</published>
    <updated>2018-10-26T16:27:34.698Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th>序號</th><th>俚語</th><th>拼音</th><th>含義</th></tr></thead><tbody><tr><td>1</td><td>爱 媠 毋惊 流 鼻水</td><td>Ài-suí m̄ kiann lâu phīnn-tsuí.</td><td>(女孩子)爱漂亮、就算天冷也不怕穿得少。</td></tr><tr><td>2</td><td>嚴官府出厚賊；嚴爸母出阿里不達</td><td>Giâm kuann-hú tshut kāu tsha̍t; giâm pē-bú tshut a-lí-put-ta̍t.</td><td>嚴格的官府反而出現很多小偷；父母太嚴格，小孩越是不成材。「阿里不達」源自被谭崔密教仿冒為男女雜交的普贤王如来（Adi-Buddha）。</td></tr><tr><td>3</td><td>一人煩惱一樣，無人煩惱親像</td><td>Tsi̍t lâng huân-ló tsi̍t iūnn, bô-lâng huân-ló tshin-tshiūnn.</td><td>意謂家家有本難唸的經。</td></tr><tr><td>4</td><td>一代親，二代表，三代毋捌了了</td><td>It tāi tshin, jī tāi piáu, sann tāi m̄ bat liáu-liáu.</td><td>姻親間的往來，一代比一代疏遠。</td></tr><tr><td>5</td><td>六月芥菜假有心</td><td>La̍k-gue̍h kuà-tshài ké ū sim.</td><td>形容人擅於表面功夫，裝出一副古熱心腸的樣子。</td></tr><tr><td>6</td><td>刣雞教猴</td><td>Thâi ke kà kâu.</td><td>罰小儆大。</td></tr><tr><td>7</td><td>會生得囝身，袂生得囝心</td><td>Ē senn tit kiánn sin, bē senn tit kiánn sim.</td><td>用來說明，雖然兒女是父母所生，但也有自己的意志，父母不能左右的。</td></tr><tr><td>8</td><td>翁親某親，老婆仔拋捙輪</td><td>Ang tshin bóo tshin, lāu-pô-á pha-tshia-lin.</td><td>夫妻二人置年邁雙親於不顧之意。</td></tr><tr><td>9</td><td>耳仔生兩葉，家己看袂著。</td><td>Hīnn-á senn nn̄g hio̍h, ka-kī khuànn bē tio̍h.</td><td>耳朵有兩片，自己看不見。比喻人看不到自己的缺點。</td></tr><tr><td>10</td><td>食雞，會起家；食鰇魚，生囡仔好育飼。</td><td>Tsia̍h ke, ē khí-ke; tsia̍h jiû-hî, senn gín-á hó io-tshī.</td><td>吃雞，會起家，吃魷魚，生孩子好養。借諧音的吉祥話，說出心中的願望。</td></tr><tr><td>11</td><td>飼鳥鼠，咬布袋。</td><td>Tshī niáu-tshí, kā pòo-tē.</td><td>養老鼠，咬布袋。比喻養虎為患。</td></tr><tr><td>12</td><td>豬頭皮炸無油。</td><td>Ti-thâu-phuê tsuànn bô iû.</td><td>揶揄人少吹牛了。</td></tr></tbody></table><p>參考：</p><ul><li><a href="http://twblg.dict.edu.tw/holodict_new/index/fulu_suyan_level1.jsp" target="_blank" rel="noopener">俗諺 -台灣閩南語常用詞辭典</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;序號&lt;/th&gt;
&lt;th&gt;俚語&lt;/th&gt;
&lt;th&gt;拼音&lt;/th&gt;
&lt;th&gt;含義&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;爱 媠 毋惊 流 鼻水&lt;/td&gt;
&lt;td&gt;Ài-suí 
      
    
    </summary>
    
      <category term="language" scheme="https://linlshare.github.io/categories/language/"/>
    
      <category term="閩南語" scheme="https://linlshare.github.io/categories/language/%E9%96%A9%E5%8D%97%E8%AA%9E/"/>
    
    
      <category term="閩南語" scheme="https://linlshare.github.io/tags/%E9%96%A9%E5%8D%97%E8%AA%9E/"/>
    
  </entry>
  
  <entry>
    <title>MVP架构下解决 RxJava 自动解绑问题</title>
    <link href="https://linlshare.github.io/2018/09/10/it/android/MVP%E6%9E%B6%E6%9E%84%E4%B8%8B%E8%A7%A3%E5%86%B3%20RxJava%20%E8%87%AA%E5%8A%A8%E8%A7%A3%E7%BB%91%E9%97%AE%E9%A2%98/"/>
    <id>https://linlshare.github.io/2018/09/10/it/android/MVP架构下解决 RxJava 自动解绑问题/</id>
    <published>2018-09-10T09:25:00.000Z</published>
    <updated>2018-10-26T15:52:28.267Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>MVP 模式下使用 RxJava 处理网络访问的回调，当数据返回时 Presenter 调用绑定的 View 的方法。</p><p>定义 BasePresenter 如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasePresenter</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">MvpView</span>&gt; <span class="keyword">implements</span> <span class="title">Presenter</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> T mMvpView;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attachView</span><span class="params">(T mvpView)</span> </span>&#123;</span><br><span class="line">    mMvpView = mvpView;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">detachView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mMvpView = <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isViewAttached</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mMvpView != <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> T <span class="title">getMvpView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mMvpView;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义 MvpView 如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MvpView</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举一个具体的实现，有记录页为 RecordActivity，定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RecordRecordActivity</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span></span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">RecordMvpView</span> </span>&#123;</span><br><span class="line">      <span class="meta">@Inject</span></span><br><span class="line">    RecordPresenter presenter;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">          <span class="comment">//...</span></span><br><span class="line">          presenter.attachView(<span class="keyword">this</span>);</span><br><span class="line">          <span class="comment">//...</span></span><br><span class="line">          onRefresh();</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRefresh</span><span class="params">()</span></span>&#123;</span><br><span class="line">          presenter.queryReocrd();</span><br><span class="line">  &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        presenter.detachView();</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">      &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showRecord</span><span class="params">(List&lt;RecordResponse&gt; data)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RecordMvpView 定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RecordMvpView</span> <span class="keyword">extends</span> <span class="title">MvpView</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showRecord</span><span class="params">(List&lt;RecordResponse&gt; data)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RecordPresenter 的定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RecordPresenter</span> <span class="keyword">extends</span> <span class="title">BasePresenter</span>&lt;<span class="title">RecordMvpView</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> DataManager dataManager;</span><br><span class="line">  <span class="keyword">private</span> Disposable disposable;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Inject</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">RecordPresenter</span><span class="params">(DataManager dataManager)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.dataManager = dataManager;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryRecord</span><span class="params">(<span class="keyword">int</span> page, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">    RxUtil.dispose(disposable);</span><br><span class="line">    dataManager.queryRecord(page, count)</span><br><span class="line">               .subscribeOn(Schedulers.io())</span><br><span class="line">               .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">               .subscribe(<span class="keyword">new</span> SingleObserver&lt;List&lt;RecordResponse&gt;&gt;() &#123;</span><br><span class="line">                 <span class="meta">@Override</span></span><br><span class="line">                 <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</span><br><span class="line">                   disposable = d;</span><br><span class="line">                 &#125;</span><br><span class="line"></span><br><span class="line">                 <span class="meta">@Override</span></span><br><span class="line">                 <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(List&lt;RecordResponse&gt; resp)</span> </span>&#123;</span><br><span class="line">                   getMvpView().showRecord(resp);</span><br><span class="line">                 &#125;</span><br><span class="line"></span><br><span class="line">                 <span class="meta">@Override</span></span><br><span class="line">                 <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">                   Timber.e(e);</span><br><span class="line">                   getMvpView().showRecord(<span class="keyword">null</span>);</span><br><span class="line">                 &#125;</span><br><span class="line">               &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上实现具有一个重大问题，当 Activity 处于 destroy 状态时调用 onRefresh 方法去加载数据，会导致 Presenter 中处理数据返回后调用 getMvpView 方法返回 null，从而导致 NPE。抑或，在 create 状态请求的数据在未返回前 Activity 就进入了 destroy 状态从而导致 NPE。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="（1）最简单的也是最复杂的解决方案"><a href="#（1）最简单的也是最复杂的解决方案" class="headerlink" title="（1）最简单的也是最复杂的解决方案"></a>（1）最简单的也是最复杂的解决方案</h3><p>在调用 getMvpView 前进行判空，即：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(isViewAttached())&#123;</span><br><span class="line">  getMvpView().showRecord(resp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>是不是很简单？是的，看起来简单，其实是最复杂的，应该它需要在每个回调的地方小心翼翼地包上这层判断，工作量大还容易出错，代码也不好看。更关键的是，<strong>它到底是执行了，并没有在 View 销毁后立即停止订阅</strong>。</p><h3 id="（2）使用第三方库-RxLifecycle-或-AutoDispose"><a href="#（2）使用第三方库-RxLifecycle-或-AutoDispose" class="headerlink" title="（2）使用第三方库 RxLifecycle 或 AutoDispose"></a>（2）使用第三方库 RxLifecycle 或 AutoDispose</h3><p>这两个都是较出名的用于解决 RxJava 与Android 生命周期问题的第三方库。可以自行 Github 一下。</p><p><strong>RxLifecycle</strong></p><p>This library allows one to automatically complete sequences based on a second lifecycle stream.</p><p>This capability is useful in Android, where incomplete subscriptions can cause memory leaks.</p><p>该库允许在接收到第二个生命周期流时自动结束订阅。</p><p>此种能力对于解决因未完成的订阅导致的Android 内存泄漏问题很有用。</p><p>RxLifecycle 的局限性：</p><ol><li><p><strong>需要继承自 RxActivity 或 RxFragment 等；</strong></p></li><li><p><strong>其核心步骤需要 RxActivity 或 RxFragment 的引用。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.compose(<span class="keyword">this</span>.&lt;T&gt;bindUntilEvent(ActivityEvent.PAUSE))</span><br></pre></td></tr></table></figure></li></ol><p><strong>AutoDispose</strong></p><p>AutoDispose is an RxJava 2 tool for automatically binding the execution of RxJava 2 streams to a provided scope via disposal/cancellation.</p><p>AutoDispose 是 RxJava2 中的一款工具，能通过解绑或取消操作，使得 RxJava2 流执行到在给定的域中为止。</p><p>其受 RxLifecycle 启发。</p><p>优势：</p><ol><li><strong>将生命周期相关的从 Activity 或 Fragment 中分离出来，独立成 LifecycleOwner，可扩展。</strong></li></ol><h3 id="（3）结合项目情况自定义解决方案"><a href="#（3）结合项目情况自定义解决方案" class="headerlink" title="（3）结合项目情况自定义解决方案"></a>（3）结合项目情况自定义解决方案</h3><p>RxLifecycle 的原理是：</p><ol><li>BehaviorSubject 在订阅后会发送前一个数据值；</li><li>ObservableTransformer、SingleTransformer 等等可以对整个流进行操作；</li><li>takeUntil 操作符可以在第二个被观察者发送事件时自动停止订阅。</li></ol><p>结合 MVP 架构和 RxLifecycle 的原理，我的解决方案是：</p><ol><li><strong>使用 BehaviorSubject 发送 View 的绑定情况；</strong></li><li><strong>在所有跟 View 相关的流中使用 compose 操作符，compose 一个自定义的 LifecycleTransformer 操作整个流，使用 takeUntil 操作符在观察到 BehaviorSubject 发送解绑消息后使用停止订阅。</strong></li></ol><p>具体代码实现如下：</p><p>BasePresenter 修改为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasePresenter</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">MvpView</span>&gt; <span class="keyword">implements</span> <span class="title">Presenter</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> T mMvpView;</span><br><span class="line">  <span class="keyword">private</span> CompositeDisposable compositeDisposable = <span class="keyword">new</span> CompositeDisposable();</span><br><span class="line">  <span class="keyword">private</span> BehaviorSubject&lt;Boolean&gt; behaviorSubject = BehaviorSubject.createDefault(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attachView</span><span class="params">(T mvpView)</span> </span>&#123;</span><br><span class="line">    mMvpView = mvpView;</span><br><span class="line">    behaviorSubject.subscribe();</span><br><span class="line">    behaviorSubject.onNext(<span class="keyword">true</span>); <span class="comment">// TRUE 表示 View 绑定了</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">detachView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mMvpView = <span class="keyword">null</span>;</span><br><span class="line">    behaviorSubject.onNext(<span class="keyword">false</span>); <span class="comment">// FALSE 表示 View 解绑了</span></span><br><span class="line">    compositeDisposable.clear();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addDisposable</span><span class="params">(Disposable... disposables)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Disposable d : disposables) &#123;</span><br><span class="line">      compositeDisposable.add(d);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">deleteDispoable</span><span class="params">(Disposable disposable)</span> </span>&#123;</span><br><span class="line">    compositeDisposable.delete(disposable);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span> &lt;R&gt; <span class="function">LifecycleTransformer&lt;R&gt; <span class="title">bindLifeCycle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> LifecycleTransformer&lt;&gt;(behaviorSubject, <span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isViewAttached</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mMvpView != <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> T <span class="title">getMvpView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mMvpView;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 LifecycleTransformer 定义为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">LifecycleTransformer</span>&lt;<span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">ObservableTransformer</span>&lt;<span class="title">T</span>, <span class="title">T</span>&gt;, <span class="title">SingleTransformer</span>&lt;<span class="title">T</span>, <span class="title">T</span>&gt;, <span class="title">MaybeTransformer</span>&lt;<span class="title">T</span>, <span class="title">T</span>&gt;, <span class="title">CompletableTransformer</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Observable&lt;Boolean&gt; observable;</span><br><span class="line">  <span class="keyword">private</span> BasePresenter presenter;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">LifecycleTransformer</span><span class="params">(Observable&lt;Boolean&gt; observable, BasePresenter presenter)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.observable = observable;</span><br><span class="line">    <span class="keyword">this</span>.presenter = presenter;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ObservableSource&lt;T&gt; <span class="title">apply</span><span class="params">(Observable&lt;T&gt; upstream)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> upstream.takeUntil(getFilterFalseObservable()) <span class="comment">//当收到 View 解绑消息时自动解除订阅</span></span><br><span class="line">                   .subscribeOn(Schedulers.io())</span><br><span class="line">                   .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">                   .doOnSubscribe(disposable -&gt; &#123;</span><br><span class="line">                     <span class="keyword">if</span> (!presenter.isViewAttached()) &#123; <span class="comment">// 当订阅时，若 View 解绑则自动解除订阅</span></span><br><span class="line">                       Timber.v(<span class="string">"dispose"</span>);</span><br><span class="line">                       disposable.dispose();</span><br><span class="line">                       <span class="keyword">return</span>;</span><br><span class="line">                     &#125;</span><br><span class="line">                     presenter.addDisposable(disposable);</span><br><span class="line">                   &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> SingleSource&lt;T&gt; <span class="title">apply</span><span class="params">(Single&lt;T&gt; upstream)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> upstream.takeUntil(getFilterFalseObservable().firstOrError())</span><br><span class="line">                   .subscribeOn(Schedulers.io())</span><br><span class="line">                   .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">                   .doOnSubscribe(disposable -&gt; &#123;</span><br><span class="line">                     <span class="keyword">if</span> (!presenter.isViewAttached()) &#123;</span><br><span class="line">                       Timber.v(<span class="string">"dispose"</span>);</span><br><span class="line">                       disposable.dispose();</span><br><span class="line">                       <span class="keyword">return</span>;</span><br><span class="line">                     &#125;</span><br><span class="line">                     presenter.addDisposable(disposable);</span><br><span class="line">                   &#125;);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> CompletableSource <span class="title">apply</span><span class="params">(Completable upstream)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Completable.ambArray(upstream,</span><br><span class="line">                                getFilterFalseObservable().flatMapCompletable(CANCEL_COMPLETABLE))</span><br><span class="line">                      .subscribeOn(Schedulers.io())</span><br><span class="line">                      .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">                      .doOnSubscribe(disposable -&gt; &#123;</span><br><span class="line">                        <span class="keyword">if</span> (!presenter.isViewAttached()) &#123;</span><br><span class="line">                          Timber.v(<span class="string">"dispose"</span>);</span><br><span class="line">                          disposable.dispose();</span><br><span class="line">                          <span class="keyword">return</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        presenter.addDisposable(disposable);</span><br><span class="line">                      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> MaybeSource&lt;T&gt; <span class="title">apply</span><span class="params">(Maybe&lt;T&gt; upstream)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> upstream.takeUntil(getFilterFalseObservable().firstElement())</span><br><span class="line">                   .subscribeOn(Schedulers.io())</span><br><span class="line">                   .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">                   .doOnSubscribe(disposable -&gt; &#123;</span><br><span class="line">                     <span class="keyword">if</span> (!presenter.isViewAttached()) &#123;</span><br><span class="line">                       Timber.v(<span class="string">"dispose"</span>);</span><br><span class="line">                       disposable.dispose();</span><br><span class="line">                       <span class="keyword">return</span>;</span><br><span class="line">                     &#125;</span><br><span class="line">                     presenter.addDisposable(disposable);</span><br><span class="line">                   &#125;);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> Observable&lt;Boolean&gt; <span class="title">getFilterFalseObservable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> observable.filter(aBoolean -&gt; !aBoolean);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Function&lt;Object, Completable&gt; CANCEL_COMPLETABLE =</span><br><span class="line">      ignore -&gt; Completable.error(<span class="keyword">new</span> CancellationException());</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样原先的 RecordPresenter 就可以修改为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RecordPresenter</span> <span class="keyword">extends</span> <span class="title">BasePresenter</span>&lt;<span class="title">RecordMvpView</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> DataManager dataManager;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Inject</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">RecordPresenter</span><span class="params">(DataManager dataManager)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.dataManager = dataManager;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryRecord</span><span class="params">(<span class="keyword">int</span> page, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">    dataManager.queryRecord(page, count)</span><br><span class="line">               .compose(bindLifeCycle()) <span class="comment">// 关键代码</span></span><br><span class="line">               .subscribe(<span class="keyword">new</span> LifecycleSingleObserver&lt;List&lt;RecordResponse&gt;&gt;() &#123;</span><br><span class="line">                 <span class="meta">@Override</span></span><br><span class="line">                 <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(List&lt;RecordResponse&gt; resp)</span> </span>&#123;</span><br><span class="line">                   Timber.i(<span class="string">"onSuccess --------------"</span>);</span><br><span class="line">                   getMvpView().showRecord(resp);</span><br><span class="line">                 &#125;</span><br><span class="line"></span><br><span class="line">                 <span class="meta">@Override</span></span><br><span class="line">                 <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">                   Timber.i(e, <span class="string">"onError --------------"</span>);</span><br><span class="line">                   getMvpView().showRecord(<span class="keyword">null</span>);</span><br><span class="line">                 &#125;</span><br><span class="line">               &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 LifecycleSingleObserver 是为了简化 SingleObserver 引入的，定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">LifecycleSingleObserver</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">SingleObserver</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，关于订阅的绑定及生命周期的问题已经在基类进行解决，具体使用时的代码大大简化（至少少了 5 行代码），只需加上一句 <code>.compose(bindLifeCycle())</code> 即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;MVP 模式下使用 RxJava 处理网络访问的回调，当数据返回时 Presenter 调用绑定的 View 的方法。&lt;/p&gt;
&lt;p&gt;定义 
      
    
    </summary>
    
      <category term="it" scheme="https://linlshare.github.io/categories/it/"/>
    
      <category term="android" scheme="https://linlshare.github.io/categories/it/android/"/>
    
    
      <category term="Android" scheme="https://linlshare.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>《日語自遊行の最和味》第二課 梅雨季節結束</title>
    <link href="https://linlshare.github.io/2018/09/10/language/%E6%97%A5%E8%AA%9E/%E3%80%8A%E6%97%A5%E8%AA%9E%E8%87%AA%E9%81%8A%E8%A1%8C%E3%81%AE%E6%9C%80%E5%92%8C%E5%91%B3%E3%80%8B%E7%AC%AC%E4%BA%8C%E8%AA%B2%20%E6%A2%85%E9%9B%A8%E5%AD%A3%E7%AF%80%E7%B5%90%E6%9D%9F/"/>
    <id>https://linlshare.github.io/2018/09/10/language/日語/《日語自遊行の最和味》第二課 梅雨季節結束/</id>
    <published>2018-09-10T01:00:00.000Z</published>
    <updated>2018-10-26T16:21:01.587Z</updated>
    
    <content type="html"><![CDATA[<h2 id="對話"><a href="#對話" class="headerlink" title="對話"></a>對話</h2><table><thead><tr><th>人</th><th>語</th></tr></thead><tbody><tr><td>桜</td><td>今日　は　いい　お天気　ですね。</td></tr><tr><td>健</td><td>そろそろ　梅雨明け　ですが。</td></tr><tr><td>桜</td><td>ええ、そろそろ　ですね。</td></tr><tr><td>健</td><td>今、日本中、梅雨　です　が。</td></tr><tr><td>桜</td><td>ええ、梅雨明けの時期は　違いますが。</td></tr><tr><td>健</td><td>そうですが。</td></tr><tr><td></td><td>ああ、北海道　へ　行きたい　です。</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">桜：今天天氣不錯喲。</span><br><span class="line">健：梅雨季節該結束了吧？</span><br><span class="line">桜：嗯，差不多了吧。</span><br><span class="line">健：現在整個日本都是梅雨天氣嗎？</span><br><span class="line">桜：是的，而且梅雨季節結束的時間（各地）也不同，除了北海道是沒有梅雨季節的。</span><br><span class="line">健：這樣啊，好想去北海道。</span><br></pre></td></tr></table></figure><h2 id="附錄"><a href="#附錄" class="headerlink" title="附錄"></a>附錄</h2><ol><li><a href="http://rthk9.rthk.hk/elearning/gogojapan3/lesson.htm" target="_blank" rel="noopener">日語自遊行の最和味</a></li><li><a href="https://github.com/LinLshare/Blog/blob/master/data/%E6%97%A5%E8%AA%9E/%E6%97%A5%E8%AA%9E%E8%87%AA%E9%81%8A%E8%A1%8C%E3%81%AE%E6%9C%80%E5%92%8C%E5%91%B3/%E3%80%8A%E6%97%A5%E8%AA%9E%E8%87%AA%E9%81%8A%E8%A1%8C%E3%81%AE%E6%9C%80%E5%92%8C%E5%91%B3%E3%80%8B%E7%AC%AC%E4%BA%8C%E8%AA%B2%20%E6%A2%85%E9%9B%A8%E5%AD%A3%E7%AF%80%E7%B5%90%E6%9D%9F.pdf" target="_blank" rel="noopener">《日語自遊行の最和味》第二課 梅雨季節結束.pdf</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;對話&quot;&gt;&lt;a href=&quot;#對話&quot; class=&quot;headerlink&quot; title=&quot;對話&quot;&gt;&lt;/a&gt;對話&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;人&lt;/th&gt;
&lt;th&gt;語&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;t
      
    
    </summary>
    
      <category term="language" scheme="https://linlshare.github.io/categories/language/"/>
    
      <category term="日語" scheme="https://linlshare.github.io/categories/language/%E6%97%A5%E8%AA%9E/"/>
    
    
      <category term="日語自遊行の最和味" scheme="https://linlshare.github.io/tags/%E6%97%A5%E8%AA%9E%E8%87%AA%E9%81%8A%E8%A1%8C%E3%81%AE%E6%9C%80%E5%92%8C%E5%91%B3/"/>
    
      <category term="日语" scheme="https://linlshare.github.io/tags/%E6%97%A5%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>閩南語拼音方案</title>
    <link href="https://linlshare.github.io/2018/09/08/language/%E9%96%A9%E5%8D%97%E8%AA%9E/%E9%96%A9%E5%8D%97%E8%AA%9E%E6%8B%BC%E9%9F%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://linlshare.github.io/2018/09/08/language/閩南語/閩南語拼音方案/</id>
    <published>2018-09-08T13:54:00.000Z</published>
    <updated>2018-10-26T16:28:06.084Z</updated>
    
    <content type="html"><![CDATA[<h2 id="閩語拼音方案種種"><a href="#閩語拼音方案種種" class="headerlink" title="閩語拼音方案種種"></a>閩語拼音方案種種</h2><table><thead><tr><th>名稱</th><th>簡稱</th><th>特征</th><th>發佈情況</th></tr></thead><tbody><tr><td>白话字</td><td>POL</td><td>白话字是历史最为悠久的拉丁化方案，因此广泛流通于全球各地的闽南语流通地区。</td><td>17世紀文獻中，如英國人與鄭氏王朝通商的商館紀錄中，便存在以羅馬字母拼寫閩南語語音的「白話字」雛型。1850年，教會正式推行白話文。</td></tr><tr><td>臺灣語言音標方案</td><td>TLPA</td><td>內含臺灣閩南語音標系統、臺灣客家語音標系統、臺灣原住民語音標系統等三套系統。</td><td>台灣語文學會於1991年期間針對臺灣語言所制定的音標系統。</td></tr><tr><td>台灣闽南语罗马字拼音方案</td><td>TL</td><td>与白话字的相容性良好，可以视为白话字的增补或发展上的分支。在台湾，使用白话字的社群有较高的意愿使用台罗拼音，同时，在官方地位方面台罗拼音方案取代了TLPA。</td><td>2006年10月14日，台灣教育部正式發佈。</td></tr><tr><td>台語通用拼音方案</td><td>DT</td><td>與漢語拼音相容。目的在於統一華語、客語和閩語的拼音系統。</td><td>暫無相關資訊</td></tr><tr><td>闽南方言拼音方案</td><td>BP</td><td>與漢語拼音相容，并參考《汇集雅俗通十五音》，基於廈門口音。</td><td>另称“《普闽典》方案”来自于1982年10月厦门大学主编的《普通话闽南方言词典》一书。</td></tr></tbody></table><h2 id="臺羅系統和通用拼音之爭"><a href="#臺羅系統和通用拼音之爭" class="headerlink" title="臺羅系統和通用拼音之爭"></a>臺羅系統和通用拼音之爭</h2><blockquote><p>臺羅系統和通用拼音最大的爭執在於國際上普遍使用的濁音符號 b, d , g 要標示濁音，還是不送氣清音的問題。這個爭執，如果要考慮音標符號的普遍性，就變成可以討論的問題。 世界上沒有濁音的語言不多，世界上沒有濁音卻有送氣音的語言很少，華語正好是這種罕見的語言。世界上大部分的語言都是清濁音二元對立，華語沒有濁音卻有送氣音，一樣是二元對立，因此漢語拼音就把濁音符號 b, d, g 用來標示不送氣清音，而把清音符號用來標示送氣清音，這在中國本位立場雖然可行，卻違背了世界通用拼音的習慣。在中國境內，不但是北京話，即連其他有濁音的漢語也都遵從這個系統而修補，但這種系統只能在中國通行，可以說是中國通用拼音系統(簡稱C系統)，和世界通用的拼音系統(簡稱W系統)是不相容的。這一點從下表即可了解。 </p><p><img src="https://github.com/LinLshare/Blog/blob/master/data/%E9%96%A9%E5%8D%97%E8%AA%9E/%E9%96%A9%E5%8D%97%E8%AA%9E%E7%9A%84%E6%8B%BC%E9%9F%B3%E6%96%B9%E6%A1%88/%E4%B8%8D%E7%94%A8%E6%8B%BC%E9%9F%B3%E7%B3%BB%E7%B5%B1%E4%B8%8B%E7%9A%84%E6%B8%85%E6%BF%81%E9%80%81%E6%B0%A3%E4%B8%8D%E9%80%81%E6%B0%A3%E8%A1%A8%E7%A4%BA.jpg?raw=true" alt=""></p><p>— 引自<a href="http://kongtaigi.pts.org.tw/2012/09/blog-post_18.html" target="_blank" rel="noopener">《臺語拼音論戰簡史》</a></p></blockquote><blockquote><p>在台通拼音方案中，任一音节若用某个在台罗拼音已经采用的拼写法，则此音节在台通拼音中之拼写法亦相同、或有一等式符号与之对应。意即台通拼音与台罗拼音在拼音的结构上具有完全的相容性。</p><p>— 引自<a href="https://zh.wikipedia.org/zh-tw/%E8%87%BA%E8%AA%9E%E9%80%9A%E7%94%A8%E6%8B%BC%E9%9F%B3" target="_blank" rel="noopener">《臺語通用拼音-維基百科》</a></p></blockquote><h2 id="台灣闽南语罗马字拼音方案"><a href="#台灣闽南语罗马字拼音方案" class="headerlink" title="台灣闽南语罗马字拼音方案"></a>台灣闽南语罗马字拼音方案</h2><h3 id="閩南語的音節結構"><a href="#閩南語的音節結構" class="headerlink" title="閩南語的音節結構"></a>閩南語的音節結構</h3><p>閩南語是漢語的一種，因此音節結構也一樣可以區分為五個音位成分：聲母、韻頭（介音）、韻腹、韻尾、聲調。韻頭、韻腹、韻尾又合稱為韻母。閩南語有變調，而台羅方案和白話字一樣，都只標示本調，且採用變音符號來標示聲調，稱為調號或調符。</p><p><img src="https://github.com/LinLshare/Blog/blob/master/data/%E9%96%A9%E5%8D%97%E8%AA%9E/%E9%96%A9%E5%8D%97%E8%AA%9E%E7%9A%84%E6%8B%BC%E9%9F%B3%E6%96%B9%E6%A1%88/%E9%96%A9%E5%8D%97%E8%AA%9E%E7%9A%84%E9%9F%B3%E7%AF%80%E7%B5%90%E6%A7%8B.png?raw=true" alt=""></p><h3 id="聲母"><a href="#聲母" class="headerlink" title="聲母"></a>聲母</h3><p>台灣閩南語的聲母有十八個音位，其中「零聲母」並非沒有聲母，而是喉塞音，漢字是TLPA方案所建議的，除了「毛、耐、雅」之外，大多為傳統十五音。零聲母「英」不標。</p><p><img src="https://github.com/LinLshare/Blog/blob/master/data/%E9%96%A9%E5%8D%97%E8%AA%9E/%E9%96%A9%E5%8D%97%E8%AA%9E%E7%9A%84%E6%8B%BC%E9%9F%B3%E6%96%B9%E6%A1%88/%E5%8F%B0%E7%BE%85%E6%8B%BC%E9%9F%B3%E7%9A%84%E8%81%B2%E6%AF%8D%E5%88%97%E8%A1%A8.png?raw=true" alt=""></p><p>台灣閩南語的塞音及塞擦音，分成了清送氣音、清不送氣音、鼻濁音三重對立。這也是通用拼音與臺羅拼音爭論的源頭。</p><h3 id="韻母"><a href="#韻母" class="headerlink" title="韻母"></a>韻母</h3><p><img src="https://github.com/LinLshare/Blog/blob/master/data/%E9%96%A9%E5%8D%97%E8%AA%9E/%E9%96%A9%E5%8D%97%E8%AA%9E%E7%9A%84%E6%8B%BC%E9%9F%B3%E6%96%B9%E6%A1%88/%E5%85%83%E9%9F%B3%E5%8F%8A%E9%9F%BB%E5%8C%96%E8%BC%94%E9%9F%B3%E8%A1%A8.png?raw=true" alt=""></p><h3 id="聲調"><a href="#聲調" class="headerlink" title="聲調"></a>聲調</h3><p>閩語有八音，普通腔沒有第六音（陽上音）。</p><table><thead><tr><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>傳統調類</td><td>陰平</td><td>陰上</td><td>陰去</td><td>陰入</td><td>陽平</td><td>陽上</td><td>陽去</td><td>陽入</td></tr><tr><td>台羅</td><td>a</td><td>á</td><td>à</td><td>ah</td><td>â</td><td>ǎ</td><td>ā</td><td>a̍h</td></tr><tr><td>例字</td><td>東</td><td>黨</td><td>棟</td><td>督</td><td>同</td><td>動</td><td>洞</td><td>毒</td></tr><tr><td><a href="https://zh.wikipedia.org/wiki/IPA" target="_blank" rel="noopener">IPA</a><a href="https://zh.wikipedia.org/w/index.php?title=%E8%AA%BF%E7%AC%A6&amp;action=edit&amp;redlink=1" target="_blank" rel="noopener">調符</a>（以<a href="https://zh.wikipedia.org/w/index.php?title=%E9%AB%98%E9%9B%84%E8%85%94&amp;action=edit&amp;redlink=1" target="_blank" rel="noopener">高雄腔</a>為主）</td><td>˦˦</td><td>˥˧</td><td>˨˩</td><td>˧˨</td><td>˨˦</td><td>˧˧（<a href="https://zh.wikipedia.org/w/index.php?title=%E6%B5%B7%E5%8F%A3%E8%85%94&amp;action=edit&amp;redlink=1" target="_blank" rel="noopener">鹿港腔</a>）</td><td>˧˧</td><td>˦</td></tr></tbody></table><p><img src="https://github.com/LinLshare/Blog/blob/master/data/%E9%96%A9%E5%8D%97%E8%AA%9E/%E9%96%A9%E5%8D%97%E8%AA%9E%E7%9A%84%E6%8B%BC%E9%9F%B3%E6%96%B9%E6%A1%88/%E9%96%A9%E8%AA%9E%E5%85%AB%E9%9F%B3%E5%9C%96%E8%A7%A3.png?raw=true" alt=""></p><p>其脫胎自 IPA 中聲調，并合二調符為一符，基本符合聲調的走向。第四調和第八調另加 <code>h</code> 或 <code>k</code> 表示入音。</p><p><img src="https://github.com/LinLshare/Blog/blob/master/data/%E9%96%A9%E5%8D%97%E8%AA%9E/%E9%96%A9%E5%8D%97%E8%AA%9E%E7%9A%84%E6%8B%BC%E9%9F%B3%E6%96%B9%E6%A1%88/IPA%20%E8%81%B2%E8%AA%BF.png?raw=true" alt=""></p><h4 id="調號標識"><a href="#調號標識" class="headerlink" title="調號標識"></a>調號標識</h4><p>當一個音節有多個字母時，調號應該標示在響度（sonority）最大的字母上面（通常在韻腹）。由規則可以判定確切的字母：</p><ol><li>響度優先順序： a &gt; oo &gt; e = o &gt; i = u〈低元音 &gt; 高元音 &gt; 無擦通音 &gt; 擦音 &gt; 塞音〉</li><li>iu 及 ui ，調號都標在後一個字母，因為前一個字母是介音。</li><li>m 作韻腹時標於 m 上。</li><li>雙字母 oo 及 ng，標於前一個字母。</li><li>三字母 ere，標於最後的 e。</li></ol><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://zh.wikipedia.org/wiki/%E8%87%BA%E7%81%A3%E9%96%A9%E5%8D%97%E8%AA%9E%E7%BE%85%E9%A6%AC%E5%AD%97%E6%8B%BC%E9%9F%B3%E6%96%B9%E6%A1%88" target="_blank" rel="noopener">臺灣閩南語羅馬字拼音方案 –維基百科</a></li><li><a href="https://twblg.dict.edu.tw/holodict_new/index.html" target="_blank" rel="noopener">台灣閩南語常用詞辭典</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;閩語拼音方案種種&quot;&gt;&lt;a href=&quot;#閩語拼音方案種種&quot; class=&quot;headerlink&quot; title=&quot;閩語拼音方案種種&quot;&gt;&lt;/a&gt;閩語拼音方案種種&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名稱&lt;/th&gt;
&lt;th&gt;簡稱&lt;/th&gt;
&lt;th&gt;
      
    
    </summary>
    
      <category term="language" scheme="https://linlshare.github.io/categories/language/"/>
    
      <category term="閩南語" scheme="https://linlshare.github.io/categories/language/%E9%96%A9%E5%8D%97%E8%AA%9E/"/>
    
    
      <category term="閩南語" scheme="https://linlshare.github.io/tags/%E9%96%A9%E5%8D%97%E8%AA%9E/"/>
    
  </entry>
  
</feed>
