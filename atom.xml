<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Share 杂志</title>
  <icon>https://www.gravatar.com/avatar/67398ac80b713195e4e6faee10834ea3</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://linlshare.github.io/"/>
  <updated>2018-12-05T07:27:36.459Z</updated>
  <id>https://linlshare.github.io/</id>
  
  <author>
    <name>Lshare</name>
    <email>Lshare@outlook.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring Data MongoDB</title>
    <link href="https://linlshare.github.io/2018/12/05/it/java/persistence/Spring%20Data%20MongoDB/"/>
    <id>https://linlshare.github.io/2018/12/05/it/java/persistence/Spring Data MongoDB/</id>
    <published>2018-12-05T06:25:40.000Z</published>
    <updated>2018-12-05T07:27:36.459Z</updated>
    
    <content type="html"><![CDATA[<h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><p>快速集成 MongoDB，不用写一行 MongoDB 的 CRUD 语句。而是使用 Spring Data 独有的方法命名方式定义数据库操作，并且可以方便地替换各种数据库，比如 MySQL。</p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="（0）开始之前"><a href="#（0）开始之前" class="headerlink" title="（0）开始之前"></a>（0）开始之前</h3><p>确保已有可连接的 MongoDB</p><h3 id="（1）依赖引入"><a href="#（1）依赖引入" class="headerlink" title="（1）依赖引入"></a>（1）依赖引入</h3><p>在 <code>build.gradle</code> 中添加如下依赖。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        mavenCentral()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath(<span class="string">"org.springframework.boot:spring-boot-gradle-plugin:2.0.5.RELEASE"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'java'</span></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'org.springframework.boot'</span></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'io.spring.dependency-management'</span></span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sourceCompatibility = <span class="number">1.8</span></span><br><span class="line">targetCompatibility = <span class="number">1.8</span></span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile(<span class="string">"org.springframework.boot:spring-boot-starter-data-mongodb"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（2）配置-MongoDB-连接"><a href="#（2）配置-MongoDB-连接" class="headerlink" title="（2）配置 MongoDB 连接"></a>（2）配置 MongoDB 连接</h3><p>这里配置了 MongoDB 的连接地址和使用的数据库，还配置了扫描 Repositories 的位置。Repositories 我们后面会讲到是什么。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableMongoRepositories</span>(basePackages = <span class="string">"com.example.dao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MongoConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> MongoOperations <span class="title">mongoTemplate</span><span class="params">()</span> <span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MongoTemplate(mongoDbFactory());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> MongoDbFactory <span class="title">mongoDbFactory</span><span class="params">()</span> <span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SimpleMongoDbFactory(<span class="keyword">new</span> MongoClientURI(<span class="string">"mongodb://localhost:27017/test"</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（3）定义一个简单的实体类"><a href="#（3）定义一个简单的实体类" class="headerlink" title="（3）定义一个简单的实体类"></a>（3）定义一个简单的实体类</h3><p>实体类是一个 POJO，不过会多一些注解。简单介绍下这些注解吧：</p><ol><li><code>@Document</code> ，用于自定义 MongoDB 中 Collection 的名称，<strong>默认情况下 collection 值为空，使用类名的小写形式作为 Collection 的名称</strong>；</li><li><code>@Id</code> ，用于指定 MongoDB 内部使用字段 <code>_id</code> 的值，如果不指定，则使用自动生成的值。</li><li><code>@Field</code> ，用于指定字段存储时的名称，如果不指定，则直接使用字段名。</li><li><code>@Indexed</code>，用于为指定字段添加索引，会调用 MongoDB 的 <code>createIndex</code> 方法。值得注意的是：<strong>必须 <code>@Document</code> 注解，否则不会自动生成索引</strong>。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Document</span>(collection = <span class="string">"Customer"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">public</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Indexed</span></span><br><span class="line">    <span class="meta">@Field</span>(<span class="string">"first_name"</span>)</span><br><span class="line">    <span class="keyword">public</span> String firstName;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Field</span>(<span class="string">"last_name"</span>)</span><br><span class="line">    <span class="keyword">public</span> String lastName;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">(String firstName, String lastName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">        <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（4）定义一个-Repository"><a href="#（4）定义一个-Repository" class="headerlink" title="（4）定义一个 Repository"></a>（4）定义一个 Repository</h3><p><code>MongoRepository</code> 中定义的基本的 CRUD 操作，你可以自定义查询方法，不过要遵守一定的规范，Spring Data MongoDB 会根据方法名和参数去执行数据库操作。这个规范参见下文 <u>支持的查询方法关键字列表</u>。此处只需要了解有 <code>findByXx</code> 的方法名即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CustomerRepository</span> <span class="keyword">extends</span> <span class="title">MongoRepository</span>&lt;<span class="title">Customer</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Customer <span class="title">findByFirstName</span><span class="params">(String firstName)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">findByLastName</span><span class="params">(String lastName)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（5）让-Spring-Boot-自动装配-CustomerRepository"><a href="#（5）让-Spring-Boot-自动装配-CustomerRepository" class="headerlink" title="（5）让 Spring Boot 自动装配 CustomerRepository"></a>（5）让 Spring Boot 自动装配 CustomerRepository</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> CustomerRepository repository;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(Application.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">repository.deleteAll();</span><br><span class="line"></span><br><span class="line"><span class="comment">// save a couple of customers</span></span><br><span class="line">repository.save(<span class="keyword">new</span> Customer(<span class="string">"Alice"</span>, <span class="string">"Smith"</span>));</span><br><span class="line">repository.save(<span class="keyword">new</span> Customer(<span class="string">"Bob"</span>, <span class="string">"Smith"</span>));</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"-------------------------------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// fetch an individual customer</span></span><br><span class="line">System.out.println(repository.findByFirstName(<span class="string">"Alice"</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（6）使用-MongoDB-命令行查询"><a href="#（6）使用-MongoDB-命令行查询" class="headerlink" title="（6）使用 MongoDB 命令行查询"></a>（6）使用 MongoDB 命令行查询</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> mongo</span><br><span class="line"><span class="meta">&gt;</span> use test</span><br><span class="line"><span class="meta">&gt;</span> db.Customer.find(&#123;&#125;)</span><br></pre></td></tr></table></figure><h2 id="深入探讨"><a href="#深入探讨" class="headerlink" title="深入探讨"></a>深入探讨</h2><h3 id="常用的匹配注解列表"><a href="#常用的匹配注解列表" class="headerlink" title="常用的匹配注解列表"></a>常用的匹配注解列表</h3><table><thead><tr><th>Annotation</th><th>Desc</th></tr></thead><tbody><tr><td><code>@Id</code></td><td>用于指定 MongoDB 内部使用字段 <code>_id</code> 的值，如果不指定，则使用自动生成的值。</td></tr><tr><td><code>@Field</code></td><td>用于指定数据库中存储的字段名。</td></tr><tr><td><code>@Document</code></td><td>用于指定该类的实例对应 MongoDB 的某个指定 Collection 下的 Document。</td></tr><tr><td><code>@Indexed</code></td><td>用于为指定字段添加索引。</td></tr><tr><td><code>@CompoundIndex</code></td><td>用于指定复合索引。</td></tr><tr><td><code>@Transient</code></td><td>用于将某些字段排除，不与数据库匹配。</td></tr><tr><td><code>@Version</code></td><td>用于指定字段的版本，默认值为 0，在每次更新字段后自增。</td></tr></tbody></table><h3 id="支持的查询方法关键字列表"><a href="#支持的查询方法关键字列表" class="headerlink" title="支持的查询方法关键字列表"></a>支持的查询方法关键字列表</h3><table><thead><tr><th>Keyword</th><th>Sample</th><th>Logical result</th></tr></thead><tbody><tr><td><code>After</code></td><td><code>findByBirthdateAfter(Date date)</code></td><td><code>{&quot;birthdate&quot; : {&quot;$gt&quot; : date}}</code></td></tr><tr><td><code>GreaterThan</code></td><td><code>findByAgeGreaterThan(int age)</code></td><td><code>{&quot;age&quot; : {&quot;$gt&quot; : age}}</code></td></tr><tr><td><code>GreaterThanEqual</code></td><td><code>findByAgeGreaterThanEqual(int age)</code></td><td><code>{&quot;age&quot; : {&quot;$gte&quot; : age}}</code></td></tr><tr><td><code>Before</code></td><td><code>findByBirthdateBefore(Date date)</code></td><td><code>{&quot;birthdate&quot; : {&quot;$lt&quot; : date}}</code></td></tr><tr><td><code>LessThan</code></td><td><code>findByAgeLessThan(int age)</code></td><td><code>{&quot;age&quot; : {&quot;$lt&quot; : age}}</code></td></tr><tr><td><code>LessThanEqual</code></td><td><code>findByAgeLessThanEqual(int age)</code></td><td><code>{&quot;age&quot; : {&quot;$lte&quot; : age}}</code></td></tr><tr><td><code>Between</code></td><td><code>findByAgeBetween(int from, int to)</code></td><td><code>{&quot;age&quot; : {&quot;$gt&quot; : from, &quot;$lt&quot; : to}}</code></td></tr><tr><td><code>In</code></td><td><code>findByAgeIn(Collection ages)</code></td><td><code>{&quot;age&quot; : {&quot;$in&quot; : [ages…]}}</code></td></tr><tr><td><code>NotIn</code></td><td><code>findByAgeNotIn(Collection ages)</code></td><td><code>{&quot;age&quot; : {&quot;$nin&quot; : [ages…]}}</code></td></tr><tr><td><code>IsNotNull</code>, <code>NotNull</code></td><td><code>findByFirstnameNotNull()</code></td><td><code>{&quot;firstname&quot; : {&quot;$ne&quot; : null}}</code></td></tr><tr><td><code>IsNull</code>, <code>Null</code></td><td><code>findByFirstnameNull()</code></td><td><code>{&quot;firstname&quot; : null}</code></td></tr><tr><td><code>Like</code>, <code>StartingWith</code>, <code>EndingWith</code></td><td><code>findByFirstnameLike(String name)</code></td><td><code>{&quot;firstname&quot; : name} (name as regex)</code></td></tr><tr><td><code>NotLike</code>, <code>IsNotLike</code></td><td><code>findByFirstnameNotLike(String name)</code></td><td><code>{&quot;firstname&quot; : { &quot;$not&quot; : name }} (name as regex)</code></td></tr><tr><td><code>Containing</code> on String</td><td><code>findByFirstnameContaining(String name)</code></td><td><code>{&quot;firstname&quot; : name} (name as regex)</code></td></tr><tr><td><code>NotContaining</code> on String</td><td><code>findByFirstnameNotContaining(String name)</code></td><td><code>{&quot;firstname&quot; : { &quot;$not&quot; : name}} (name as regex)</code></td></tr><tr><td><code>Containing</code> on Collection</td><td><code>findByAddressesContaining(Address address)</code></td><td><code>{&quot;addresses&quot; : { &quot;$in&quot; : address}}</code></td></tr><tr><td><code>NotContaining</code> on Collection</td><td><code>findByAddressesNotContaining(Address address)</code></td><td><code>{&quot;addresses&quot; : { &quot;$not&quot; : { &quot;$in&quot; : address}}}</code></td></tr><tr><td><code>Regex</code></td><td><code>findByFirstnameRegex(String firstname)</code></td><td><code>{&quot;firstname&quot; : {&quot;$regex&quot; : firstname }}</code></td></tr><tr><td><code>(No keyword)</code></td><td><code>findByFirstname(String name)</code></td><td><code>{&quot;firstname&quot; : name}</code></td></tr><tr><td><code>Not</code></td><td><code>findByFirstnameNot(String name)</code></td><td><code>{&quot;firstname&quot; : {&quot;$ne&quot; : name}}</code></td></tr><tr><td><code>Near</code></td><td><code>findByLocationNear(Point point)</code></td><td><code>{&quot;location&quot; : {&quot;$near&quot; : [x,y]}}</code></td></tr><tr><td><code>Near</code></td><td><code>findByLocationNear(Point point, Distance max)</code></td><td><code>{&quot;location&quot; : {&quot;$near&quot; : [x,y], &quot;$maxDistance&quot; : max}}</code></td></tr><tr><td><code>Near</code></td><td><code>findByLocationNear(Point point, Distance min, Distance max)</code></td><td><code>{&quot;location&quot; : {&quot;$near&quot; : [x,y], &quot;$minDistance&quot; : min, &quot;$maxDistance&quot; : max}}</code></td></tr><tr><td><code>Within</code></td><td><code>findByLocationWithin(Circle circle)</code></td><td><code>{&quot;location&quot; : {&quot;$geoWithin&quot; : {&quot;$center&quot; : [ [x, y], distance]}}}</code></td></tr><tr><td><code>Within</code></td><td><code>findByLocationWithin(Box box)</code></td><td><code>{&quot;location&quot; : {&quot;$geoWithin&quot; : {&quot;$box&quot; : [ [x1, y1], x2, y2]}}}</code></td></tr><tr><td><code>IsTrue</code>, <code>True</code></td><td><code>findByActiveIsTrue()</code></td><td><code>{&quot;active&quot; : true}</code></td></tr><tr><td><code>IsFalse</code>, <code>False</code></td><td><code>findByActiveIsFalse()</code></td><td><code>{&quot;active&quot; : false}</code></td></tr><tr><td><code>Exists</code></td><td><code>findByLocationExists(boolean exists)</code></td><td><code>{&quot;location&quot; : {&quot;$exists&quot; : exists }}</code></td></tr></tbody></table><blockquote><p>Tip：将以上的 <code>findBy</code> 替换成 <code>deleteBy</code> 含义就变成了：查找后进行删除操作。</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://docs.spring.io/spring-data/mongodb/docs/current/reference/html/#repositories.create-instances.spring" target="_blank" rel="noopener">Spring Data MongoDB - Reference Documentation - spring.io</a></li><li><a href="https://spring.io/guides/gs/accessing-data-mongodb/" target="_blank" rel="noopener">Accessing Data with MongoDB - spring.io</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;用途&quot;&gt;&lt;a href=&quot;#用途&quot; class=&quot;headerlink&quot; title=&quot;用途&quot;&gt;&lt;/a&gt;用途&lt;/h2&gt;&lt;p&gt;快速集成 MongoDB，不用写一行 MongoDB 的 CRUD 语句。而是使用 Spring Data 独有的方法命名方式定义数据库操作
      
    
    </summary>
    
      <category term="it" scheme="https://linlshare.github.io/categories/it/"/>
    
      <category term="java" scheme="https://linlshare.github.io/categories/it/java/"/>
    
      <category term="persistence" scheme="https://linlshare.github.io/categories/it/java/persistence/"/>
    
    
      <category term="Java" scheme="https://linlshare.github.io/tags/Java/"/>
    
      <category term="Spring" scheme="https://linlshare.github.io/tags/Spring/"/>
    
      <category term="MongoDB" scheme="https://linlshare.github.io/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>澳門編年史 - 二十世紀(1900-1949)</title>
    <link href="https://linlshare.github.io/2018/12/04/history/%E6%BE%B3%E9%96%80%E7%B7%A8%E5%B9%B4%E5%8F%B2%20-%20%E4%BA%8C%E5%8D%81%E4%B8%96%E7%B4%80(1900-1949)%20/"/>
    <id>https://linlshare.github.io/2018/12/04/history/澳門編年史 - 二十世紀(1900-1949) /</id>
    <published>2018-12-04T15:21:55.000Z</published>
    <updated>2018-12-04T16:07:05.292Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">作者/編者：施白蒂著、金國平譯 </span><br><span class="line">頁數：368 </span><br><span class="line">出版日期：01/04/1999</span><br></pre></td></tr></table></figure><p><a href="https://www.macaudata.com/macaudata/books/showBooks?books.bId=344" target="_blank" rel="noopener">在線閱讀</a></p><blockquote><p>1900～1901年 在義和拳起義期間，當時有“老佛爺”之稱的慈禧太后一露 猙獰面目。她運用手腕，再次出掌大權，充當反對革新精神、洋人的急先鋒。爲此，她煽動民衆助其一臂之力。她 勒令各省成立團練，其中存在大量本來在中華大地叢生 的秘密社團。最著名的爲義和拳。外人稱之爲Boxer，因 爲其徒眾常在集市上耍拳買藝。中國上下掀起了一場驅 逐洋人的如聖戰般的群眾運動。慈禧太后欲將外人斬盡 殺絕，爲此她懸賞割取在京洋人的首級。外人退集東交民巷，以眞絲做土袋，壘築工事。在中華大地逐殺歐洲人的 血雨腥風中，他們渡過了難以言狀的痛苦。正當糧盡彈絕之際，獲聯軍援救。聯軍失去了軍紀，闖入京城，不分靑紅 皂白一通燒殺劫掠，許多價値連城的宮殿化爲灰燼。慈禧 太后扮作民女出逃熱河。中國忍辱賠償6750萬英鎊。賠 款利息以海關收入作爲抵押。但美國將其應得部份用來 以新的敎育方式培養中國靑年。因此，不具備漢唐和睦精 神、遠大目光的滿淸，在出現嚴重的外來危險時，不知所 措，將國家帶入內戰與無政府的狀況。在義和拳運動中，5 位主敎遇難，40名傳敎上（12名屬天主教，餘爲新敎敎士） 及18000敎徒（其中包括53個兒童）喪生。</p></blockquote><p>慈禧無才無德，坐上了大位，只會瞎搞，挑動暴民，引火自焚。聯軍也並非文明之師，火燒圓明園之恥永記！</p><blockquote><p>1945年（8月6日）長崎這一葡萄牙人建立的城市遭受原子彈襲 擊。</p></blockquote><p>維基百科：長崎的歷史開始於1570年（元龜元年）吉利支丹大名大村純忠將長崎浦開放給葡萄牙人作為貿易港。所以這裡說長崎是葡萄牙人建立的城市。</p><blockquote><p>1945 （9月2日）於停泊於東京灣中的“密蘇里”航空母艦上簽 署日本正式投降書。第二次世界大戰結束。不包括死於 大屠殺的5百萬猶太人在內，該戰爭共造成5千5百萬人死亡，其中3千萬爲平民。</p></blockquote><p>希望和平，因為戰爭中死傷最多的永遠都是平民。</p><blockquote><p>1945年（12月4日）經過4個月的追剿後，活動於澳門、香港及二 地之間島嶼的最後海盜之一王孔祺（音譯：Wong Kong Kit）被捕並被處以極刑。此人非戰爭罪犯，而是一殺人魔 王、十足的舊式海盜。</p></blockquote><p>文明國家不允許海盜存在，但罪惡仍在滋生，只是換了一種身份而已。</p><blockquote><p>1948年（1月30日）甘地（Mohadas Gandhi）遇刺 （參見1915年 條），這一偉人的消失在全世界引起反響。</p></blockquote><p>默哀。</p><blockquote><p>1949年（10月1日）在毛澤東取得戰勝蔣介石（在美國的援助下 撤退臺灣）的國民黨的勝利後，成立中華人民共和國。中 國共產黨的歷史領袖毛澤東在北京天安門廣場宣告中華 人民共和國的誕生。新中國政府成立時，身兼外交部部長 的周恩來總理明確宣佈中國政府願在平等、互相尊重的基 礎上與所有國家（臺北除外）政府建立外交關係。共產黨 掌權。文化革命開始（譯注：原文如此）。柵欄墓地被宣佈 爲文物保護單位。</p></blockquote><p>中國終於結束了內戰，但另一場革命又即將來襲。</p><p>柵欄墓地，即是滕公柵欄，位於北京市西城區車公莊大街6號中共北京市委黨校（北京行政學院）院內，是明朝至中華民國時期的天主教墓地，安葬了許多來華西方天主教傳教士及其他天主教教士、教民。現僅存利瑪竇墓等一小部分。</p><blockquote><p>1949年 在此之前，中國擁有21個少數民族。40年後昇至55個。 其中僅有回族和滿族使用漢語。50% 少數民族聚居雲南 （參見《中國少數民族服飾展》目錄，市政廳—賈梅士博物 館，澳門1988年）。根據最新人口普查，漢族佔絕大多數 （10億4千2百萬），而55個少數民族總數爲9千1百20 萬（8%）（參見安東尼奧•卡爾莫，前引書）。澳門包括在此 數字之內。鑒於社會、文化及宗敎影響範圍從未受到國界 的限制，澳門爲在此交匯融合的各種思潮的自然延伸，有 必要在本編年史中對上述數字加以引用。</p></blockquote><p>少數民族的確定有利於民族政策的制定和實施。50%的少數民族聚居雲南這點令人吃驚，這個比例是應該是民族個數佔比而不是種族人數佔比。</p><blockquote><p>1949年    荷蘭承認印度尼西亞獨立。蘇加諾總統於1955年提議召 開萬隆會議。23個亞洲國家及6個非洲國家應邀出席， 仍在歐洲統治下的地區亦有代表參加。它的主題是“讓我 們迎接一個新亞洲及一個新非洲的誕生”，要求結束歐洲 人最後的帝國。荷蘭人撤離印度尼西亞。</p></blockquote><p>原來印尼是1949年萬隆會議后獨立的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
      <category term="history" scheme="https://linlshare.github.io/categories/history/"/>
    
    
      <category term="History" scheme="https://linlshare.github.io/tags/History/"/>
    
  </entry>
  
  <entry>
    <title>Alfred</title>
    <link href="https://linlshare.github.io/2018/12/04/it/tool/Alfred/"/>
    <id>https://linlshare.github.io/2018/12/04/it/tool/Alfred/</id>
    <published>2018-12-04T12:17:22.000Z</published>
    <updated>2018-12-04T12:27:08.247Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实用的-Alfred-Workflow"><a href="#实用的-Alfred-Workflow" class="headerlink" title="实用的 Alfred Workflow"></a>实用的 Alfred Workflow</h2><table><thead><tr><th>Alfred Workflow</th><th>介绍</th></tr></thead><tbody><tr><td><a href="https://github.com/willfarrell/alfred-pkgman-workflow" target="_blank" rel="noopener">alfred-pkgman-workflow</a></td><td>快速从各个软件仓库(maven, gradle 等等)中查找需要的软件包</td></tr><tr><td><a href="https://github.com/LinLshare/AlfredHanziSourceWorkflow" target="_blank" rel="noopener">AlfredHanziSourceWorkflow</a></td><td>快速从象形字典、汉语字典、说文解字等站点查询字源</td></tr><tr><td><a href="https://github.com/LinLshare/AlfredGoogleTranslateWorkflow" target="_blank" rel="noopener">AlfredGoogleTranslateWorkflow</a></td><td>快速进行多语言翻译</td></tr><tr><td><a href="https://github.com/bchatard/jetbrains-alfred-workflow" target="_blank" rel="noopener"> jetbrains-alfred-workflow</a></td><td>快速打开 JetBrains 家族构建的项目，包括 Android Studio、IDEA 等的项目</td></tr><tr><td><a href="noogel/Alfred-Workflow">noogel/Alfred-Workflow</a></td><td>开发工程师常用工具箱，包括查询 IP、时间戳转换和 Base64编码之类的工具</td></tr></tbody></table><h2 id="小知识"><a href="#小知识" class="headerlink" title="小知识"></a>小知识</h2><ol><li>当 alfred 查询的结果是一个网页链接时，点击<strong>右边的 Shift 键</strong>可以启动快速预览而不用打开网页。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;实用的-Alfred-Workflow&quot;&gt;&lt;a href=&quot;#实用的-Alfred-Workflow&quot; class=&quot;headerlink&quot; title=&quot;实用的 Alfred Workflow&quot;&gt;&lt;/a&gt;实用的 Alfred Workflow&lt;/h2&gt;&lt;tabl
      
    
    </summary>
    
      <category term="it" scheme="https://linlshare.github.io/categories/it/"/>
    
      <category term="tool" scheme="https://linlshare.github.io/categories/it/tool/"/>
    
    
      <category term="Alfred" scheme="https://linlshare.github.io/tags/Alfred/"/>
    
  </entry>
  
  <entry>
    <title>Spring Data JPA</title>
    <link href="https://linlshare.github.io/2018/12/04/it/java/persistence/Spring%20Data%20JPA/"/>
    <id>https://linlshare.github.io/2018/12/04/it/java/persistence/Spring Data JPA/</id>
    <published>2018-12-04T10:02:06.000Z</published>
    <updated>2018-12-04T11:17:03.102Z</updated>
    
    <content type="html"><![CDATA[<h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ol><li>支持自由替换 Hibernate, EclipseLink, OpenJpa。</li></ol><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="依赖引入"><a href="#依赖引入" class="headerlink" title="依赖引入"></a>依赖引入</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">  repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">  &#125;</span><br><span class="line">  dependencies &#123;</span><br><span class="line">    classpath(<span class="string">"org.springframework.boot:spring-boot-gradle-plugin:2.0.5.RELEASE"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'java'</span></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'org.springframework.boot'</span></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'io.spring.dependency-management'</span></span><br><span class="line"></span><br><span class="line">sourceCompatibility = <span class="number">1.8</span></span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">  compile(<span class="string">"org.springframework.boot:spring-boot-starter-data-jpa"</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;用途&quot;&gt;&lt;a href=&quot;#用途&quot; class=&quot;headerlink&quot; title=&quot;用途&quot;&gt;&lt;/a&gt;用途&lt;/h2&gt;&lt;h3 id=&quot;特性&quot;&gt;&lt;a href=&quot;#特性&quot; class=&quot;headerlink&quot; title=&quot;特性&quot;&gt;&lt;/a&gt;特性&lt;/h3&gt;&lt;ol&gt;
&lt;
      
    
    </summary>
    
      <category term="it" scheme="https://linlshare.github.io/categories/it/"/>
    
      <category term="java" scheme="https://linlshare.github.io/categories/it/java/"/>
    
      <category term="persistence" scheme="https://linlshare.github.io/categories/it/java/persistence/"/>
    
    
      <category term="Java" scheme="https://linlshare.github.io/tags/Java/"/>
    
      <category term="Spring" scheme="https://linlshare.github.io/tags/Spring/"/>
    
      <category term="JPA" scheme="https://linlshare.github.io/tags/JPA/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis</title>
    <link href="https://linlshare.github.io/2018/12/04/it/java/persistence/MyBatis/"/>
    <id>https://linlshare.github.io/2018/12/04/it/java/persistence/MyBatis/</id>
    <published>2018-12-04T07:51:06.000Z</published>
    <updated>2018-12-04T09:28:06.360Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MyBatis-是干嘛的？"><a href="#MyBatis-是干嘛的？" class="headerlink" title="MyBatis 是干嘛的？"></a>MyBatis 是干嘛的？</h2><p>MyBatis 是一个 SQL 映射框架，它通过 XML 描述符或者注解将对象与<strong>关系型数据库</strong>的存储过程或 SQL 语句关联起来。</p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><ol><li>支持声明式数据缓存；</li><li>提供基于 HashMap 的默认缓存实现；</li><li>提供 API 供其他缓存实现。</li></ol><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="单独使用"><a href="#单独使用" class="headerlink" title="单独使用"></a>单独使用</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="string">'org.mybatis:mybatis:3.4.6'</span></span><br></pre></td></tr></table></figure><p>如使用其他依赖引入方式，参看 <a href="https://search.maven.org/artifact/org.mybatis/mybatis/3.4.6/jar" target="_blank" rel="noopener">mybatis - maven.org</a>。</p><h3 id="集成使用"><a href="#集成使用" class="headerlink" title="集成使用"></a>集成使用</h3><ol><li>与 Spring Framework 集成</li><li>与 Google Guice 集成</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://zh.wikipedia.org/zh-cn/MyBatis" target="_blank" rel="noopener">MyBatis - 维基百科</a></li><li><a href="http://www.mybatis.org/mybatis-3/zh/" target="_blank" rel="noopener">mybatis-3 - mybatis.org</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;MyBatis-是干嘛的？&quot;&gt;&lt;a href=&quot;#MyBatis-是干嘛的？&quot; class=&quot;headerlink&quot; title=&quot;MyBatis 是干嘛的？&quot;&gt;&lt;/a&gt;MyBatis 是干嘛的？&lt;/h2&gt;&lt;p&gt;MyBatis 是一个 SQL 映射框架，它通过 X
      
    
    </summary>
    
      <category term="it" scheme="https://linlshare.github.io/categories/it/"/>
    
      <category term="java" scheme="https://linlshare.github.io/categories/it/java/"/>
    
      <category term="persistence" scheme="https://linlshare.github.io/categories/it/java/persistence/"/>
    
    
      <category term="Java" scheme="https://linlshare.github.io/tags/Java/"/>
    
      <category term="MyBatis" scheme="https://linlshare.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>JPA</title>
    <link href="https://linlshare.github.io/2018/12/04/it/java/persistence/JPA/"/>
    <id>https://linlshare.github.io/2018/12/04/it/java/persistence/JPA/</id>
    <published>2018-12-04T07:51:06.000Z</published>
    <updated>2018-12-04T11:19:45.453Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JPA-是干嘛的？"><a href="#JPA-是干嘛的？" class="headerlink" title="JPA 是干嘛的？"></a>JPA 是干嘛的？</h2><p>JPA（Java Persistence API，Java 持久化 API），是一组 ORM（Object Relational Mapping，对象关系映射）规范。所谓持久化，包含三层意思：</p><ol><li>API 本身，定义在 <code>javax.persistence</code> 包下；</li><li>JPQL（Java Persistence Query Language，Java 持久化查询语言）；</li><li>对象与关联表之间的元数据。</li></ol><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><table><thead><tr><th>项目</th><th>开发公司</th><th>数据库支持</th><th>备注</th></tr></thead><tbody><tr><td><a href="http://hibernate.org/" target="_blank" rel="noopener">Hibernate</a></td><td>RedHat</td><td>SQL</td><td>JPA 制定的参考。</td></tr><tr><td><a href="https://docs.spring.io/spring-data/jpa/docs/2.1.3.RELEASE/reference/html/" target="_blank" rel="noopener">Spring Data JPA</a></td><td>Pivotal</td><td>SQL</td><td>支持 RESTful API 查询，支持 CRUD</td></tr><tr><td><a href="https://www.eclipse.org/eclipselink/" target="_blank" rel="noopener">EclipseLink</a></td><td>Eclipse Foundation</td><td>SQL 及NoSQL</td><td>基于 TopLink</td></tr><tr><td><a href="https://openjpa.apache.org/" target="_blank" rel="noopener">OpenJPA</a></td><td>Apache</td><td>SQL</td><td>支持缓存。</td></tr></tbody></table><p>* 2001年，澳大利亚墨尔本一位名为Gavin King的27岁的程序员，上街买了一本SQL编程的书，他厌倦了实体bean，认为自己可以开发出一个匹配对象关系映射理论，并且真正好用的Java持久化层框架，因此他需要先学习一下SQL。这一年的11月，Hibernate的第一个版本发布了。</p><p>* Pivotal 和 VMware 都是 EMC 的子公司，2015 年 Dell 以 670 亿美元收购 EMC。 </p><p>* MyBatis 是一套持久化框架，但不是 ORM 的，而且 Java 方法与 SQL 语句的关联。</p><p>* OpenJPA 至今已有 4933 次 commit，更新也很频繁，但其 Github 上的 star 却只有 56，坚持不懈的精神令人肃然起敬。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://zh.wikipedia.org/zh-cn/Java%E6%8C%81%E4%B9%85%E5%8C%96API" target="_blank" rel="noopener">Java 持久化 API - 维基百科</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;JPA-是干嘛的？&quot;&gt;&lt;a href=&quot;#JPA-是干嘛的？&quot; class=&quot;headerlink&quot; title=&quot;JPA 是干嘛的？&quot;&gt;&lt;/a&gt;JPA 是干嘛的？&lt;/h2&gt;&lt;p&gt;JPA（Java Persistence API，Java 持久化 API），是一组
      
    
    </summary>
    
      <category term="it" scheme="https://linlshare.github.io/categories/it/"/>
    
      <category term="java" scheme="https://linlshare.github.io/categories/it/java/"/>
    
      <category term="persistence" scheme="https://linlshare.github.io/categories/it/java/persistence/"/>
    
    
      <category term="Java" scheme="https://linlshare.github.io/tags/Java/"/>
    
      <category term="JPA" scheme="https://linlshare.github.io/tags/JPA/"/>
    
  </entry>
  
  <entry>
    <title>JDBC</title>
    <link href="https://linlshare.github.io/2018/12/04/it/java/persistence/JDBC/"/>
    <id>https://linlshare.github.io/2018/12/04/it/java/persistence/JDBC/</id>
    <published>2018-12-04T07:51:06.000Z</published>
    <updated>2018-12-04T10:00:15.286Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JDBC-是干什么的？"><a href="#JDBC-是干什么的？" class="headerlink" title="JDBC 是干什么的？"></a>JDBC 是干什么的？</h2><p>是 Java 语言中用来规范客户端程序如何来访问数据库的应用程序接口，提供了诸如<strong>查询和更新</strong>数据库中数据的方法。JDBC 是面向<strong>关系型数据库</strong>的。</p><h3 id="JPA-与-JDBC-的异同？"><a href="#JPA-与-JDBC-的异同？" class="headerlink" title="JPA 与 JDBC 的异同？"></a>JPA 与 JDBC 的异同？</h3><p><strong>（1）相同点</strong></p><ul><li>都是面向关系型数据库的；</li><li>都具备查询保存数据的能力。</li></ul><p><strong>（2）不同点</strong></p><ul><li>JPA 是 Java 持久化 API 的规范，关注将数据库中的表与实体类做映射；</li><li>JDBC 是 Java 数据库访问的接口，将数据访问与具体的关系型数据库分离，使用驱动完成具体的数据操作。</li></ul><p>参看 <a href="https://stackoverflow.com/questions/11881548/jpa-or-jdbc-how-are-they-different" target="_blank" rel="noopener">JPA or JDBC, how are they different? - stackoverfow</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://zh.wikipedia.org/zh-cn/Java%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5" target="_blank" rel="noopener">Java 数据库连接 - 维基百科</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;JDBC-是干什么的？&quot;&gt;&lt;a href=&quot;#JDBC-是干什么的？&quot; class=&quot;headerlink&quot; title=&quot;JDBC 是干什么的？&quot;&gt;&lt;/a&gt;JDBC 是干什么的？&lt;/h2&gt;&lt;p&gt;是 Java 语言中用来规范客户端程序如何来访问数据库的应用程序接口
      
    
    </summary>
    
      <category term="it" scheme="https://linlshare.github.io/categories/it/"/>
    
      <category term="java" scheme="https://linlshare.github.io/categories/it/java/"/>
    
      <category term="persistence" scheme="https://linlshare.github.io/categories/it/java/persistence/"/>
    
    
      <category term="Java" scheme="https://linlshare.github.io/tags/Java/"/>
    
      <category term="JDBC" scheme="https://linlshare.github.io/tags/JDBC/"/>
    
  </entry>
  
  <entry>
    <title>Groovy</title>
    <link href="https://linlshare.github.io/2018/12/03/it/tool/Groovy/"/>
    <id>https://linlshare.github.io/2018/12/03/it/tool/Groovy/</id>
    <published>2018-12-03T03:09:17.000Z</published>
    <updated>2018-12-03T04:17:26.523Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><h3 id="Gradle-中的-ext-究竟是什么？"><a href="#Gradle-中的-ext-究竟是什么？" class="headerlink" title="Gradle 中的 ext 究竟是什么？"></a>Gradle 中的 ext 究竟是什么？</h3><p>gradle 中我们使用 <code>ext</code> 定义额外的各种属性，可是 <code>ext</code> 究竟是什么呢？</p><p>参看 <a href="https://docs.gradle.org/current/dsl/org.gradle.api.plugins.ExtraPropertiesExtension.html" target="_blank" rel="noopener">ExtraPropertiesExtension - Gradle DSL</a>，发现 <code>ext</code> 不是 Groovy 固有的定义，而是领域特定的语言（DSL）。使用方式是：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以下的 project 常常被省略</span></span><br><span class="line">project.ext &#123; foo = <span class="string">"bar"</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> project.ext.get(<span class="string">"foo"</span>) == <span class="string">"bar"</span></span><br><span class="line"><span class="keyword">assert</span> project.ext.foo == <span class="string">"bar"</span></span><br><span class="line"><span class="keyword">assert</span> project.ext[<span class="string">"foo"</span>] == <span class="string">"bar"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> project.foo == <span class="string">"bar"</span></span><br><span class="line"><span class="keyword">assert</span> project[<span class="string">"foo"</span>] == <span class="string">"bar"</span></span><br></pre></td></tr></table></figure><p><code>ext</code> 实质上是一个内置的简单对象，但可以动态添加新属性，这个对象叫 <code>ExtraPropertiesExtension</code>，它内置在所有 <code>ExtensionAware</code> 中，<code>ExtenstionAware</code> 的已知子类有 <code>Project</code>、<code>Settings</code>、<code>Task</code> 、<code>SourceSet</code>，所以在这些类中可以直接使用所谓的 <code>namespace method</code> 动态新增新属性。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Extensions are just plain objects, there is no interface/type</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyExtension</span> &#123;</span></span><br><span class="line">  String foo</span><br><span class="line"></span><br><span class="line">  MyExtension(String foo) &#123;</span><br><span class="line">    <span class="keyword">this</span>.foo = foo</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add new extensions via the extension container</span></span><br><span class="line">project.extensions.create(<span class="string">'custom'</span>, MyExtension, <span class="string">"bar"</span>)</span><br><span class="line"><span class="comment">//                       («name»,   «type»,       «constructor args», …)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// extensions appear as properties on the target object by the given name</span></span><br><span class="line"><span class="keyword">assert</span> project.custom <span class="keyword">instanceof</span> MyExtension</span><br><span class="line"><span class="keyword">assert</span> project.custom.foo == <span class="string">"bar"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// also via a namespace method</span></span><br><span class="line">project.custom &#123;</span><br><span class="line">  <span class="keyword">assert</span> foo == <span class="string">"bar"</span></span><br><span class="line">  foo = <span class="string">"other"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">assert</span> project.custom.foo == <span class="string">"other"</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Q-amp-A&quot;&gt;&lt;a href=&quot;#Q-amp-A&quot; class=&quot;headerlink&quot; title=&quot;Q&amp;amp;A&quot;&gt;&lt;/a&gt;Q&amp;amp;A&lt;/h2&gt;&lt;h3 id=&quot;Gradle-中的-ext-究竟是什么？&quot;&gt;&lt;a href=&quot;#Gradle-中的-ext
      
    
    </summary>
    
      <category term="it" scheme="https://linlshare.github.io/categories/it/"/>
    
      <category term="tool" scheme="https://linlshare.github.io/categories/it/tool/"/>
    
    
      <category term="Groovy" scheme="https://linlshare.github.io/tags/Groovy/"/>
    
  </entry>
  
  <entry>
    <title>Quartz</title>
    <link href="https://linlshare.github.io/2018/12/03/it/java/schedule/Quartz/"/>
    <id>https://linlshare.github.io/2018/12/03/it/java/schedule/Quartz/</id>
    <published>2018-12-03T02:49:29.000Z</published>
    <updated>2018-12-03T04:34:20.428Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Quartz-是什么？"><a href="#Quartz-是什么？" class="headerlink" title="Quartz 是什么？"></a>Quartz 是什么？</h2><p><a href="https://github.com/quartz-scheduler/quartz" target="_blank" rel="noopener">Quartz</a> 是一款 Java 平台上开源的任务调度器。</p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="（1）引入依赖"><a href="#（1）引入依赖" class="headerlink" title="（1）引入依赖"></a>（1）引入依赖</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="string">"org.quartz-scheduler:quartz:2.3.0"</span></span><br><span class="line">compile <span class="string">"org.quartz-scheduler:quartz-jobs:2.3.0"</span></span><br></pre></td></tr></table></figure><h3 id="（2）初始化"><a href="#（2）初始化" class="headerlink" title="（2）初始化"></a>（2）初始化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从工厂中获取 Scheduler 对象</span></span><br><span class="line">Scheduler scheduler = StdSchedulerFactory.getDefaultScheduler();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动</span></span><br><span class="line">scheduler.start();</span><br></pre></td></tr></table></figure><h3 id="（3）新建一个-Job"><a href="#（3）新建一个-Job" class="headerlink" title="（3）新建一个 Job"></a>（3）新建一个 Job</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJob</span> <span class="keyword">implements</span> <span class="title">Job</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(JobExecutionContext context)</span> <span class="keyword">throws</span> JobExecutionException </span>&#123;</span><br><span class="line">    System.err.println(<span class="string">"Hello World!  TestJob is executing."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（4）调度一个-Job"><a href="#（4）调度一个-Job" class="headerlink" title="（4）调度一个 Job"></a>（4）调度一个 Job</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加 Job 的携带数据</span></span><br><span class="line">JobDetail job = newJob(TestJob.class).withIdentity(<span class="string">"job1"</span>, <span class="string">"group1"</span>).build();</span><br><span class="line"><span class="comment">// 新建一个触发器</span></span><br><span class="line">Trigger trigger = newTrigger().withIdentity(<span class="string">"trigger1"</span>, <span class="string">"group1"</span>)</span><br><span class="line">    .startNow()</span><br><span class="line">    .withSchedule(simpleSchedule().withIntervalInSeconds(<span class="number">5</span>)</span><br><span class="line">                  .repeatForever())</span><br><span class="line">    .build();</span><br><span class="line"><span class="comment">// 开始调度</span></span><br><span class="line">scheduler.scheduleJob(job, trigger);</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="http://www.quartz-scheduler.org/documentation/quartz-2.2.x/quick-start.html" target="_blank" rel="noopener">quartz-2.2.x/quick-start</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Quartz-是什么？&quot;&gt;&lt;a href=&quot;#Quartz-是什么？&quot; class=&quot;headerlink&quot; title=&quot;Quartz 是什么？&quot;&gt;&lt;/a&gt;Quartz 是什么？&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/quartz
      
    
    </summary>
    
      <category term="it" scheme="https://linlshare.github.io/categories/it/"/>
    
      <category term="java" scheme="https://linlshare.github.io/categories/it/java/"/>
    
      <category term="schedule" scheme="https://linlshare.github.io/categories/it/java/schedule/"/>
    
    
      <category term="Quartz" scheme="https://linlshare.github.io/tags/Quartz/"/>
    
  </entry>
  
  <entry>
    <title>CompletableFuture</title>
    <link href="https://linlshare.github.io/2018/12/03/it/java/schedule/CompletableFuture/"/>
    <id>https://linlshare.github.io/2018/12/03/it/java/schedule/CompletableFuture/</id>
    <published>2018-12-03T02:49:29.000Z</published>
    <updated>2018-12-03T02:49:59.457Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="it" scheme="https://linlshare.github.io/categories/it/"/>
    
      <category term="java" scheme="https://linlshare.github.io/categories/it/java/"/>
    
      <category term="schedule" scheme="https://linlshare.github.io/categories/it/java/schedule/"/>
    
    
      <category term="CompletableFuture" scheme="https://linlshare.github.io/tags/CompletableFuture/"/>
    
  </entry>
  
  <entry>
    <title>ZooKeeper</title>
    <link href="https://linlshare.github.io/2018/11/29/it/java/base/ZooKeeper/"/>
    <id>https://linlshare.github.io/2018/11/29/it/java/base/ZooKeeper/</id>
    <published>2018-11-29T04:10:22.000Z</published>
    <updated>2018-11-29T04:10:26.666Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="it" scheme="https://linlshare.github.io/categories/it/"/>
    
      <category term="java" scheme="https://linlshare.github.io/categories/it/java/"/>
    
      <category term="base" scheme="https://linlshare.github.io/categories/it/java/base/"/>
    
    
      <category term="IT" scheme="https://linlshare.github.io/tags/IT/"/>
    
      <category term="ZooKeeper" scheme="https://linlshare.github.io/tags/ZooKeeper/"/>
    
  </entry>
  
  <entry>
    <title>服务发现</title>
    <link href="https://linlshare.github.io/2018/11/28/it/concept/%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0/"/>
    <id>https://linlshare.github.io/2018/11/28/it/concept/服务发现/</id>
    <published>2018-11-28T14:29:25.000Z</published>
    <updated>2018-11-28T15:12:30.622Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是服务发现？"><a href="#什么是服务发现？" class="headerlink" title="什么是服务发现？"></a>什么是服务发现？</h2><p>服务发现，Service Discovery，是<strong>一项提供服务发布和查找的服务</strong>，其实质就是<strong>键值存储</strong>，通过键（Key，在当前语境应是服务名）找到值（Value，在当前语境是服务）。DNS 就是一个简单的例子，人们或其他服务使用域名向 DNS 请求 IP 地址，Key 就是域名，Value 就是 IP 地址。</p><p>服务发现是支持大规模 SOA（service-oriented architecture）的核心服务，需具备以下关键特性：</p><ol><li>注册（Registration），新增服务到服务列表；</li><li>目录（Directory），即服务列表；</li><li>查找（Lookup），通过服务名找到服务。</li></ol><p>服务元数据（metadata，包括服务的 IP、端口、提供的服务等等信息）存储是服务发现的关键。</p><p>服务发现还需<strong>提供查询所有服务的部署状态和集中控制所有服务实例的方式</strong>。</p><h2 id="服务发现解决方案"><a href="#服务发现解决方案" class="headerlink" title="服务发现解决方案"></a>服务发现解决方案</h2><table><thead><tr><th>解决方案</th><th>特性</th><th>发起人</th></tr></thead><tbody><tr><td>Redis</td><td>用 Redis 作为服务中介是最简单的，但不适用于分布式系统，不具备下面的解决方案的优点</td><td>无</td></tr><tr><td>ZooKeeper</td><td>提供了包括配置管理、领导人选举和分布式锁在内的完整解决方案</td><td>Apache</td></tr><tr><td>etcd</td><td>与 ZooKeeper 具有相似的架构和功能</td><td>CoreOS</td></tr><tr><td>doozerd</td><td>与 ZooKeeper 具有相似的架构和功能</td><td>Blake Mizerany &amp; Keith Rarick</td></tr><tr><td>Consul</td><td>提供了 DNS 和 HTTP 两种 API</td><td>Hashicorp</td></tr><tr><td>Eureka</td><td>在出现网络分区时， Eureka 选择可用性，而不是一致性，适合 AP( Availability and Partition ) 系统。</td><td>Netflix</td></tr></tbody></table><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="http://dockone.io/article/509" target="_blank" rel="noopener">六个问题带你了解服务发现 - dockone.io</a></li><li><a href="https://highops.com/insights/service-discovery-6-questions-to-4-experts/" target="_blank" rel="noopener">Service Discovery: 6 questions to 4 experts - highops.com</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是服务发现？&quot;&gt;&lt;a href=&quot;#什么是服务发现？&quot; class=&quot;headerlink&quot; title=&quot;什么是服务发现？&quot;&gt;&lt;/a&gt;什么是服务发现？&lt;/h2&gt;&lt;p&gt;服务发现，Service Discovery，是&lt;strong&gt;一项提供服务发布和查找的服务
      
    
    </summary>
    
      <category term="it" scheme="https://linlshare.github.io/categories/it/"/>
    
      <category term="concept" scheme="https://linlshare.github.io/categories/it/concept/"/>
    
    
      <category term="IT" scheme="https://linlshare.github.io/tags/IT/"/>
    
      <category term="服务发现" scheme="https://linlshare.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>分布式与集群</title>
    <link href="https://linlshare.github.io/2018/11/28/it/concept/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%8E%E9%9B%86%E7%BE%A4/"/>
    <id>https://linlshare.github.io/2018/11/28/it/concept/分布式与集群/</id>
    <published>2018-11-28T14:09:37.000Z</published>
    <updated>2018-11-28T14:28:59.285Z</updated>
    
    <content type="html"><![CDATA[<h2 id="分布式与集群的区别（Distributed-vs-Cluster）"><a href="#分布式与集群的区别（Distributed-vs-Cluster）" class="headerlink" title="分布式与集群的区别（Distributed vs Cluster）"></a>分布式与集群的区别（Distributed vs Cluster）</h2><blockquote><p>分布式：一个业务分拆多个子业务，部署在不同的服务器上。</p><p>集群：同一个业务，部署在多个服务器上。</p><p>— <a href="https://www.zhihu.com/question/20004877/answer/26076092" target="_blank" rel="noopener">分布式与集群的区别是什么？ - 知乎用户的回答 - 知乎</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;分布式与集群的区别（Distributed-vs-Cluster）&quot;&gt;&lt;a href=&quot;#分布式与集群的区别（Distributed-vs-Cluster）&quot; class=&quot;headerlink&quot; title=&quot;分布式与集群的区别（Distributed vs C
      
    
    </summary>
    
      <category term="it" scheme="https://linlshare.github.io/categories/it/"/>
    
      <category term="concept" scheme="https://linlshare.github.io/categories/it/concept/"/>
    
    
      <category term="IT" scheme="https://linlshare.github.io/tags/IT/"/>
    
      <category term="分布式" scheme="https://linlshare.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
      <category term="集群" scheme="https://linlshare.github.io/tags/%E9%9B%86%E7%BE%A4/"/>
    
  </entry>
  
  <entry>
    <title>Logback</title>
    <link href="https://linlshare.github.io/2018/11/28/it/java/base/Logback/"/>
    <id>https://linlshare.github.io/2018/11/28/it/java/base/Logback/</id>
    <published>2018-11-28T06:35:54.000Z</published>
    <updated>2018-11-28T13:55:26.697Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Logback-是什么？"><a href="#Logback-是什么？" class="headerlink" title="Logback 是什么？"></a>Logback 是什么？</h2><p>Logback 是一个 Java 平台上的日志框架，是 log4j 的加强版本，目前分为以下模块：</p><ol><li>logback-core，放置为下面两个模块服务的基础代码；</li><li>logback-classic，log4j 的加强版本，实现了 SLF4J API，以便于切换其他日志框架；</li><li>logback-access，与 Servlet 容器集成，提供 HTTP 访问日志功能。</li></ol><blockquote><p>SLF4J：The Simple Logging Facade for Java（简单日志门面抽象框架），提供的是日志的 Facade API，需要配合 Log4j、Logback 或 java.util.logging 使用。</p></blockquote><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><p>（1）引入依赖</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="string">"org.slf4j:slf4j-api:1.7.+"</span></span><br><span class="line">compile <span class="string">"ch.qos.logback:logback-core:1.2.+"</span></span><br><span class="line">compile <span class="string">"ch.qos.logback:logback-classic:1.2.+"</span></span><br></pre></td></tr></table></figure><p>（2）编写 <code>logback.xml</code> 并放置到 <code>resources</code> 文件夹中</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">  &lt;appender name=<span class="string">"STDOUT"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span><br><span class="line">    &lt;encoder&gt;</span><br><span class="line">      &lt;pattern&gt;%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n&lt;/pattern&gt;</span><br><span class="line">    &lt;/encoder&gt;</span><br><span class="line">  &lt;/appender&gt;</span><br><span class="line">  &lt;root level=<span class="string">"DEBUG"</span>&gt;          </span><br><span class="line">    &lt;appender-ref ref=<span class="string">"STDOUT"</span> /&gt;</span><br><span class="line">  &lt;/root&gt;  </span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><p>（3）在代码中使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Logger LOGGER = LoggerFactory.getLogger(Main.class);</span><br><span class="line">LOGGER.debug(<span class="string">"Hello, Logback"</span>);</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://logback.qos.ch/" target="_blank" rel="noopener">Logback Project - logback.qos.ch</a></li><li><a href="https://segmentfault.com/a/1190000004693427" target="_blank" rel="noopener">LogBack 入门实践</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Logback-是什么？&quot;&gt;&lt;a href=&quot;#Logback-是什么？&quot; class=&quot;headerlink&quot; title=&quot;Logback 是什么？&quot;&gt;&lt;/a&gt;Logback 是什么？&lt;/h2&gt;&lt;p&gt;Logback 是一个 Java 平台上的日志框架，是 lo
      
    
    </summary>
    
      <category term="it" scheme="https://linlshare.github.io/categories/it/"/>
    
      <category term="java" scheme="https://linlshare.github.io/categories/it/java/"/>
    
      <category term="base" scheme="https://linlshare.github.io/categories/it/java/base/"/>
    
    
      <category term="Java" scheme="https://linlshare.github.io/tags/Java/"/>
    
      <category term="IT" scheme="https://linlshare.github.io/tags/IT/"/>
    
      <category term="Logback" scheme="https://linlshare.github.io/tags/Logback/"/>
    
  </entry>
  
  <entry>
    <title>zsh</title>
    <link href="https://linlshare.github.io/2018/11/28/it/tool/zsh/"/>
    <id>https://linlshare.github.io/2018/11/28/it/tool/zsh/</id>
    <published>2018-11-28T03:55:54.000Z</published>
    <updated>2018-11-28T03:55:59.545Z</updated>
    
    <content type="html"><![CDATA[<h3 id="禁止粘贴命令时自动对特殊字符进行转义"><a href="#禁止粘贴命令时自动对特殊字符进行转义" class="headerlink" title="禁止粘贴命令时自动对特殊字符进行转义"></a>禁止粘贴命令时自动对特殊字符进行转义</h3><p>（1）编辑 <code>misc.zsh</code> 文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim  ~/.oh-my-zsh/lib/misc.zsh</span><br></pre></td></tr></table></figure><p>（2）注释掉 <code>url-quote-magic</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#if [[ $ZSH_VERSION != 5.1.1 ]]; then</span><br><span class="line">#  for d in $fpath; do</span><br><span class="line">#       if [[ -e &quot;$d/url-quote-magic&quot; ]]; then</span><br><span class="line">#               if is-at-least 5.1; then</span><br><span class="line">#                       autoload -Uz bracketed-paste-magic</span><br><span class="line">#                       zle -N bracketed-paste bracketed-paste-magic</span><br><span class="line">#               fi</span><br><span class="line">#               autoload -Uz url-quote-magic</span><br><span class="line">#               zle -N self-insert url-quote-magic</span><br><span class="line">#      break</span><br><span class="line">#       fi</span><br><span class="line">#  done</span><br><span class="line">#fi</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;禁止粘贴命令时自动对特殊字符进行转义&quot;&gt;&lt;a href=&quot;#禁止粘贴命令时自动对特殊字符进行转义&quot; class=&quot;headerlink&quot; title=&quot;禁止粘贴命令时自动对特殊字符进行转义&quot;&gt;&lt;/a&gt;禁止粘贴命令时自动对特殊字符进行转义&lt;/h3&gt;&lt;p&gt;（1）编辑 
      
    
    </summary>
    
      <category term="it" scheme="https://linlshare.github.io/categories/it/"/>
    
      <category term="tool" scheme="https://linlshare.github.io/categories/it/tool/"/>
    
    
      <category term="zsh" scheme="https://linlshare.github.io/tags/zsh/"/>
    
  </entry>
  
  <entry>
    <title>Docker</title>
    <link href="https://linlshare.github.io/2018/11/27/it/tool/Docker/"/>
    <id>https://linlshare.github.io/2018/11/27/it/tool/Docker/</id>
    <published>2018-11-27T09:47:54.000Z</published>
    <updated>2018-11-30T13:07:31.210Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker-是什么？"><a href="#Docker-是什么？" class="headerlink" title="Docker 是什么？"></a>Docker 是什么？</h2><p><a href="https://github.com/moby/moby" target="_blank" rel="noopener">Docker</a> 是一种虚拟化的容器，<strong>隔离了文件系统、网络互联和进程</strong>等等，但比之传统的虚拟化技术，精简了内核和硬件的虚拟，容器内的应用进程直接运行在宿主内核。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h3><p><strong>（1）Homebrew 安装</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> brew cask install docker</span><br></pre></td></tr></table></figure><p><strong>（2）下载安装</strong></p><p><a href="https://download.docker.com/mac/stable/Docker.dmg" target="_blank" rel="noopener">Docker.dmg 下载</a></p><h3 id="检查安装情况"><a href="#检查安装情况" class="headerlink" title="检查安装情况"></a>检查安装情况</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> docker --version</span><br><span class="line"><span class="meta">&gt;</span> docker-compose --version</span><br><span class="line"><span class="meta">&gt;</span> docker-machine --version</span><br></pre></td></tr></table></figure><h3 id="使用镜像加速器"><a href="#使用镜像加速器" class="headerlink" title="使用镜像加速器"></a>使用镜像加速器</h3><p>鉴于国内的网络情况，拉取镜像会很慢，这时候需要配置镜像加速器，使用国内的镜像服务器。</p><p><strong>国内的镜像服务器地址</strong>：    <a href="https://registry.docker-cn.com。" target="_blank" rel="noopener">https://registry.docker-cn.com。</a></p><p><strong>配置方式</strong>：对于使用 Docker 客户端的用户，依次点击 <code>Docker 图标 --&gt; Settings/ Perferences --&gt; Daemon --&gt; Registry mirrors</code>，输入加速器地址，然后点击 Apply &amp; Restart 即可。</p><p><strong>检查配置是否生效</strong>：执行 <code>docker info</code> 查看 <code>Registry Mirrors</code> 字段的值。</p><h2 id="快速开始：启动一个-Nginx-服务器"><a href="#快速开始：启动一个-Nginx-服务器" class="headerlink" title="快速开始：启动一个 Nginx 服务器"></a>快速开始：启动一个 Nginx 服务器</h2><p>（1）安装并启动一个 Nginx 服务器，将本地的 8080 端口映射到 Docker 的 80 端口。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> docker run -d -p 8080:80 --name webserver nginx</span><br></pre></td></tr></table></figure><p>（2）通过 <code>docker ps</code> 查看运行中的 docker 容器列表。</p><p>（3）通过 <code>http://localhost:8080</code> 即可正常访问。</p><p>（4）停止 Nginx 服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> docker stop webserver</span><br></pre></td></tr></table></figure><p>（4）从 Docker 中删除 Nginx 服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> docker rm webserver</span><br></pre></td></tr></table></figure><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="镜像（Image）"><a href="#镜像（Image）" class="headerlink" title="镜像（Image）"></a>镜像（Image）</h3><p>虚拟概念，并非一个 ISO 的压缩文件，而是使用 Union FS 分层存储技术存储的多层文件系统联合组成，存放的是 <code>root</code> 文件系统，包括容器运行时所需的程序、库、资源、配置等文件，但不包含动态数据。</p><h3 id="容器（Container）"><a href="#容器（Container）" class="headerlink" title="容器（Container）"></a>容器（Container）</h3><p>容器是镜像运行时的实体，实质就是一个个的 Docker 进程，可以对 Docker 进程进行如下操作：</p><ul><li>创建</li><li>启动</li><li>停止</li><li>删除</li><li>暂停</li></ul><p>容器也采用分层存储，容器运行时，以镜像为基础层，在其上创建一个当前容器的存储层，称之为容器存储层。容器存储层的生命周期与容器同步，故不应向存储层写入任何数据，所有的文件写入操作，都应<strong>使用数据卷（Volume）或者绑定宿主目录</strong>。</p><h3 id="Registry"><a href="#Registry" class="headerlink" title="Registry"></a>Registry</h3><p>用来集中存储和分发 Docker 镜像的服务，一个 Registry 可以包含多个仓库（Repository），每个仓库可以包含多个标签（Tag），每个标签对应一个镜像。</p><p>常用的 Public Registry 列表：</p><ol><li><a href="https://hub.docker.com/" target="_blank" rel="noopener">Docker Hub</a></li><li><a href="https://quay.io/repository/" target="_blank" rel="noopener">Quay.io</a></li><li><a href="https://cloud.google.com/container-registry/" target="_blank" rel="noopener">Google Container Registry</a></li><li><a href="https://c.163.com/hub#/m/library/" target="_blank" rel="noopener">网易云镜像服务</a></li><li><a href="https://hub.daocloud.io/" target="_blank" rel="noopener">DaoCloud 镜像市场</a></li><li><a href="https://cr.console.aliyun.com/" target="_blank" rel="noopener">阿里云镜像库</a> </li><li><a href="https://hub.tenxcloud.com/" target="_blank" rel="noopener">时速云镜像仓库</a></li></ol><p>国内针对 Docker Hub 的镜像服务（加速器）有：</p><ol><li><a href="https://cr.console.aliyun.com/#/accelerator" target="_blank" rel="noopener">阿里云加速器</a></li><li><a href="https://www.daocloud.io/mirror#accelerator-doc" target="_blank" rel="noopener">DaoCloud 加速器</a></li></ol><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><h3 id="镜像相关"><a href="#镜像相关" class="headerlink" title="镜像相关"></a>镜像相关</h3><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>docker images</td><td>列出所有拉取的镜像</td></tr><tr><td>docker inspect [name]</td><td>检视镜像的详细信息</td></tr><tr><td>docker rmi [REPOSITORY]:[TAG]</td><td>删除镜像</td></tr><tr><td>docker pull [name]</td><td>拉取镜像</td></tr></tbody></table><h3 id="容器相关"><a href="#容器相关" class="headerlink" title="容器相关"></a>容器相关</h3><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>docker ps -a</td><td>列出所有容器及其状态</td></tr><tr><td>docker ps</td><td>列出所有运行中的容器</td></tr><tr><td>docker  rm [容器 ID]</td><td>删除容器</td></tr><tr><td>docker crate -it [镜像标签或镜像 ID]</td><td>新建一个容器</td></tr><tr><td>docker start [容器 ID]</td><td>运行处于终止状态的容器</td></tr><tr><td>docker kill [容器 ID]</td><td>强制终止容器</td></tr><tr><td>docker kill [容器 ID]</td><td>停止容器</td></tr><tr><td>docker restart [容器 ID]</td><td>重启一个容器</td></tr><tr><td>docker logs [容器ID]</td><td>查看容器日志</td></tr></tbody></table><h3 id="更进一步"><a href="#更进一步" class="headerlink" title="更进一步"></a>更进一步</h3><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>docker exec -ti [容器ID] /bin/bash</td><td>进入具体容器中运行交互命令</td></tr><tr><td>docker exec [容器 ID 或容器 name] 具体命令</td><td>直接执行具体容器的命令</td></tr></tbody></table><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><p>Dockerfile 用来定制镜像，是一组指令，描述如何在基础镜像中一步步构建自定义的镜像。下面以修改 nginx 服务器首页为例：</p><p>（1）新建名为 <code>Dockerfile</code> 的文件，内容如下：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> nginx</span><br><span class="line"><span class="keyword">RUN</span> echo '&lt;h1&gt;Hello, Docker!&lt;/h1&gt;' &gt; /usr/share/nginx/html/index.html</span><br></pre></td></tr></table></figure><p>（2）使用 <code>docker build</code> 开始构建</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 确保在 Dockerfile 所在的目录下执行该命令，</span><br><span class="line"><span class="meta">#</span> 否则需要使用 `-f [file_name]` 指定 Dockerfile</span><br><span class="line"><span class="meta">#</span> 使用 `-t [name:tag]` 指定镜像的名称和标签</span><br><span class="line">docker build -t nginx:v3</span><br></pre></td></tr></table></figure><h3 id="命令解析"><a href="#命令解析" class="headerlink" title="命令解析"></a>命令解析</h3><h4 id="（1）FROM"><a href="#（1）FROM" class="headerlink" title="（1）FROM"></a>（1）FROM</h4><p>指定基础镜像。</p><h4 id="（2）RUN"><a href="#（2）RUN" class="headerlink" title="（2）RUN"></a>（2）RUN</h4><p>执行命令行命令，支持 shell 格式和 exec 格式。</p><blockquote><p>注意：Dockerfile 每个指令都会建立一层，Union FS 有最大层数限制。多个命令行指令可以使用 <code>&amp;&amp;</code> 串联。</p></blockquote><h2 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h2><p><a href="https://github.com/docker/compose" target="_blank" rel="noopener">Docker Compose</a> 是 Docker 官方的开源项目之一，用来快速地部署分布式应用。官方定位是「<strong>定义和运行多个 Docker 容器的应用</strong>（Defining and running multi-container Docker applications）」。衍生概念有：</p><ol><li>服务（Service）, 一个 Docker 容器称之为一个服务；</li><li>项目（Project），一个 Compose，或者说一组相关联的服务，称之为一个项目 。</li></ol><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p>Docker Compose 在 Docker 客户端中已经包含，可以直接使用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 检查是否可用</span><br><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure><h3 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h3><p>（1）使用 <code>Dockerfile</code> 定义应用的环境；</p><p>（2）使用 <code>docker-compose.yml</code> 定义组成应用的各项服务；</p><p>（2）执行 <code>docker-compose up</code> 进行部署。</p><h2 id="排错"><a href="#排错" class="headerlink" title="排错"></a>排错</h2><h3 id="Error-Cannot-Start-Container-stat-bin-sh-no-such-file-or-directory”"><a href="#Error-Cannot-Start-Container-stat-bin-sh-no-such-file-or-directory”" class="headerlink" title="Error: Cannot Start Container: stat /bin/sh: no such file or directory”"></a>Error: Cannot Start Container: stat /bin/sh: no such file or directory”</h3><p>（1）使用 <code>docker inspect</code>  检视镜像的 <code>Cmd</code> 选项；</p><p>（2）如果 <code>Cmd</code> 中不包含 <code>/bin/sh</code> 那意味着可能被你重写了。</p><h3 id="Run-container-but-exited-immediately"><a href="#Run-container-but-exited-immediately" class="headerlink" title="Run container but exited immediately"></a>Run container but exited immediately</h3><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://legacy.gitbook.com/book/yeasy/docker_practice/details" target="_blank" rel="noopener">Docker – 从入门到实践</a>（绝佳的入门文档）</li><li><a href="https://github.com/docker-library/docs" target="_blank" rel="noopener">docker-library/docs - Github</a> （docker 官方镜像的使用文档）</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Docker-是什么？&quot;&gt;&lt;a href=&quot;#Docker-是什么？&quot; class=&quot;headerlink&quot; title=&quot;Docker 是什么？&quot;&gt;&lt;/a&gt;Docker 是什么？&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/moby/m
      
    
    </summary>
    
      <category term="it" scheme="https://linlshare.github.io/categories/it/"/>
    
      <category term="tool" scheme="https://linlshare.github.io/categories/it/tool/"/>
    
    
      <category term="Docker" scheme="https://linlshare.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>etcd</title>
    <link href="https://linlshare.github.io/2018/11/27/it/java/base/etcd/"/>
    <id>https://linlshare.github.io/2018/11/27/it/java/base/etcd/</id>
    <published>2018-11-27T06:17:35.000Z</published>
    <updated>2018-11-30T14:54:23.750Z</updated>
    
    <content type="html"><![CDATA[<h2 id="etcd-是什么？（What-is-etcd）"><a href="#etcd-是什么？（What-is-etcd）" class="headerlink" title="etcd 是什么？（What is etcd）"></a>etcd 是什么？（What is etcd）</h2><p>etcd 是一个一致的分布式可靠的键值存储技术。可被用来做配置共享和服务发现。</p><ul><li>开发语言：Go</li><li>共识算法：<a href="https://raft.github.io/" target="_blank" rel="noopener">Raft</a></li><li>命名来源：表示分布式的 <code>etc</code> 目录，发音为<code>/ˈɛtsiːdiː/</code>。</li><li>使用的端口：2.0 后，使用 2379 作为外部客户端通信，使用 2380 作为内部服务间通信。</li><li>发起团队：CoreOS</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="Mac-安装"><a href="#Mac-安装" class="headerlink" title="Mac 安装"></a>Mac 安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 安装</span><br><span class="line">brew install etcd</span><br><span class="line"><span class="meta">#</span> 验证安装</span><br><span class="line">etcd -version</span><br><span class="line">etcdctl -version</span><br></pre></td></tr></table></figure><h3 id="Docker-安装"><a href="#Docker-安装" class="headerlink" title="Docker 安装"></a>Docker 安装</h3><p>参考 <a href="https://coreos.com/etcd/docs/latest/v2/docker_guide.html" target="_blank" rel="noopener">Running etcd under Docker - CoreOS</a> 及 <a href="docker_practice/etcd/install">docker_practice/etcd/install</a> ：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 使用 host IP</span><br><span class="line">export ETCD_NODE1=127.0.0.1</span><br><span class="line"><span class="meta">#</span> 安装 etcd</span><br><span class="line">docker run --name etcd \</span><br><span class="line">    -p 2379:2379 \</span><br><span class="line">    -p 2380:2380 \</span><br><span class="line">    --volume=etcd-data:/etcd-data \</span><br><span class="line">    quay.io/coreos/etcd:latest \</span><br><span class="line">    /usr/local/bin/etcd \</span><br><span class="line">    --data-dir=/etcd-data --name node1 \</span><br><span class="line">    --initial-advertise-peer-urls http://$&#123;ETCD_NODE1&#125;:2380 --listen-peer-urls http://0.0.0.0:2380 \</span><br><span class="line">    --advertise-client-urls http://$&#123;ETCD_NODE1&#125;:2379 --listen-client-urls http://0.0.0.0:2379 \</span><br><span class="line">    --initial-cluster node1=http://$&#123;ETCD_NODE1&#125;:2380</span><br><span class="line"><span class="meta">#</span> 进入etcd 命令行交互</span><br><span class="line">docker exec -it etcd /bin/sh</span><br><span class="line"><span class="meta">#</span> 验证安装</span><br><span class="line">etcd -version</span><br><span class="line">etcdctl -version</span><br><span class="line"><span class="meta">#</span> 验证是否启动</span><br><span class="line">curl http://127.0.0.1:2379/version</span><br></pre></td></tr></table></figure><h3 id="Docker-Compose-快速部署"><a href="#Docker-Compose-快速部署" class="headerlink" title="Docker Compose 快速部署"></a>Docker Compose 快速部署</h3><p>参考 Docker Compose 的使用说明，编辑 <code>docker-compose.yml</code> 文件如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3.6"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  node1:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">quay.io/coreos/etcd</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="attr">      - node1-data:</span><span class="string">/etcd-data</span></span><br><span class="line"><span class="attr">    expose:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">2379</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">2380</span>      </span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="attr">      cluster_net:</span></span><br><span class="line"><span class="attr">        ipv4_address:</span> <span class="number">172.16</span><span class="number">.238</span><span class="number">.100</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">ETCDCTL_API=3</span></span><br><span class="line"><span class="attr">    command:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/usr/local/bin/etcd</span></span><br><span class="line"><span class="bullet">      -</span> <span class="bullet">--data-dir=/etcd-data</span></span><br><span class="line"><span class="bullet">      -</span> <span class="bullet">--name</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">node1</span></span><br><span class="line"><span class="bullet">      -</span> <span class="bullet">--initial-advertise-peer-urls</span></span><br><span class="line"><span class="attr">      - http:</span><span class="string">//172.16.238.100:2380</span></span><br><span class="line"><span class="bullet">      -</span> <span class="bullet">--listen-peer-urls</span></span><br><span class="line"><span class="attr">      - http:</span><span class="string">//0.0.0.0:2380</span></span><br><span class="line"><span class="bullet">      -</span> <span class="bullet">--advertise-client-urls</span></span><br><span class="line"><span class="attr">      - http:</span><span class="string">//172.16.238.100:2379</span></span><br><span class="line"><span class="bullet">      -</span> <span class="bullet">--listen-client-urls</span></span><br><span class="line"><span class="attr">      - http:</span><span class="string">//0.0.0.0:2379</span></span><br><span class="line"><span class="bullet">      -</span> <span class="bullet">--initial-cluster</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">node1=http://172.16.238.100:2380,node2=http://172.16.238.101:2380,node3=http://172.16.238.102:2380</span></span><br><span class="line"><span class="bullet">      -</span> <span class="bullet">--initial-cluster-state</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">new</span></span><br><span class="line"><span class="bullet">      -</span> <span class="bullet">--initial-cluster-token</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">docker-etcd</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  node2:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">quay.io/coreos/etcd</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="attr">      - node2-data:</span><span class="string">/etcd-data</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="attr">      cluster_net:</span></span><br><span class="line"><span class="attr">        ipv4_address:</span> <span class="number">172.16</span><span class="number">.238</span><span class="number">.101</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">ETCDCTL_API=3</span></span><br><span class="line"><span class="attr">    expose:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">2379</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">2380</span></span><br><span class="line"><span class="attr">    command:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/usr/local/bin/etcd</span></span><br><span class="line"><span class="bullet">      -</span> <span class="bullet">--data-dir=/etcd-data</span></span><br><span class="line"><span class="bullet">      -</span> <span class="bullet">--name</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">node2</span></span><br><span class="line"><span class="bullet">      -</span> <span class="bullet">--initial-advertise-peer-urls</span></span><br><span class="line"><span class="attr">      - http:</span><span class="string">//172.16.238.101:2380</span></span><br><span class="line"><span class="bullet">      -</span> <span class="bullet">--listen-peer-urls</span></span><br><span class="line"><span class="attr">      - http:</span><span class="string">//0.0.0.0:2380</span></span><br><span class="line"><span class="bullet">      -</span> <span class="bullet">--advertise-client-urls</span></span><br><span class="line"><span class="attr">      - http:</span><span class="string">//172.16.238.101:2379</span></span><br><span class="line"><span class="bullet">      -</span> <span class="bullet">--listen-client-urls</span></span><br><span class="line"><span class="attr">      - http:</span><span class="string">//0.0.0.0:2379</span></span><br><span class="line"><span class="bullet">      -</span> <span class="bullet">--initial-cluster</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">node1=http://172.16.238.100:2380,node2=http://172.16.238.101:2380,node3=http://172.16.238.102:2380</span></span><br><span class="line"><span class="bullet">      -</span> <span class="bullet">--initial-cluster-state</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">new</span></span><br><span class="line"><span class="bullet">      -</span> <span class="bullet">--initial-cluster-token</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">docker-etcd</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  node3:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">quay.io/coreos/etcd</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="attr">      - node3-data:</span><span class="string">/etcd-data</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="attr">      cluster_net:</span></span><br><span class="line"><span class="attr">        ipv4_address:</span> <span class="number">172.16</span><span class="number">.238</span><span class="number">.102</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">ETCDCTL_API=3</span></span><br><span class="line"><span class="attr">    expose:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">2379</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">2380</span></span><br><span class="line"><span class="attr">    command:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/usr/local/bin/etcd</span></span><br><span class="line"><span class="bullet">      -</span> <span class="bullet">--data-dir=/etcd-data</span></span><br><span class="line"><span class="bullet">      -</span> <span class="bullet">--name</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">node3</span></span><br><span class="line"><span class="bullet">      -</span> <span class="bullet">--initial-advertise-peer-urls</span></span><br><span class="line"><span class="attr">      - http:</span><span class="string">//172.16.238.102:2380</span></span><br><span class="line"><span class="bullet">      -</span> <span class="bullet">--listen-peer-urls</span></span><br><span class="line"><span class="attr">      - http:</span><span class="string">//0.0.0.0:2380</span></span><br><span class="line"><span class="bullet">      -</span> <span class="bullet">--advertise-client-urls</span></span><br><span class="line"><span class="attr">      - http:</span><span class="string">//172.16.238.102:2379</span></span><br><span class="line"><span class="bullet">      -</span> <span class="bullet">--listen-client-urls</span></span><br><span class="line"><span class="attr">      - http:</span><span class="string">//0.0.0.0:2379</span></span><br><span class="line"><span class="bullet">      -</span> <span class="bullet">--initial-cluster</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">node1=http://172.16.238.100:2380,node2=http://172.16.238.101:2380,node3=http://172.16.238.102:2380</span></span><br><span class="line"><span class="bullet">      -</span> <span class="bullet">--initial-cluster-state</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">new</span></span><br><span class="line"><span class="bullet">      -</span> <span class="bullet">--initial-cluster-token</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">docker-etcd</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="attr">  node1-data:</span></span><br><span class="line"><span class="attr">  node2-data:</span></span><br><span class="line"><span class="attr">  node3-data:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line"><span class="attr">  cluster_net:</span></span><br><span class="line"><span class="attr">    driver:</span> <span class="string">bridge</span></span><br><span class="line"><span class="attr">    ipam:</span></span><br><span class="line"><span class="attr">      driver:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">      config:</span></span><br><span class="line"><span class="bullet">      -</span></span><br><span class="line"><span class="attr">        subnet:</span> <span class="number">172.16</span><span class="number">.238</span><span class="number">.0</span><span class="string">/24</span></span><br></pre></td></tr></table></figure><h2 id="etcdctl-v3（主流）"><a href="#etcdctl-v3（主流）" class="headerlink" title="etcdctl v3（主流）"></a>etcdctl v3（主流）</h2><blockquote><p>Tip：可以通过 <code>ETCDCTL_API=3 etcdctl -h</code> 查看 v3 版本的命令行帮助页</p></blockquote><h4 id="（1）查看所有键值对"><a href="#（1）查看所有键值对" class="headerlink" title="（1）查看所有键值对"></a>（1）查看所有键值对</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 指定版本为 v3 且 key 前缀为空，也就是所有 key 了</span><br><span class="line">ETCDCTL_API=3 etcdctl get --prefix=true ""</span><br></pre></td></tr></table></figure><h2 id="etcdctl-v2（兼容）"><a href="#etcdctl-v2（兼容）" class="headerlink" title="etcdctl v2（兼容）"></a>etcdctl v2（兼容）</h2><blockquote><p>Tip：可以通过 <code>etcdctl -h</code> 查看 v2 版本的命令行帮助页</p></blockquote><h4 id="（1）set"><a href="#（1）set" class="headerlink" title="（1）set"></a>（1）set</h4><p>设置某个键的值，支持选项：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">--ttl '0'                该键值的超时时间（单位为秒），不配置（默认为 0）则永不超时</span><br><span class="line">--swap-with-value value  若该键现在的值是 value，则进行设置操作</span><br><span class="line">--swap-with-index '0'    若该键现在的索引值是指定索引，则进行设置操作</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">etcdctl set /testdir/testkey "Hello etcd"</span><br></pre></td></tr></table></figure><h4 id="（2）get"><a href="#（2）get" class="headerlink" title="（2）get"></a>（2）get</h4><p>获取指定键的值，支持选项：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--sort       对结果进行排序</span><br><span class="line">--consistent 将请求发给主节点，保证获取内容的一致性</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">etcdctl get /testdir/testkey</span><br></pre></td></tr></table></figure><h4 id="（3）update"><a href="#（3）update" class="headerlink" title="（3）update"></a>（3）update</h4><p>更新某个键的值，支持选项：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--ttl '0'    该键值的超时时间（单位为秒），不配置（默认为 0）则永不超时</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">etcdctl update /testdir/testkey "你好 etcd"</span><br></pre></td></tr></table></figure><h4 id="（4）rm"><a href="#（4）rm" class="headerlink" title="（4）rm"></a>（4）rm</h4><p>删除某个键，支持选项：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">--dir            删除空目录或键值对</span><br><span class="line">--recursive, -r  删除当前键及其子键(当为目录时)</span><br><span class="line">--with-value     当值匹配时删除</span><br><span class="line">--with-index '0' 当索引匹配时删除</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">etcdctl rm /testdir/testkey --with-value "Hello etcd"</span><br></pre></td></tr></table></figure><h4 id="（5）ls"><a href="#（5）ls" class="headerlink" title="（5）ls"></a>（5）ls</h4><p>列出目录（默认为根目录 <code>/</code>）下的键和子目录，默认不显示子目录中内容。支持选项：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">--sort         将输出结果排序</span><br><span class="line">--recursive    如果目录下有子目录，则递归输出其中的内容</span><br><span class="line">-p             对于输出为目录，在最后添加 / 进行区分</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">etcdctl ls -r -p</span><br></pre></td></tr></table></figure><h2 id="集群操作"><a href="#集群操作" class="headerlink" title="集群操作"></a>集群操作</h2><p>使用 <code>member</code> 命令进行 etcd 实例与集群的操作：</p><ol><li><code>list</code>  列出 etcd 集群中的所有实例</li><li><code>add</code> 添加 etcd 实例到集群中</li><li><code>remove</code>  从集群中删除 etcd 实例</li><li><code>update</code> 更新集群中的 etcd 实例</li></ol><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> v2</span><br><span class="line">etcdctl member list</span><br><span class="line"><span class="meta">#</span> v3</span><br><span class="line">ETCDCTL_API=3 etcdctl member list</span><br></pre></td></tr></table></figure><h2 id="HTTP-访问"><a href="#HTTP-访问" class="headerlink" title="HTTP 访问"></a>HTTP 访问</h2><h3 id="（1）查看版本"><a href="#（1）查看版本" class="headerlink" title="（1）查看版本"></a>（1）查看版本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://127.0.0.1:2379/version</span><br></pre></td></tr></table></figure><h3 id="（2）get-1"><a href="#（2）get-1" class="headerlink" title="（2）get"></a>（2）get</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://127.0.0.1:2379/v3/keys/testdir/testkey</span><br></pre></td></tr></table></figure><h2 id="参考（Reference）"><a href="#参考（Reference）" class="headerlink" title="参考（Reference）"></a>参考（Reference）</h2><ol><li><a href="https://github.com/etcd-io/etcd" target="_blank" rel="noopener">etcd-io/etcd - Github</a></li><li><a href="https://github.com/etcd-io/jetcd" target="_blank" rel="noopener">etcd-io/jetcd - Github</a></li><li><a href="https://etcd.readthedocs.io/en/latest/" target="_blank" rel="noopener">etcd Documentation</a></li><li><a href="https://ralphbupt.github.io/2017/05/04/etcd-%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/" target="_blank" rel="noopener">etcd 服务注册与发现</a></li><li><a href="https://tonydeng.github.io/2015/11/24/etcd-the-first-using/" target="_blank" rel="noopener">初试ETCD -  Tony Deng</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;etcd-是什么？（What-is-etcd）&quot;&gt;&lt;a href=&quot;#etcd-是什么？（What-is-etcd）&quot; class=&quot;headerlink&quot; title=&quot;etcd 是什么？（What is etcd）&quot;&gt;&lt;/a&gt;etcd 是什么？（What is
      
    
    </summary>
    
      <category term="it" scheme="https://linlshare.github.io/categories/it/"/>
    
      <category term="java" scheme="https://linlshare.github.io/categories/it/java/"/>
    
      <category term="base" scheme="https://linlshare.github.io/categories/it/java/base/"/>
    
    
      <category term="IT" scheme="https://linlshare.github.io/tags/IT/"/>
    
      <category term="ETCD" scheme="https://linlshare.github.io/tags/ETCD/"/>
    
  </entry>
  
  <entry>
    <title>设计模式</title>
    <link href="https://linlshare.github.io/2018/11/26/it/design/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>https://linlshare.github.io/2018/11/26/it/design/设计模式/</id>
    <published>2018-11-26T07:45:40.000Z</published>
    <updated>2018-11-27T07:05:45.339Z</updated>
    
    <content type="html"><![CDATA[<h3 id="策略模式（Strategy-Pattern）"><a href="#策略模式（Strategy-Pattern）" class="headerlink" title="策略模式（Strategy Pattern）"></a>策略模式（Strategy Pattern）</h3><h4 id="（1）适用场景"><a href="#（1）适用场景" class="headerlink" title="（1）适用场景"></a>（1）适用场景</h4><p>当解决问题的方法有多种方式，需要可替换时。</p><h4 id="（2）核心"><a href="#（2）核心" class="headerlink" title="（2）核心"></a>（2）核心</h4><p>使用组合，封装成一个个算法，即是策略。</p><h4 id="（3）类图"><a href="#（3）类图" class="headerlink" title="（3）类图"></a>（3）类图</h4><p><img src="/2018/11/26/it/design/设计模式/design_pattern_strtegy.jpg" alt=""></p><h3 id="抽象工厂模式（Abstract-Factory-Pattern）"><a href="#抽象工厂模式（Abstract-Factory-Pattern）" class="headerlink" title="抽象工厂模式（Abstract Factory Pattern）"></a>抽象工厂模式（Abstract Factory Pattern）</h3><h4 id="（1）适用场景-1"><a href="#（1）适用场景-1" class="headerlink" title="（1）适用场景"></a>（1）适用场景</h4><ol><li>产品有<strong>不同的提供商</strong>，不同的提供商提供不同品牌和风味的产品；</li><li>同一提供商有<strong>不同的流水线</strong>，不同的流水线生产不同的产品。</li></ol><h4 id="（2）核心-1"><a href="#（2）核心-1" class="headerlink" title="（2）核心"></a>（2）核心</h4><p>从创建开始就对产品进行了区分，生而不同。</p><h4 id="（3）类图-1"><a href="#（3）类图-1" class="headerlink" title="（3）类图"></a>（3）类图</h4><p><img src="/2018/11/26/it/design/设计模式/design_pattern-abstract factory.jpg" alt=""></p><h3 id="适配器模式（Adapter-Pattern）"><a href="#适配器模式（Adapter-Pattern）" class="headerlink" title="适配器模式（Adapter Pattern）"></a>适配器模式（Adapter Pattern）</h3><h4 id="（1）适用场景-2"><a href="#（1）适用场景-2" class="headerlink" title="（1）适用场景"></a>（1）适用场景</h4><p>将外部服务融合进内部而外部接口与现有服务不兼容（表现在命名、返回值、入参等不同），需要进行适配才能使用时。</p><h4 id="（2）核心-2"><a href="#（2）核心-2" class="headerlink" title="（2）核心"></a>（2）核心</h4><p>使用组合或者多继承，包装旧接口到包装类（或称为适配器）中。使用组合的称之为对象适配器，使用多继承的称之为类适配器。</p><h4 id="（3）类图-2"><a href="#（3）类图-2" class="headerlink" title="（3）类图"></a>（3）类图</h4><p><img src="/2018/11/26/it/design/设计模式/design_pattern-adapter-object.jpg" alt="对象适配器"></p><p><img src="/2018/11/26/it/design/设计模式/design_pattern-adapter-class.jpg" alt="类适配器"></p><h3 id="参考（Reference）"><a href="#参考（Reference）" class="headerlink" title="参考（Reference）"></a>参考（Reference）</h3><ol><li><a href="https://design-patterns.readthedocs.io/zh_CN/latest/index.html" target="_blank" rel="noopener">图说设计模式</a></li><li>Head First 设计模式</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;策略模式（Strategy-Pattern）&quot;&gt;&lt;a href=&quot;#策略模式（Strategy-Pattern）&quot; class=&quot;headerlink&quot; title=&quot;策略模式（Strategy Pattern）&quot;&gt;&lt;/a&gt;策略模式（Strategy Patter
      
    
    </summary>
    
      <category term="it" scheme="https://linlshare.github.io/categories/it/"/>
    
      <category term="design" scheme="https://linlshare.github.io/categories/it/design/"/>
    
    
      <category term="IT" scheme="https://linlshare.github.io/tags/IT/"/>
    
      <category term="设计模式" scheme="https://linlshare.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>广州生物岛摄影 20181124</title>
    <link href="https://linlshare.github.io/2018/11/24/photography/%E5%B9%BF%E5%B7%9E%E7%94%9F%E7%89%A9%E5%B2%9B%E6%91%84%E5%BD%B1%2020181124/"/>
    <id>https://linlshare.github.io/2018/11/24/photography/广州生物岛摄影 20181124/</id>
    <published>2018-11-24T14:00:12.000Z</published>
    <updated>2018-11-24T15:13:54.930Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th>KEY</th><th>VALUE</th></tr></thead><tbody><tr><td>地点</td><td>广州生物岛（官洲岛）</td></tr><tr><td>景点</td><td>水墨园、叠翠园、空旷的道路</td></tr><tr><td>时间</td><td>2018年 11月 24日 上午</td></tr><tr><td>气候</td><td>阳光明媚，温度 25°C</td></tr><tr><td>设备</td><td>Sony RX100 Ⅲ</td></tr><tr><td>主题</td><td>冬天在哪里？</td></tr><tr><td>照片数量</td><td>8/99</td></tr></tbody></table><h3 id="路（Road）"><a href="#路（Road）" class="headerlink" title="路（Road）"></a>路（Road）</h3><h4 id="（1）车道-人行道-水墨园"><a href="#（1）车道-人行道-水墨园" class="headerlink" title="（1）车道-人行道-水墨园"></a>（1）车道-人行道-水墨园</h4><p>生物岛的斑马线是黄白交替的，旁边有如红色地毯的自行车道，另外还有环岛的蓝色自行车道。</p><p><img src="/2018/11/24/photography/广州生物岛摄影 20181124/1.0 车道-人行道-水墨园.png" alt=""></p><table><thead><tr><th>PS</th><th>WHY</th></tr></thead><tbody><tr><td>增强了饱和度</td><td>拍摄时太亮，导致黄色和红色不明显</td></tr></tbody></table><h4 id="（2）竹林小道"><a href="#（2）竹林小道" class="headerlink" title="（2）竹林小道"></a>（2）竹林小道</h4><p>水墨园里有一片竹林，风吹竹曳，可以解暑气。</p><p><img src="/2018/11/24/photography/广州生物岛摄影 20181124/1.1 竹林小道.JPG" alt=""></p><table><thead><tr><th>PS</th><th>WHY</th></tr></thead><tbody><tr><td>无</td><td>无</td></tr></tbody></table><h4 id="（3）生锈的水栓-活动的机器人"><a href="#（3）生锈的水栓-活动的机器人" class="headerlink" title="（3）生锈的水栓 - 活动的机器人"></a>（3）生锈的水栓 - 活动的机器人</h4><p>路边看到一锈迹斑斑的水栓，看起来好似一活动的机器人正在分析路况。</p><p><img src="/2018/11/24/photography/广州生物岛摄影 20181124/1.2 生锈的水栓-活动的机器人.png" alt=""></p><table><thead><tr><th>PS</th><th>WHY</th></tr></thead><tbody><tr><td>增强了亮度</td><td>拍摄时逆光了</td></tr></tbody></table><h4 id="（4）清道夫的单车装备"><a href="#（4）清道夫的单车装备" class="headerlink" title="（4）清道夫的单车装备"></a>（4）清道夫的单车装备</h4><p>道路旁边放着一辆上了锁的单车，车篮放着一顶草帽，货架延伸出一个箩筐，放着扫帚之类的清道工具，装备齐全。</p><p><img src="/2018/11/24/photography/广州生物岛摄影 20181124/1.3 清道夫的单车装备.JPG" alt=""></p><table><thead><tr><th>PS</th><th>WHY</th></tr></thead><tbody><tr><td>无</td><td>无</td></tr></tbody></table><h3 id="水墨园（Shuimo-Park）"><a href="#水墨园（Shuimo-Park）" class="headerlink" title="水墨园（Shuimo Park）"></a>水墨园（Shuimo Park）</h3><h4 id="（1）建设-完工"><a href="#（1）建设-完工" class="headerlink" title="（1）建设-完工"></a>（1）建设-完工</h4><p>水墨园两边的建筑，一边还在雏形还没建好，一边已经完工了。</p><p><img src="/2018/11/24/photography/广州生物岛摄影 20181124/2.0 建设-完工.png" alt=""></p><table><thead><tr><th>PS</th><th>WHY</th></tr></thead><tbody><tr><td>一分为二，左边使用黑白+黄色色调处理，右边不做处理</td><td>增强建设中和完工的对比</td></tr></tbody></table><h4 id="（2）屏风-人家"><a href="#（2）屏风-人家" class="headerlink" title="（2）屏风 - 人家"></a>（2）屏风 - 人家</h4><p>水墨园里，接近别墅区的地方有一处做了屏风处理，感觉很是相宜。</p><p><img src="/2018/11/24/photography/广州生物岛摄影 20181124/2.1 屏风-人家.JPG" alt=""></p><table><thead><tr><th>PS</th><th>WHY</th></tr></thead><tbody><tr><td>无</td><td>无</td></tr></tbody></table><h4 id="（3）奇怪的建筑"><a href="#（3）奇怪的建筑" class="headerlink" title="（3）奇怪的建筑"></a>（3）奇怪的建筑</h4><p>水墨园旁边有一处奇怪的建筑，两边伸出像手臂一样的铁疙瘩，主体部分好像损毁的斗兽场，目前还在维护。</p><p><img src="/2018/11/24/photography/广州生物岛摄影 20181124/2.3 奇怪的建筑.JPG" alt=""></p><table><thead><tr><th>PS</th><th>WHY</th></tr></thead><tbody><tr><td>无</td><td>无</td></tr></tbody></table><h3 id="中国海警（Chinese-Maritime-Police）"><a href="#中国海警（Chinese-Maritime-Police）" class="headerlink" title="中国海警（Chinese Maritime Police）"></a>中国海警（Chinese Maritime Police）</h3><p>在水墨园偶然间听到军队嘹亮的歌声，往岛边一望，原来是中国海警舰艇的身影，穿着白色 T 恤，肩上有红蓝条纹，前额很尖。</p><p><img src="/2018/11/24/photography/广州生物岛摄影 20181124/3.0 中国海警.png" alt=""></p><table><thead><tr><th>PS</th><th>WHY</th></tr></thead><tbody><tr><td>增强了亮度</td><td>拍摄时逆光了</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;KEY&lt;/th&gt;
&lt;th&gt;VALUE&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;地点&lt;/td&gt;
&lt;td&gt;广州生物岛（官洲岛）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;景点&lt;/td&gt;
&lt;td&gt;水墨园、
      
    
    </summary>
    
      <category term="photography" scheme="https://linlshare.github.io/categories/photography/"/>
    
    
      <category term="摄影" scheme="https://linlshare.github.io/tags/%E6%91%84%E5%BD%B1/"/>
    
      <category term="生物岛" scheme="https://linlshare.github.io/tags/%E7%94%9F%E7%89%A9%E5%B2%9B/"/>
    
  </entry>
  
  <entry>
    <title>Guava Cache</title>
    <link href="https://linlshare.github.io/2018/11/23/it/java/guava/Guava%20Cache/"/>
    <id>https://linlshare.github.io/2018/11/23/it/java/guava/Guava Cache/</id>
    <published>2018-11-23T09:32:02.000Z</published>
    <updated>2018-11-23T12:19:39.990Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Guava-Cache-是做什么的？"><a href="#Guava-Cache-是做什么的？" class="headerlink" title="Guava Cache 是做什么的？"></a>Guava Cache 是做什么的？</h2><p>内存缓存，类似于 ConcurrentMap，支持自动缓存、缓存回收和缓存移除回调。</p><h2 id="两种加载方式"><a href="#两种加载方式" class="headerlink" title="两种加载方式"></a>两种加载方式</h2><h3 id="使用CacheLoader"><a href="#使用CacheLoader" class="headerlink" title="使用CacheLoader"></a>使用CacheLoader</h3><p>当有默认的加载或计算方式使用该方式。示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">LoadingCache&lt;Key, Value&gt; cache = CacheBuilder.newBuilder()</span><br><span class="line">    .maximumSize(<span class="number">1000</span>)</span><br><span class="line">    .expireAfterWrite(<span class="number">10</span>, TimeUnit.MINUTES)</span><br><span class="line">    .removalListener(MY_LISTENER)</span><br><span class="line">    .build(</span><br><span class="line">    <span class="keyword">new</span> CacheLoader&lt;Key, Value&gt;() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Value <span class="title">load</span><span class="params">(Key key)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> createExpensiveValue(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   cache.get(key);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ExecutionException e)&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> OtherException(e.getCause());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-Callable"><a href="#使用-Callable" class="headerlink" title="使用 Callable"></a>使用 Callable</h3><p>当没有默认加载运算，或者想要覆盖默认的加载运算，同时保留 “获取缓存 – 如果没有 – 则计算”（get-if-absent-compute）的原子语义时使用该方式。示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Cache&lt;Key, Value&gt; cache =  CacheBuilder.newBuilder()</span><br><span class="line">    .expireAfterWrite(<span class="number">1</span>,TimeUnit.MINUTES)</span><br><span class="line">    .removalListener(<span class="keyword">this</span>)</span><br><span class="line">    .build();</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="comment">// 1. get</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  cache.get(key, <span class="keyword">new</span> Callable&lt;Value&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Value <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> AnyException </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> doThingsTheHardWay(key);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> OtherException(e.getCause());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. getIfPresent</span></span><br><span class="line">cache.getIfPresent(key);</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://github.com/google/guava/wiki/CachesExplained" target="_blank" rel="noopener">CachesExplained - guava</a></li><li><a href="http://ifeve.com/google-guava-cachesexplained/" target="_blank" rel="noopener">[Google Guava] 3-缓存 - 并发编程网</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Guava-Cache-是做什么的？&quot;&gt;&lt;a href=&quot;#Guava-Cache-是做什么的？&quot; class=&quot;headerlink&quot; title=&quot;Guava Cache 是做什么的？&quot;&gt;&lt;/a&gt;Guava Cache 是做什么的？&lt;/h2&gt;&lt;p&gt;内存缓存，类
      
    
    </summary>
    
      <category term="it" scheme="https://linlshare.github.io/categories/it/"/>
    
      <category term="java" scheme="https://linlshare.github.io/categories/it/java/"/>
    
      <category term="guava" scheme="https://linlshare.github.io/categories/it/java/guava/"/>
    
    
      <category term="IT" scheme="https://linlshare.github.io/tags/IT/"/>
    
      <category term="Guava" scheme="https://linlshare.github.io/tags/Guava/"/>
    
      <category term="Cache" scheme="https://linlshare.github.io/tags/Cache/"/>
    
  </entry>
  
</feed>
