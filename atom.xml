<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>覽月維基</title>
  <icon>https://www.gravatar.com/avatar/67398ac80b713195e4e6faee10834ea3</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://linlshare.github.io/"/>
  <updated>2019-05-11T15:01:33.886Z</updated>
  <id>https://linlshare.github.io/</id>
  
  <author>
    <name>Lshare</name>
    <email>Lshare@outlook.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《人月神话》读后</title>
    <link href="https://linlshare.github.io/2019/05/11/it/pm/%E3%80%8A%E4%BA%BA%E6%9C%88%E7%A5%9E%E8%AF%9D%E3%80%8B%E8%AF%BB%E5%90%8E/"/>
    <id>https://linlshare.github.io/2019/05/11/it/pm/《人月神话》读后/</id>
    <published>2019-05-11T13:39:27.000Z</published>
    <updated>2019-05-11T15:01:33.886Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><h3 id="第一章-焦油坑"><a href="#第一章-焦油坑" class="headerlink" title="第一章 焦油坑"></a>第一章 焦油坑</h3><p>本章讲述了编程的产出以及编程的乐趣和苦恼。</p><p>编程的产出包含以下四种：</p><ol><li>程序，完整、可运行</li><li>编程产品，通用化、测试、文档和维护，成本是程序成本的 3 倍</li><li>编程系统，精心编制、IO 在语法和语义上与定义严格一致、符合预定义的资源限制等，成本是程序成本的 3 倍</li><li>编程系统产品，编程产品+编程系统，成本是程序成本的 9 倍</li></ol><p>编程的乐趣有：</p><ol><li>创造的快乐</li><li>利他的快乐</li><li>组装的快乐</li><li>持续学习的快乐</li><li>计算机的一致性确定性</li></ol><p>编程的苦恼有：</p><ol><li>编程不能有一丝疏忽</li><li>由他人制定目标、供给资源和提供信息</li><li>寻找琐碎的 bug</li><li>产品易于过时</li></ol><h3 id="第二章-人月神话"><a href="#第二章-人月神话" class="headerlink" title="第二章 人月神话"></a>第二章 人月神话</h3><p>本章指出软件项目进度滞后的原因是缺乏合理的进度安排，而缺乏合理的进度安排的原因是：</p><ol><li>对估算技术缺乏有效的研究，过于乐观主义</li><li>采用的估算技术不科学，将进度与工作量混淆，以为人月可互换</li><li>对估算缺乏信心，无法持续进行估算</li><li>对进度缺少跟踪和监督</li><li>当进度偏移时下意识地增加人力</li></ol><blockquote><p>用人月作为衡量一项工作的规模是一个危险和带有欺骗性的神话。 — 布鲁克斯(Brooks)</p></blockquote><p>这是因为，</p><ol><li>任务有先后次序</li><li>任务之间有相互沟通和交流的任务</li></ol><p>按照 Brooks 的经验，软件项目中的合理进度安排为：</p><blockquote><p>1/3 计划</p><p>1/6 编码</p><p>1/4 构建测试和早期系统测试</p><p>1/4 系统测试，所有的构件已完成</p></blockquote><p>可靠估算的基础是团队间共享的生产率图表、缺陷率图表和估算规则。</p><p>当项目进度落后时，再增加人手会使项目更加落后。因为增加的人手免不了培训和沟通的时间成本。</p><h3 id="第三章-外科手术队伍"><a href="#第三章-外科手术队伍" class="headerlink" title="第三章 外科手术队伍"></a>第三章 外科手术队伍</h3><p>本章在尝试解决这样的一个问题：如何高效地完成一个大型软件项目？</p><ol><li>系统应该由少数优秀程序员设计，因为优秀的程序员生产率高，少数能降低协作沟通成本，保证系统概念的完整性；</li><li>建立外科手术队伍。</li></ol><p>外科手术队伍由以下角色组成：</p><ol><li>外科医生，首席程序员，定义功能和性能技术说明书，设计程序，编制源代码，测试以及书写技术文档；</li><li>副手，作为设计的思考者、讨论者和评估人员；</li><li>管理员及其文秘，外科医生的老板，决定人员、薪酬和办公空间；</li><li>程序职员，维护编程产品库中所有团队的技术记录，包括运行情况存档；</li><li>工具维护人员，保证基本服务的可靠性；</li><li>测试人员，设计用例，设计调试数据，搭建测试平台；</li><li>编辑及其文秘，负责文档生成和版本维护；</li><li>语言专家，寻找一种简洁有效的使用语言的方法解决复杂、晦涩或棘手的问题。</li></ol><p>具体运作时要求：</p><ol><li>外科医生和副手要了解所有的设计和全部代码；</li><li>其余人按职能专业化分工，只需要简单而少量的交流成本。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h2&gt;&lt;h3 id=&quot;第一章-焦油坑&quot;&gt;&lt;a href=&quot;#第一章-焦油坑&quot; class=&quot;headerlink&quot; title=&quot;第一章 焦油坑&quot;&gt;&lt;/
      
    
    </summary>
    
      <category term="it" scheme="https://linlshare.github.io/categories/it/"/>
    
      <category term="pm" scheme="https://linlshare.github.io/categories/it/pm/"/>
    
    
      <category term="人月神话" scheme="https://linlshare.github.io/tags/%E4%BA%BA%E6%9C%88%E7%A5%9E%E8%AF%9D/"/>
    
      <category term="项目管理" scheme="https://linlshare.github.io/tags/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>ATM</title>
    <link href="https://linlshare.github.io/2019/05/10/word/ATM/"/>
    <id>https://linlshare.github.io/2019/05/10/word/ATM/</id>
    <published>2019-05-10T08:39:36.000Z</published>
    <updated>2019-05-10T08:40:11.660Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="https://en.wikipedia.org/wiki/Automated_teller_machine" target="_blank" rel="noopener">Automated teller machine</a>, a cash dispenser or cash machine</li><li><a href="https://en.wikipedia.org/wiki/Asynchronous_transfer_mode" target="_blank" rel="noopener">Asynchronous transfer mode</a>, a telecommunications protocol used in networking</li><li><a href="https://en.wikipedia.org/wiki/Atmosphere_(unit" target="_blank" rel="noopener">Atmosphere (unit)</a>) or atm, a unit of atmospheric pressure</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Automated_teller_machine&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Automated teller machine&lt;/a&gt;, a cas
      
    
    </summary>
    
      <category term="word" scheme="https://linlshare.github.io/categories/word/"/>
    
    
      <category term="ATM" scheme="https://linlshare.github.io/tags/ATM/"/>
    
  </entry>
  
  <entry>
    <title>ADSL ProxyPool</title>
    <link href="https://linlshare.github.io/2019/05/10/it/robot/ADSL%20ProxyPool/"/>
    <id>https://linlshare.github.io/2019/05/10/it/robot/ADSL ProxyPool/</id>
    <published>2019-05-10T07:12:24.000Z</published>
    <updated>2019-05-10T12:15:37.550Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><h3 id="ADSL-技术"><a href="#ADSL-技术" class="headerlink" title="ADSL 技术"></a>ADSL 技术</h3><p><strong>ADSL</strong> (<strong>A</strong>symmetric <strong>D</strong>igital <strong>S</strong>ubscriber <strong>L</strong>ine，非对称数字用户线路) 技术。</p><p>采用频分多路复用技术把普通电话线分成电话、上行和下行三个相对独立的信道，信道之间不会互相干扰。</p><p>技术局限：</p><ol><li>在不影响正常通话通信情况下，上行速度最高 3.5Mbps</li><li>在不影响正常通话通信情况下，下行速度最高 24Mbps</li><li>电信服务提供商接入设备和用户终端之间的距离不能超过 5 公里</li></ol><p>网络登录标准：</p><table><thead><tr><th>标准</th><th>含义</th><th>是否提供动态 IP</th></tr></thead><tbody><tr><td>STM</td><td>Synchronous Transport Module，同步传输模块</td><td>否</td></tr><tr><td>ATM</td><td>Asynchronous Transfer Mode，异步传输模式</td><td>否</td></tr><tr><td></td><td>Packet Transfer Mode (始于 ADSL 2版本，如下)</td><td></td></tr><tr><td>PPPoA</td><td><strong>P</strong>oint-to-<strong>P</strong>oint <strong>P</strong>rotocol <strong>o</strong>ver <strong>A</strong>TM，基于 ATM 的端对端协议</td><td>是</td></tr><tr><td>PPPoE</td><td><strong>P</strong>oint-to-<strong>P</strong>oint <strong>P</strong>rotocol <strong>o</strong>ver <strong>E</strong>thernet，基于以太网的端对端协议</td><td>是</td></tr></tbody></table><p>PPP，点对点协议：</p><p>工作在数据链路层，在两个节点之间创建直接的连接，并提供认证、传输加密和压缩功能。</p><p>PPP 应用：</p><ol><li>宽带接入，拨号接入，使用 PPPoE 和 PPPOA 协议解决 IP 报文在没有数据链路协议时在调制调节器线路传输的问题；</li><li>物理网络，包括串口线、电话线、移动电话和光纤等。</li></ol><blockquote><p>宽带（Broadband）：</p><ol><li>OECD2006年报告称，任何传输速率在256Kbps以上的互联网连接，可称为宽带。</li><li>FCC解释，任何传输速率在4Mbps以上的互联网连接，可称为宽带。</li></ol></blockquote><p>PPPoE：</p><p>将 PPP 协议封装在以太网框架中的一种网络隧道协议。</p><ul><li>有登录和口令，方便计费；</li><li>当连接时分配 IP 地址，方便 IP 地址动态复用。</li></ul><h3 id="动态拨号-VPS"><a href="#动态拨号-VPS" class="headerlink" title="动态拨号 VPS"></a>动态拨号 VPS</h3><p>VPS (Virtual Private Server，虚拟专用服务器)，将一台服务器分割成多个虚拟专享服务器的服务。</p><p>动态拨号 VPS 是基于 ADSL 拨号上网的虚拟专用主机。</p><p>不同的动态拨号 VPS 提供商提供不同的配置方法：</p><table><thead><tr><th>动态拨号 VPS 提供商</th><th>配置方式</th></tr></thead><tbody><tr><td><a href="http://www.yunlifang.cn/dynamicvps.asp" target="_blank" rel="noopener">云立方</a></td><td>1. 运行 <code>ppp.sh</code> 脚本，输入用户名密码即可；<br>2. <code>adsl-start</code> 进行开始拨号，网卡为 ppp0；<br>3. <code>adsl-stop</code> 停止拨号。</td></tr><tr><td><a href="http://cloud.871020.com/vpsadm/pppoe.html" target="_blank" rel="noopener">无极</a></td><td>1. 运行 <code>p.sh</code> 脚本，输入用户名密码即可；<br>2. <code>pppoe-start</code> 拨号；<br>3. <code>pppoe-stop</code> 停止拨号；<br> 4. <code>pppoe-status</code> 查看拨号状态。</td></tr></tbody></table><h2 id="设置代理服务器"><a href="#设置代理服务器" class="headerlink" title="设置代理服务器"></a>设置代理服务器</h2><p>在 Linux 下搭建代理服务器有两种简单的方式，TinyProxy 和 Squid。</p><h3 id="TinyProxy"><a href="#TinyProxy" class="headerlink" title="TinyProxy"></a>TinyProxy</h3><h4 id="（1）安装"><a href="#（1）安装" class="headerlink" title="（1）安装"></a>（1）安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 在 Ubuntu 下</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h2&gt;&lt;h3 id=&quot;ADSL-技术&quot;&gt;&lt;a href=&quot;#ADSL-技术&quot; class=&quot;headerlink&quot; title=&quot;ADSL 技术&quot;&gt;&lt;/
      
    
    </summary>
    
      <category term="it" scheme="https://linlshare.github.io/categories/it/"/>
    
      <category term="robot" scheme="https://linlshare.github.io/categories/it/robot/"/>
    
    
      <category term="ADSL" scheme="https://linlshare.github.io/tags/ADSL/"/>
    
      <category term="ProxyPool" scheme="https://linlshare.github.io/tags/ProxyPool/"/>
    
  </entry>
  
  <entry>
    <title>五四青年节</title>
    <link href="https://linlshare.github.io/2019/05/04/days/%E4%BA%94%E5%9B%9B%E9%9D%92%E5%B9%B4%E8%8A%82/"/>
    <id>https://linlshare.github.io/2019/05/04/days/五四青年节/</id>
    <published>2019-05-04T03:23:26.000Z</published>
    <updated>2019-05-04T04:06:21.917Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h2><p>1919 年 5 月 4 日，中华民国北洋政府治下的京兆地区，爆发以青年学生为主的运动，包含市民、工商人士等各阶层人士，史称五四运动。</p><p>1939 年，在纪念五四运动20周年的时候，陕甘宁边区西北青年救国联合会决定5月4日为中国青年节（又称“五四青年节”。</p><p>1949 年，中华人民共和国政务院正式宣布5月4日为中国青年节。</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>1919 年 1 月18 日，日本驻中国公使日置益与袁世凯密谈，提出”二十一条”。</li><li>1919 年 5 月 9 日，中日签署《中日民四条约》，与《二十一条》原案比较，中国损失相较于原案已尽可能减小到最低程度。</li><li>1919 年1 月 18 日开始的巴黎和会上，中国代表团（担任团长的外交总长<a href="https://zh.wikipedia.org/wiki/陸徵祥" target="_blank" rel="noopener">陆徵祥</a>、驻美公使<a href="https://zh.wikipedia.org/wiki/顧維鈞" target="_blank" rel="noopener">顾维钧</a>、南方政府代表<a href="https://zh.wikipedia.org/wiki/王正廷" target="_blank" rel="noopener">王正廷</a>、驻英公使<a href="https://zh.wikipedia.org/wiki/施肇基" target="_blank" rel="noopener">施肇基</a>、驻比公使<a href="https://zh.wikipedia.org/wiki/魏宸组" target="_blank" rel="noopener">魏宸组</a>，秘书<a href="https://zh.wikipedia.org/wiki/朱佛定" target="_blank" rel="noopener">朱佛定</a>）虽决绝签字，但仍是外交失败，既无法取消帝国主义在华特权，也无法无法废除”二十一条”、收回山东。</li></ul><h2 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h2><ol><li>“五四运动的声势大过它的实质，五四运动的火焰大过它的成就。” — “五四之子” 殷海光</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://zh.wikipedia.org/wiki/%E4%BA%94%E5%9B%9B%E9%9D%92%E5%B9%B4%E8%8A%82" target="_blank" rel="noopener">五四青年节 - 维基百科</a></li><li><a href="https://zh.wikipedia.org/wiki/%E4%BA%94%E5%9B%9B%E8%BF%90%E5%8A%A8" target="_blank" rel="noopener">五四运动 - 维基百科</a></li><li><a href="https://zh.wikipedia.org/wiki/%E5%B7%B4%E9%BB%8E%E5%92%8C%E4%BC%9A_(1919%E5%B9%B4" target="_blank" rel="noopener">巴黎和会 (1919年) - 维基百科</a>)</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;起源&quot;&gt;&lt;a href=&quot;#起源&quot; class=&quot;headerlink&quot; title=&quot;起源&quot;&gt;&lt;/a&gt;起源&lt;/h2&gt;&lt;p&gt;1919 年 5 月 4 日，中华民国北洋政府治下的京兆地区，爆发以青年学生为主的运动，包含市民、工商人士等各阶层人士，史称五四运动。&lt;/p
      
    
    </summary>
    
      <category term="days" scheme="https://linlshare.github.io/categories/days/"/>
    
    
      <category term="节日" scheme="https://linlshare.github.io/tags/%E8%8A%82%E6%97%A5/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="https://linlshare.github.io/2019/05/02/it/code/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://linlshare.github.io/2019/05/02/it/code/正则表达式/</id>
    <published>2019-05-01T16:22:43.000Z</published>
    <updated>2019-05-01T16:24:12.779Z</updated>
    
    <content type="html"><![CDATA[<h2 id="排除特定字符串"><a href="#排除特定字符串" class="headerlink" title="排除特定字符串"></a>排除特定字符串</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">查找不以baidu开头的字符串</span><br><span class="line"></span><br><span class="line">baidu.com</span><br><span class="line">sina.com.cn</span><br><span class="line">正则：^(?!baidu).*$  匹配结果就是第2行，也就是第1行被排除了</span><br><span class="line">这里使用了零宽度断言(?!exp),注意，我们有一个向前查找的语法(也叫顺序环视)  (?=exp)</span><br><span class="line">(?=exp) 会查找exp之前的【位置】如果将等号换成感叹号，就变成了否定语义，也就是说查找的位置的后面不能是exp</span><br><span class="line">一般情况下?!要与特定的锚点相结合，例如^行开头或者$行结尾，那么上面的例子的意思如下：</span><br><span class="line">^(?!baidu).*$ 先匹配一个行开头的位置，并且要求接下来的位置的后面不是baidu这个字符串。这样由于第一行^之后的位置后面是baidu所以匹配失败，被排除在外了。</span><br><span class="line"></span><br><span class="line">回到顶部</span><br><span class="line">查找不以com结尾的字符串</span><br><span class="line"></span><br><span class="line">www.sina.com.cn</span><br><span class="line">www.educ.org</span><br><span class="line">www.hao.cc</span><br><span class="line">www.baidu.com</span><br><span class="line">www.123.com</span><br><span class="line"></span><br><span class="line">正则 ^.*?(?&lt;!com)$  匹配前3行结果。</span><br><span class="line">如果查找以com结尾的字符串则使用正则 ^.*?(?&lt;=com)$或者 ^.*?com$  </span><br><span class="line">对正则表达式的解释：^.*?(?&lt;!com)$</span><br><span class="line">首先匹配行开头，然后是 .*? 这个是忽略优先，也就是优先忽略不匹配任何字符，(?&lt;!com) 这个是一个逆序环视的否定形式，意思是匹配一个位置此位置的前面不能是字符串com，最后是一个行结束。对于www.123.com来说，首先匹配行首，接着匹配w后面的位置，发现前面不是com，所以成功但紧接着要匹配行尾，失败，回溯让.*? 匹配一个w符号，接着(?&lt;com)匹配第二个w后面的位置，发现前面也不是com匹配成功，紧接着要匹配$对应的行尾失败，一直到.*?匹配了www.baidu.com的时候，此时(?&lt;!com)匹配m后面的位置，此时此位置的前面是com匹配直接失败,接着.*?匹配行末尾，(?&lt;!com)匹配$后面的位置，显然这次也失败了，所以整个全局匹配都失败。  www.123.com被排除到匹配之外。这里的.*后面加不加问号结果都一样。</span><br><span class="line"></span><br><span class="line">回到顶部</span><br><span class="line">查找不含有if的行</span><br><span class="line"></span><br><span class="line">if (a&gt;b)</span><br><span class="line">printf(&quot;hello&quot;);</span><br><span class="line">else if(a&lt;b)</span><br><span class="line">printf(&quot;hello2&quot;);</span><br><span class="line">else</span><br><span class="line">printf(&quot;hello3&quot;);</span><br><span class="line"></span><br><span class="line">正则 ^([^f]|[^i]f)+$</span><br><span class="line">其实这个匹配也是一个排除型字符串的匹配，但是不同于上面两种，因为这里的if可能既不在行开头，也不在行结尾，而是在字符串中间这样就给匹配带来了麻烦，在正则表达式中没有提供类似排除的功能。我们最容易想到的就是下面的正则：</span><br><span class="line">^[^if]+$ 这种写法看起来是那么回事，但是排除型字符组排除的是i和f两个字符，而不是if这个字符串，所以这个正则表达式匹配的是那些既没有i字符也不包含f字符的字符串。但是如果字符串中有一个i或多个i或者有一个或多个f，或者i和f字符都有只不过没有连在一起。这些情况都是我们需要匹配的情况，而我们不能匹配的情况是那些包含if字符串的行，而不是包含i或f字符的行，所以这种写法漏洞很大。</span><br><span class="line"></span><br><span class="line">^.*(?!if).*$ 这种写法使用了零宽度断言，表面意思看起来好像是说 任意字符+非if+任意字符 组成了整个字符串，但是仔细研究匹配过程就知道这个是错的，(?!if)匹配的是一个位置，所以对于字符串aifb他也是可以匹配到的，而实际上这样的字符正是我们不要的。按照这个正则表达式，对于aifb 首先匹配行首，其次.*是贪婪模式(匹配优先)，会一直匹配到字符串的末尾(此时传动装置定位在$位置前面)，此时(?!if)需要匹配一个位置，这个位置的后面不能是if，这个时候正好位置在b字符的后面，符合匹配条件，紧接着匹配行尾，到这里整个全局匹配成功。</span><br><span class="line"></span><br><span class="line">也就是说对于一个字符串例如我要排除abc这个字串，那么对于任意一个字符串   helloworld abc helloworld 在匹配的时候(?!abc)可以匹配h、e、l、l、o、w、o、r、l、d等这些字符后面的位置，都是成功的。所以匹配根本还没有进行到abc这个地方，(?!abc)就会匹配成功。这个时候根本起不到排除的作用，为什么上面的第1和第2个例子可以呢，因为他们的位置有行首和行尾限定。例如我要匹配行首不是abc的话，那么此时^(?!abc) 这个时候(?!abc)实际上在匹配的时候其传动装置的位置被行首进行了限定,所以对于那些以abc开头的字符串来说就会匹配失败了。</span><br><span class="line"></span><br><span class="line">对于正则表达式^.*(?!abc).*$怎么能让第一个.*匹配到 helloworldabcxxx中的helloworld的问题。</span><br><span class="line"></span><br><span class="line">对于上面的题目，我们的答案是^([^f]|[^i]f)+$  其实就将所有的匹配分成了2种情况，一种情况是假设字符串中没有f字符，    自然就不可能有if字符串了，这种情况下匹配的字符串中是不可能有if的。第二种情况就是有f字符，但是我们要求此时f的前面不能是i，所以在有f和没有f两种情况都考虑到的情况下，这个正则就应该可以满足所有的情况了。</span><br><span class="line"></span><br><span class="line">其实这个问题的解答是不完美的，对于排除的字符串if只有2个字符i和f字符，我们可以使用这种方式，但是如果我们要排除的是字符串helloworld，这种方法显然就不实用了，那要考虑到多少种情况呢?</span><br><span class="line"></span><br><span class="line">排除不含有某字符串的最终方案：在这种情况下我们使用  ^(?!.*helloworld).*$  正则表达式  我们将第一个.*移到了零宽度断言的里面。在匹配的时候首先匹配行首的位置，然后接下来是匹配行首后面的位置，要求此位置的后面不能是    .*helloworld 匹配的字符串，说白了要求此位置的后面不能是xxxxxxxxxxxxxxxxxxhelloworld 类似的字符串，这样就排除了从行首开始后面含有helloworld的情况了。</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://www.cnblogs.com/wangqiguo/archive/2012/05/08/2486548.html" target="_blank" rel="noopener">利用正则表达式排除特定字符串 - 薰衣草的旋律</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;排除特定字符串&quot;&gt;&lt;a href=&quot;#排除特定字符串&quot; class=&quot;headerlink&quot; title=&quot;排除特定字符串&quot;&gt;&lt;/a&gt;排除特定字符串&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=
      
    
    </summary>
    
      <category term="it" scheme="https://linlshare.github.io/categories/it/"/>
    
      <category term="code" scheme="https://linlshare.github.io/categories/it/code/"/>
    
    
      <category term="正则表达式" scheme="https://linlshare.github.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Android 基础</title>
    <link href="https://linlshare.github.io/2019/04/28/it/android/Android%20%E5%9F%BA%E7%A1%80/"/>
    <id>https://linlshare.github.io/2019/04/28/it/android/Android 基础/</id>
    <published>2019-04-28T05:25:35.000Z</published>
    <updated>2019-04-28T07:46:42.610Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="1-四大组件"><a href="#1-四大组件" class="headerlink" title="1 四大组件"></a>1 四大组件</h2><p>需要在 <code>AndroidMenifest.xml</code> 中声明，通过 Intent 调用。</p><h3 id="1-1-Activity"><a href="#1-1-Activity" class="headerlink" title="1.1 Activity"></a>1.1 Activity</h3><h4 id="1-1-1-定义"><a href="#1-1-1-定义" class="headerlink" title="1.1.1 定义"></a>1.1.1 定义</h4><blockquote><p>An activity is a single, focused thing that the user can do. Almost all activities interact with the user, so the Activity class takes care of creating a window for you in which you can place your UI with <code>setContentView(View)</code>. While activities are often presented to the user as full-screen windows, they can also be used in other ways: as floating windows (via a theme with <code>R.attr.windowIsFloating</code> set) or embedded inside of another activity (using <code>ActivityGroup</code>).</p><p>— <a href="https://developer.android.com/reference/android/app/Activity.html" target="_blank" rel="noopener">Android Developer Guide</a></p></blockquote><h4 id="1-1-2-生命周期"><a href="#1-1-2-生命周期" class="headerlink" title="1.1.2 生命周期"></a>1.1.2 生命周期</h4><blockquote><p>参见：<a href="https://developer.android.com/guide/components/activities/activity-lifecycle#java" target="_blank" rel="noopener">https://developer.android.com/guide/components/activities/activity-lifecycle#java</a></p></blockquote><p><img src="/2019/04/28/it/android/Android 基础/activity_lifecycle.png" alt="activity_lifecycle"></p><h4 id="1-1-3-启动一个-Activity"><a href="#1-1-3-启动一个-Activity" class="headerlink" title="1.1.3 启动一个 Activity"></a>1.1.3 启动一个 Activity</h4><blockquote><p>参见：<a href="https://developer.android.com/training/basics/activity-lifecycle/starting.html" target="_blank" rel="noopener">https://developer.android.com/training/basics/activity-lifecycle/starting.html</a></p></blockquote><p>(1) Activity 启动流程</p><p><img src="/2019/04/28/it/android/Android 基础/basic-lifecycle.png" alt="basic-lifecycle"></p><p>(2) 指定一个Launcher Activity</p><p>Launcher(or Main) Activity（启动器 Activity，或主 Activity）：应用用户界面的主入口，在 Android 清单文件 <a href="https://developer.android.com/guide/topics/manifest/manifest-intro.html" target="_blank" rel="noopener"><code>AndroidManifest.xml</code></a> 中定义，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span> <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure><p>(3) 创建一个新实例</p><ol><li>创建 Activity；</li><li>在 <code>AndroidManifest.xml</code> 中声明；</li><li>创建对应的布局文件(可选)；</li><li>处理生命周期方法。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">TextView mTextView; <span class="comment">// Member variable for text view in the layout</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set the user interface layout for this Activity</span></span><br><span class="line">    <span class="comment">// The layout file is defined in the project res/layout/main_activity.xml file</span></span><br><span class="line">    setContentView(R.layout.main_activity);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Initialize member TextView so we can manipulate it later</span></span><br><span class="line">    mTextView = (TextView) findViewById(R.id.text_message);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Make sure we're running on Honeycomb or higher to use ActionBar APIs</span></span><br><span class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.HONEYCOMB) &#123;</span><br><span class="line">        <span class="comment">// For the main activity, make sure the app icon in the action bar</span></span><br><span class="line">        <span class="comment">// does not behave as a button</span></span><br><span class="line">        ActionBar actionBar = getActionBar();</span><br><span class="line">        actionBar.setHomeButtonEnabled(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-Service"><a href="#1-2-Service" class="headerlink" title="1.2 Service"></a>1.2 Service</h3><h4 id="1-2-1-定义"><a href="#1-2-1-定义" class="headerlink" title="1.2.1 定义"></a>1.2.1 定义</h4><blockquote><p><code>Service</code> 是一个可以在后台执行长时间运行操作而不提供用户界面的应用组件。服务可由其他应用组件启动，而且即使用户切换到其他应用，服务仍将在后台继续运行。 此外，组件可以绑定到服务，以与之进行交互，甚至是执行进程间通信 (IPC)。 例如，服务可以处理网络事务、播放音乐，执行文件 I/O 或与内容提供程序交互，而所有这一切均可在后台进行。</p><p>— <a href="https://developer.android.com/guide/components/services" target="_blank" rel="noopener">Android Developer Guide</a></p></blockquote><h4 id="1-2-2-使用场景"><a href="#1-2-2-使用场景" class="headerlink" title="1.2.2 使用场景"></a>1.2.2 使用场景</h4><p><strong>用户未与应用进行交互但需在后台运行时</strong></p><blockquote><p> 如需在主线程外部执行工作，不过只是在用户正在与应用交互时才有此需要，则应创建新线程而非服务。 例如，如果您只是想在 Activity 运行的同时播放一些音乐，则可在 <code>onCreate()</code> 中创建线程，在 <code>onStart()</code> 中启动线程，然后在 <code>onStop()</code> 中停止线程。您还可以考虑使用 <code>AsyncTask</code> 或 <code>HandlerThread</code>，而非传统的 <code>Thread</code>类。如需了解有关线程的详细信息，请参阅<a href="https://developer.android.com/guide/components/processes-and-threads.html#Threads" target="_blank" rel="noopener">进程和线程</a>文档。</p><p>请记住，如果您确实要使用服务，则<strong>默认情况下，它仍会在应用的主线程中运</strong>行，因此，如果服务执行的是密集型或阻止性操作，则您仍应在服务内创建新线程。</p><p>— <a href="https://developer.android.com/guide/components/services" target="_blank" rel="noopener">Android Developer Guide</a></p></blockquote><h4 id="1-2-3-分类"><a href="#1-2-3-分类" class="headerlink" title="1.2.3 分类"></a>1.2.3 分类</h4><ol><li><strong>启动服务</strong>，通过调用 <code>startService()</code> 启动服务时，服务即处于“启动”状态。一旦启动，服务即可在后台<strong>无限期</strong>运行，即使启动服务的组件已被销毁也不受影响。已启动的服务通常是执行单一操作，而且不会将结果返回给调用方。</li><li><strong>绑定服务</strong>，通过调用 <code>bindService()</code> 绑定到服务时，服务即处于“绑定”状态。绑定服务提供了一个客户端-服务器接口，允许组件与服务进行交互、发送请求、获取结果，甚至是利用进程间通信 (IPC) 跨进程执行这些操作。 仅当与另一个应用组件绑定时，绑定服务才会运行。 多个组件可以同时绑定到该服务，但全部取消绑定后，该服务即会被销毁。</li></ol><p>Service 下有一个重要的子类叫 <code>IntentService</code>，它使用一个工作线程队列，逐一地（<em>而不是同时处理</em>）处理所有请求，只需要实现 <code>onHandleIntent</code>方法即可。</p><h4 id="1-2-4-回调方法"><a href="#1-2-4-回调方法" class="headerlink" title="1.2.4 回调方法"></a>1.2.4 回调方法</h4><ol><li><a href="https://developer.android.com/reference/android/app/Service.html#onStartCommand(android.content.Intent, int, int" target="_blank" rel="noopener">onStartCommand()</a>)：当调用 <code>startService</code> 启动服务时，系统会调用该方法，可通过 <code>stopSelf()</code> 或 <code>stopService</code> 停止服务。（如果您只想提供绑定，则无需实现此方法。）</li><li><a href="https://developer.android.com/reference/android/app/Service.html#onBind(android.content.Intent" target="_blank" rel="noopener">onBind()</a>)：当另一个组件想通过调用 <code>bindService()</code> 与服务绑定（例如执行 RPC）时，系统将调用此方法。在此方法的实现中，您必须通过返回 <code>IBinder</code> 提供一个接口，供客户端用来与服务进行通信。请务必实现此方法，但如果您并不希望允许绑定，则应返回 null。</li><li><a href="https://developer.android.com/reference/android/app/Service.html#onCreate(" target="_blank" rel="noopener">onCreate()</a>)：首次创建服务时，系统在 <code>onStartCommand()</code> 或 <code>onBind</code> 之前调用该方法。</li><li><a href="https://developer.android.com/reference/android/app/Service.html#onDestroy(" target="_blank" rel="noopener">onDestroy()</a>)：当服务不再使用且将被销毁时，系统将调用此方法。</li></ol><h4 id="1-2-5-生命周期"><a href="#1-2-5-生命周期" class="headerlink" title="1.2.5 生命周期"></a>1.2.5 生命周期</h4><p><img src="/2019/04/28/it/android/Android 基础/service_lifecycle.png" alt="img"></p><h3 id="1-3-ContentProvider"><a href="#1-3-ContentProvider" class="headerlink" title="1.3 ContentProvider"></a>1.3 ContentProvider</h3><h3 id="1-4-BroadcastReceiver"><a href="#1-4-BroadcastReceiver" class="headerlink" title="1.4 BroadcastReceiver"></a>1.4 BroadcastReceiver</h3><h3 id="1-5-Intent"><a href="#1-5-Intent" class="headerlink" title="1.5 Intent"></a>1.5 Intent</h3><h4 id="1-5-1-定义"><a href="#1-5-1-定义" class="headerlink" title="1.5.1 定义"></a>1.5.1 定义</h4><blockquote><p>An intent is an abstract description of an operation to be performed. It can be used with <code>Context#startActivity(Intent)</code> to launch an <code>Activity</code>, <code>broadcastIntent</code> to send it to any interested <code>BroadcastReceiver</code> components, and <code>Context.startService(Intent)</code> or <code>Context.bindService(Intent, ServiceConnection, int)</code> to communicate with a background <code>Service</code>.</p><p>— <a href="https://developer.android.com/reference/android/content/Intent" target="_blank" rel="noopener">Android Developer Guide</a></p></blockquote><h4 id="1-5-2-结构"><a href="#1-5-2-结构" class="headerlink" title="1.5.2 结构"></a>1.5.2 结构</h4><ol><li>action，操作，包括<code>ACTION_VIEW</code>, <code>ACTION_EDIT</code>, <code>ACTION_MAIN</code> 等等。</li><li>data（可选），操作值，符合  <a href="https://developer.android.com/reference/android/net/Uri.html" target="_blank" rel="noopener"><code>Uri</code></a> 规范。</li><li>category（可选），action 的附加描述，比如 <code>CATEGORY_LAUNCHER</code> 意味着它应该出现在启动器中作为顶层应用。</li><li>type（可选），指定 data 的数据类型，如不指定则系统会通过 data 进行值类型评估。</li><li>component（可选），指定使用该 Intent 的组件的类名。</li><li>extras（可选），附加的 <a href="https://developer.android.com/reference/android/os/Bundle.html" target="_blank" rel="noopener">Bundle</a> 类型数据，供 component 使用。</li></ol><h4 id="1-5-3-分类"><a href="#1-5-3-分类" class="headerlink" title="1.5.3 分类"></a>1.5.3 分类</h4><ol><li>显式 Intent，指定 component。</li><li>隐式 Intent，不指定 component。</li></ol><h4 id="1-5-4-使用示例：启动一个-Activity"><a href="#1-5-4-使用示例：启动一个-Activity" class="headerlink" title="1.5.4 使用示例：启动一个 Activity"></a>1.5.4 使用示例：启动一个 Activity</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_SEND);</span><br><span class="line">intent.putExtra(Intent.EXTRA_EMAIL, recipientArray);</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure><h2 id="2-布局"><a href="#2-布局" class="headerlink" title="2 布局"></a>2 布局</h2><h3 id="2-1-定义"><a href="#2-1-定义" class="headerlink" title="2.1 定义"></a>2.1 定义</h3><blockquote><p>布局定义用户界面的视觉结构，如<a href="https://developer.android.com/guide/components/activities.html?hl=zh-CN" target="_blank" rel="noopener">Activity</a>或<a href="https://developer.android.com/guide/topics/appwidgets/index.html?hl=zh-CN" target="_blank" rel="noopener">应用小部件</a>的 UI。您可以通过两种方式声明布局：</p><ul><li><strong>在 XML 中声明 UI 元素</strong>。Android 提供了对应于 View 类及其子类的简明 XML 词汇，如用于小部件和布局的词汇；</li><li><strong>运行时实例化布局元素</strong>。您的应用可以通过编程创建 View 对象和 ViewGroup 对象（并操纵其属性）。</li></ul><p>Android 框架让您可以灵活地使用以下一种或两种方法来声明和管理应用的 UI。例如，您可以在 XML 中声明应用的默认布局，包括将出现在布局中的屏幕元素及其属性。然后，您可以在应用中添加可在运行时修改屏幕对象（包括那些已在 XML 中声明的对象）状态的代码。</p><p>— <a href="https://developer.android.com/guide/topics/ui/declaring-layout?hl=zh-CN" target="_blank" rel="noopener">Android Developer Guide</a></p></blockquote><h3 id="2-2-布局参数"><a href="#2-2-布局参数" class="headerlink" title="2.2 布局参数"></a>2.2 布局参数</h3><blockquote><p>名为 <code>layout_*something*</code> 的 XML 布局属性可为视图定义与其所在的 ViewGroup 相适的布局参数。</p><p>每个 ViewGroup 类都会实现一个扩展 <code>ViewGroup.LayoutParams</code> 的嵌套类。此子类包含的属性类型会根据需要为视图组的每个子视图定义尺寸和位置。 正如您在图 1 中所见，父视图组为每个子视图（包括子视图组）定义布局参数。</p><p>— <a href="https://developer.android.com/guide/topics/ui/declaring-layout?hl=zh-CN" target="_blank" rel="noopener">Android Developer Guide</a></p></blockquote><p><img src="/2019/04/28/it/android/Android 基础/layoutparams.png" alt="img"></p><h3 id="2-3-布局位置"><a href="#2-3-布局位置" class="headerlink" title="2.3 布局位置"></a>2.3 布局位置</h3><h3 id="2-4-View"><a href="#2-4-View" class="headerlink" title="2.4 View"></a>2.4 View</h3><h3 id="2-5-ViewGroup"><a href="#2-5-ViewGroup" class="headerlink" title="2.5 ViewGroup"></a>2.5 ViewGroup</h3><h3 id="2-6-事件处理"><a href="#2-6-事件处理" class="headerlink" title="2.6 事件处理"></a>2.6 事件处理</h3><h2 id="3-存储"><a href="#3-存储" class="headerlink" title="3 存储"></a>3 存储</h2><h3 id="3-1-SharedPreferences"><a href="#3-1-SharedPreferences" class="headerlink" title="3.1 SharedPreferences"></a>3.1 SharedPreferences</h3><h4 id="3-1-1-定义"><a href="#3-1-1-定义" class="headerlink" title="3.1.1 定义"></a>3.1.1 定义</h4><blockquote><p>Interface for accessing and modifying preference data returned by <code>Context#getSharedPreferences</code>. For any particular set of preferences, there is a single instance of this class that all clients share. Modifications to the preferences must go through an <code>Editor</code> object to ensure the preference values remain in a consistent state and control when they are committed to storage. Objects that are returned from the various <code>get</code> methods must be treated as immutable by the application.</p><p>— <a href="https://developer.android.com/reference/android/content/SharedPreferences" target="_blank" rel="noopener">Android Developer Guide</a></p></blockquote><p>底层存储采用一个 XML 文件。</p><h4 id="3-1-2-操作"><a href="#3-1-2-操作" class="headerlink" title="3.1.2 操作"></a>3.1.2 操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>）写入数据：</span><br><span class="line">     <span class="comment">//步骤1：创建一个SharedPreferences对象</span></span><br><span class="line">     SharedPreferences sharedPreferences= getSharedPreferences(<span class="string">"data"</span>,Context.MODE_PRIVATE);</span><br><span class="line">     <span class="comment">//步骤2： 实例化SharedPreferences.Editor对象</span></span><br><span class="line">     SharedPreferences.Editor editor = sharedPreferences.edit();</span><br><span class="line">     <span class="comment">//步骤3：将获取过来的值放入文件</span></span><br><span class="line">     editor.putString(<span class="string">"name"</span>, “Tom”);</span><br><span class="line">     editor.putInt(<span class="string">"age"</span>, <span class="number">28</span>);</span><br><span class="line">     editor.putBoolean(<span class="string">"marrid"</span>,<span class="keyword">false</span>);</span><br><span class="line">     <span class="comment">//步骤4：提交               </span></span><br><span class="line">     editor.commit();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="number">2</span>）读取数据：</span><br><span class="line">     SharedPreferences sharedPreferences= getSharedPreferences(<span class="string">"data"</span>, Context .MODE_PRIVATE);</span><br><span class="line">     String userId=sharedPreferences.getString(<span class="string">"name"</span>,<span class="string">""</span>);</span><br><span class="line">  </span><br><span class="line"><span class="number">3</span>）删除指定数据</span><br><span class="line">     editor.remove(<span class="string">"name"</span>);</span><br><span class="line">     editor.commit();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">4</span>）清空数据</span><br><span class="line">     editor.clear();</span><br><span class="line">     editor.commit();</span><br><span class="line"></span><br><span class="line">作者：ghroosk</span><br><span class="line">链接：https:<span class="comment">//juejin.im/post/5adc444df265da0b886d00bc</span></span><br><span class="line">来源：掘金</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure><h3 id="3-2-ContentProvider"><a href="#3-2-ContentProvider" class="headerlink" title="3.2 ContentProvider"></a>3.2 ContentProvider</h3><h3 id="3-3-SQLite、Room-等等"><a href="#3-3-SQLite、Room-等等" class="headerlink" title="3.3 SQLite、Room 等等"></a>3.3 SQLite、Room 等等</h3><h3 id="3-4-文件"><a href="#3-4-文件" class="headerlink" title="3.4 文件"></a>3.4 文件</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;1-四大组件&quot;&gt;&lt;a href=&quot;#1-四大组件&quot; class=&quot;headerlink&quot; title=&quot;1 四大组件&quot;&gt;&lt;/a&gt;1 四大组件&lt;/h2&gt;&lt;p&gt;需要在 &lt;code&gt;AndroidMenifest.xml&lt;/code&gt; 中声明，
      
    
    </summary>
    
      <category term="it" scheme="https://linlshare.github.io/categories/it/"/>
    
      <category term="android" scheme="https://linlshare.github.io/categories/it/android/"/>
    
    
      <category term="Android" scheme="https://linlshare.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>MySql</title>
    <link href="https://linlshare.github.io/2019/04/23/it/java/persistence/MySql/"/>
    <id>https://linlshare.github.io/2019/04/23/it/java/persistence/MySql/</id>
    <published>2019-04-23T03:35:09.000Z</published>
    <updated>2019-04-23T06:54:14.097Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>mac下安装mysql 5.7，参考：<a href="https://gist.github.com/operatino/392614486ce4421063b9dece4dfe6c21" target="_blank" rel="noopener">https://gist.github.com/operatino/392614486ce4421063b9dece4dfe6c21</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">brew info mysql@5.7</span><br><span class="line">brew install mysql@5.7</span><br><span class="line"></span><br><span class="line">brew tap homebrew/services</span><br><span class="line">brew services start mysql@5.7</span><br><span class="line">brew services list</span><br><span class="line">brew link mysql@5.7 --force</span><br><span class="line">mysql -V</span><br><span class="line"></span><br><span class="line">mysqladmin -u root password 'yourpassword'</span><br></pre></td></tr></table></figure><h2 id="启动和停止"><a href="#启动和停止" class="headerlink" title="启动和停止"></a>启动和停止</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 启动</span><br><span class="line">mysql.server start</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 停止</span><br><span class="line">mysql.server stop</span><br></pre></td></tr></table></figure><h2 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin -uroot password "new_password"</span><br></pre></td></tr></table></figure><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure><h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><ol><li>默认的端口号为 3306</li><li>Mac下简单易用的MySql管理工具：Sequel Pro</li></ol><h2 id="QA"><a href="#QA" class="headerlink" title="QA"></a>QA</h2><h3 id="Sequel-Pro-and-MySQL-connection-failed"><a href="#Sequel-Pro-and-MySQL-connection-failed" class="headerlink" title="Sequel Pro and MySQL connection failed"></a><a href="https://stackoverflow.com/questions/51179516/sequel-pro-and-mysql-connection-failed" target="_blank" rel="noopener">Sequel Pro and MySQL connection failed</a></h3><p><strong>问题描述：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MySQL said: Authentication plugin &apos;caching_sha2_password&apos; cannot be loaded: dlopen(/usr/local/lib/plugin/caching_sha2_password.so, 2): image not found</span><br></pre></td></tr></table></figure><p><strong>解决方案：</strong></p><p>This is because Sequel Pro is not ready yet for a new kind of user login, as the error states: there is no driver. Quick fix for non-homebrew installs:</p><p><code>Apple Logo &gt; System Preferences &gt; MySQL &gt; Initialize Database</code>, then type your new password and select ‘Use legacy password’</p><p>After restart you should be able to connect. Do it only on fresh installs, because you may lost your db tables otherwise.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;mac下安装mysql 5.7，参考：&lt;a href=&quot;https://gist.github.com/operatino/39261448
      
    
    </summary>
    
      <category term="it" scheme="https://linlshare.github.io/categories/it/"/>
    
      <category term="java" scheme="https://linlshare.github.io/categories/it/java/"/>
    
      <category term="persistence" scheme="https://linlshare.github.io/categories/it/java/persistence/"/>
    
    
      <category term="Java" scheme="https://linlshare.github.io/tags/Java/"/>
    
      <category term="MySql" scheme="https://linlshare.github.io/tags/MySql/"/>
    
  </entry>
  
  <entry>
    <title>zsh</title>
    <link href="https://linlshare.github.io/2019/04/19/it/tool/zsh/"/>
    <id>https://linlshare.github.io/2019/04/19/it/tool/zsh/</id>
    <published>2019-04-19T03:24:52.000Z</published>
    <updated>2019-04-19T03:24:54.328Z</updated>
    
    <content type="html"><![CDATA[<h3 id="快速安装"><a href="#快速安装" class="headerlink" title="快速安装"></a>快速安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 使用 curl</span><br><span class="line"><span class="meta">$</span> sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"</span><br><span class="line"><span class="meta">#</span> 或者使用 wget</span><br><span class="line"><span class="meta">$</span> sh -c "$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)"</span><br></pre></td></tr></table></figure><h3 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h3><p>从官网中可以预览各种主题，见 <a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Themes。配置主题只需按一下步骤：" target="_blank" rel="noopener">https://github.com/robbyrussell/oh-my-zsh/wiki/Themes。配置主题只需按一下步骤：</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 1）修改 ZSH_THEME 值为想要设置的主题，允许无主题</span><br><span class="line"><span class="meta">$</span> vim ~/.zshrc</span><br><span class="line"><span class="meta">#</span> 2）使配置生效</span><br><span class="line"><span class="meta">$</span> source ~/.zshrc</span><br></pre></td></tr></table></figure><h3 id="禁止粘贴命令时自动对特殊字符进行转义"><a href="#禁止粘贴命令时自动对特殊字符进行转义" class="headerlink" title="禁止粘贴命令时自动对特殊字符进行转义"></a>禁止粘贴命令时自动对特殊字符进行转义</h3><p>（1）编辑 <code>misc.zsh</code> 文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim  ~/.oh-my-zsh/lib/misc.zsh</span><br></pre></td></tr></table></figure><p>（2）注释掉 <code>url-quote-magic</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#if [[ $ZSH_VERSION != 5.1.1 ]]; then</span><br><span class="line">#  for d in $fpath; do</span><br><span class="line">#       if [[ -e &quot;$d/url-quote-magic&quot; ]]; then</span><br><span class="line">#               if is-at-least 5.1; then</span><br><span class="line">#                       autoload -Uz bracketed-paste-magic</span><br><span class="line">#                       zle -N bracketed-paste bracketed-paste-magic</span><br><span class="line">#               fi</span><br><span class="line">#               autoload -Uz url-quote-magic</span><br><span class="line">#               zle -N self-insert url-quote-magic</span><br><span class="line">#      break</span><br><span class="line">#       fi</span><br><span class="line">#  done</span><br><span class="line">#fi</span><br></pre></td></tr></table></figure><h3 id="解决中文乱码"><a href="#解决中文乱码" class="headerlink" title="解决中文乱码"></a>解决中文乱码</h3><p>在<code>~/.zshrc</code>添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export LC_ALL=en_US.UTF-8  </span><br><span class="line">export LANG=en_US.UTF-8</span><br></pre></td></tr></table></figure><p>然后执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure><h3 id="更换系统默认的-shell-为-zsh"><a href="#更换系统默认的-shell-为-zsh" class="headerlink" title="更换系统默认的 shell 为 zsh"></a>更换系统默认的 shell 为 zsh</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> chsh -s /bin/zsh</span><br></pre></td></tr></table></figure><h3 id="无法手动更新-zsh"><a href="#无法手动更新-zsh" class="headerlink" title="无法手动更新 zsh"></a>无法手动更新 zsh</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span>cd .oh-my-zsh/ ( to change to its root directory)</span><br><span class="line"><span class="meta">$</span>git status (now you should be in your oh-my-zsh root with master on it and do git status)</span><br><span class="line"><span class="meta">$</span>git stash/git add . (to stash the changes and head back to master/add the changes)</span><br><span class="line"><span class="meta">$</span>git commit -m (if you decided to add the changes)</span><br><span class="line"><span class="meta">$</span>upgrade_oh_my_zsh (you can now upgrade)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;快速安装&quot;&gt;&lt;a href=&quot;#快速安装&quot; class=&quot;headerlink&quot; title=&quot;快速安装&quot;&gt;&lt;/a&gt;快速安装&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
      <category term="it" scheme="https://linlshare.github.io/categories/it/"/>
    
      <category term="tool" scheme="https://linlshare.github.io/categories/it/tool/"/>
    
    
      <category term="zsh" scheme="https://linlshare.github.io/tags/zsh/"/>
    
  </entry>
  
  <entry>
    <title>Splash</title>
    <link href="https://linlshare.github.io/2019/03/26/it/robot/Splash/"/>
    <id>https://linlshare.github.io/2019/03/26/it/robot/Splash/</id>
    <published>2019-03-26T03:38:59.000Z</published>
    <updated>2019-03-27T10:18:29.752Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="Linux-Docker"><a href="#Linux-Docker" class="headerlink" title="Linux + Docker"></a>Linux + Docker</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -p 8050:8050 -p 5023:5023 scrapinghub/splash</span><br></pre></td></tr></table></figure><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://0.0.0.0:8050/</span><br></pre></td></tr></table></figure><h2 id="Splash-HTTP-API"><a href="#Splash-HTTP-API" class="headerlink" title="Splash HTTP API"></a>Splash HTTP API</h2><h3 id="请求方式"><a href="#请求方式" class="headerlink" title="请求方式"></a>请求方式</h3><ol><li>GET，将参数转为 URL 参数；</li><li>POST，将参数编码为 JSON 格式并使用 <code>Content-Type: application/json</code> 请求体。</li></ol><h2 id="获取-Cookie-的-Lua-脚本"><a href="#获取-Cookie-的-Lua-脚本" class="headerlink" title="获取 Cookie 的 Lua 脚本"></a>获取 Cookie 的 Lua 脚本</h2><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span><span class="params">(splash, args)</span></span></span><br><span class="line">  splash.images_enabled = <span class="literal">false</span></span><br><span class="line">  splash.resource_timeout = <span class="number">90</span></span><br><span class="line">  splash:set_user_agent(args.ua)</span><br><span class="line">  splash:on_request(<span class="function"><span class="keyword">function</span><span class="params">(request)</span></span> request:set_proxy&#123;host = args.host, port = args.port&#125; <span class="keyword">end</span>)</span><br><span class="line">  <span class="built_in">assert</span>(splash:go(args.url))</span><br><span class="line">  <span class="built_in">assert</span>(splash:wait(<span class="number">0.5</span>))</span><br><span class="line">  <span class="keyword">local</span> cookie = splash:evaljs(<span class="string">'document.cookie'</span>)</span><br><span class="line">  <span class="keyword">return</span> cookie</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="部署到生产环境"><a href="#部署到生产环境" class="headerlink" title="部署到生产环境"></a>部署到生产环境</h2><ol><li>作为守护进程启动；</li><li>奔溃重启；</li><li>控制内存消耗；</li><li>运行多个 Splash 实例；</li><li>请求队列应该放到负载均衡里面；</li><li>使用跟开发环境一致的版本。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8050:8050 --memory=3G --restart=always scrapinghub/splash:3.3.1 --maxrss 4000 --max-timeout 300 --slots 5</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;h3 id=&quot;Linux-Docker&quot;&gt;&lt;a href=&quot;#Linux-Docker&quot; class=&quot;headerlink&quot; title=&quot;L
      
    
    </summary>
    
      <category term="it" scheme="https://linlshare.github.io/categories/it/"/>
    
      <category term="robot" scheme="https://linlshare.github.io/categories/it/robot/"/>
    
    
      <category term="Robot" scheme="https://linlshare.github.io/tags/Robot/"/>
    
      <category term="Splash" scheme="https://linlshare.github.io/tags/Splash/"/>
    
  </entry>
  
  <entry>
    <title>进程和线程</title>
    <link href="https://linlshare.github.io/2019/02/19/it/concept/%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/"/>
    <id>https://linlshare.github.io/2019/02/19/it/concept/进程和线程/</id>
    <published>2019-02-19T06:37:16.000Z</published>
    <updated>2019-03-11T08:56:02.286Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li>进程：程序的一次运行，操作系统分配内存资源和调度的基本的单位；有独立的内存地址；一个程序至少有一个进程；</li><li>线程：最小的执行单元，CPU 调度的单位；由线程ID、程序计数器、寄存器集合和栈组成；一个进程至少有一个线程，多个线程之间共享一段内存，且可并发执行</li></ul><h2 id="进程状态"><a href="#进程状态" class="headerlink" title="进程状态"></a>进程状态</h2><ul><li>就绪</li><li>执行</li><li>阻塞</li></ul><h2 id="线程间共享变量"><a href="#线程间共享变量" class="headerlink" title="线程间共享变量"></a>线程间共享变量</h2><ul><li>互斥锁</li><li>信号量</li></ul><h2 id="CPU-调度"><a href="#CPU-调度" class="headerlink" title="CPU 调度"></a>CPU 调度</h2><ul><li>先到先服务调度（FIFS）</li><li>最短作业优先调度（SJF）</li><li>优先权调度</li><li>轮转法调度（RR）</li><li>多级队列调度</li><li>多级反馈队列调度</li></ul><h2 id="问答"><a href="#问答" class="headerlink" title="问答"></a>问答</h2><h3 id="When-is-a-Java-thread-alive"><a href="#When-is-a-Java-thread-alive" class="headerlink" title="When is a Java thread alive?"></a><a href="https://stackoverflow.com/questions/17293304/when-is-a-java-thread-alive" target="_blank" rel="noopener">When is a Java thread alive?</a></h3><p>According to the Javadoc you mentionned:</p><blockquote><p>A thread is alive if it has been started and has not yet died.</p></blockquote><p>A thread “starts” when its <code>start()</code> method is invoked and “dies” at the end of its <code>run()</code> method, or when <code>stop()</code> (now deprecated) is invoked. So yes, a thread is “alive” when its <code>run()</code> method is still ongoing, but it is also “alive” in the time window between the invocation of <code>start()</code> and the implicit invocation of the <code>run()</code> method by the JVM.</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html" target="_blank" rel="noopener">进程与线程的一个简单解释 - 阮一峰的网络日志</a></li><li><a href="https://huanghantao.github.io/2018/01/26/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%AF%B4%E7%BA%BF%E7%A8%8B%E6%98%AFCPU%E8%B0%83%E5%BA%A6%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8D%95%E4%BD%8D/" target="_blank" rel="noopener">为什么说线程是CPU调度的基本单位 - huanghantao.github.io</a></li><li><a href="https://www.jianshu.com/p/ac9ce2afd126" target="_blank" rel="noopener">操作系统之进程的几种状态 - 简书</a></li><li><a href="https://blog.csdn.net/u013616945/article/details/69569267" target="_blank" rel="noopener">CPU调度算法总结 - CSDN</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;进程：程序的一次运行，操作系统分配内存资源和调度的基本的单位；有独立的内存地址；一个程序至少有一个进程；&lt;/li&gt;
&lt;li&gt;线程
      
    
    </summary>
    
      <category term="it" scheme="https://linlshare.github.io/categories/it/"/>
    
      <category term="concept" scheme="https://linlshare.github.io/categories/it/concept/"/>
    
    
      <category term="进程" scheme="https://linlshare.github.io/tags/%E8%BF%9B%E7%A8%8B/"/>
    
      <category term="线程" scheme="https://linlshare.github.io/tags/%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java</title>
    <link href="https://linlshare.github.io/2019/02/13/it/java/base/Java/"/>
    <id>https://linlshare.github.io/2019/02/13/it/java/base/Java/</id>
    <published>2019-02-13T01:48:14.000Z</published>
    <updated>2019-04-15T04:01:24.684Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装-JDK-环境"><a href="#安装-JDK-环境" class="headerlink" title="安装 JDK 环境"></a>安装 JDK 环境</h2><h3 id="在-Mac-下"><a href="#在-Mac-下" class="headerlink" title="在 Mac 下"></a>在 Mac 下</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 安装 JDK 8</span><br><span class="line">brew tap caskroom/versions</span><br><span class="line">brew cask install java8</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 安装最新版本</span><br><span class="line">brew cask install java</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 使用 jenv 管理 JDK 版本</span><br><span class="line">brew install jenv</span><br><span class="line">ls -1 /Library/Java/JavaVirtualMachines </span><br><span class="line">mkdir ~/.jenv/versions</span><br><span class="line">jenv add /Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/</span><br><span class="line">jenv versions</span><br><span class="line">jenv global 1.8</span><br><span class="line">java -version</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 检测 jenv 是否正常安装</span><br><span class="line">jenv doctor</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 在 zsh 中启用</span><br><span class="line">vim ~/.zshrc</span><br><span class="line"><span class="meta">#</span># 在末尾追加</span><br><span class="line">export JENV_ROOT="/usr/local/opt/jenv"</span><br><span class="line">if which jenv &gt; /dev/null; then eval "$(jenv init -)"; fi</span><br><span class="line"><span class="meta">#</span># 使其生效</span><br><span class="line">source ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 设置 Java Home</span><br><span class="line">jenv enable-plugin export</span><br><span class="line">exec $SHELL -l</span><br><span class="line">echo $&#123;JAVA_HOME&#125;</span><br></pre></td></tr></table></figure><h2 id="What-is-the-Limit-to-the-Number-of-Threads-You-Can-Create"><a href="#What-is-the-Limit-to-the-Number-of-Threads-You-Can-Create" class="headerlink" title="What is the Limit to the Number of Threads You Can Create?"></a>What is the Limit to the Number of Threads You Can Create?</h2><p>The time it takes to create a thread increases as you create more thread. For the 32-bit JVM, the stack size appears to limit the number of threads you can create. This may be due to the limited address space. In any case, the memory used by each thread’s stack add up. If you have a stack of 128KB and you have 20K threads it will use 2.5 GB of virtual memory.</p><table><thead><tr><th style="text-align:left">Bitness</th><th style="text-align:left">Stack Size</th><th style="text-align:left">Max threads</th></tr></thead><tbody><tr><td style="text-align:left">32-bit</td><td style="text-align:left">64K</td><td style="text-align:left">32,073</td></tr><tr><td style="text-align:left">32-bit</td><td style="text-align:left">128K</td><td style="text-align:left">20,549</td></tr><tr><td style="text-align:left">32-bit</td><td style="text-align:left">256K</td><td style="text-align:left">11,216</td></tr><tr><td style="text-align:left">64-bit</td><td style="text-align:left">64K</td><td style="text-align:left">stack too small</td></tr><tr><td style="text-align:left">64-bit</td><td style="text-align:left">128K</td><td style="text-align:left">32,072</td></tr><tr><td style="text-align:left">64-bit</td><td style="text-align:left">512K</td><td style="text-align:left">32,072</td></tr></tbody></table><p>参考：<a href="https://dzone.com/articles/java-what-limit-number-threads" target="_blank" rel="noopener">Java: What is the Limit to the Number of Threads You Can Create?</a></p><h2 id="更新-Amazon-Linux-JDK-从-7-到-8"><a href="#更新-Amazon-Linux-JDK-从-7-到-8" class="headerlink" title="更新 Amazon Linux JDK 从 7 到 8"></a>更新 Amazon Linux JDK 从 7 到 8</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install java-1.8.0</span><br><span class="line">sudo yum remove java-1.7.0-openjdk</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装-JDK-环境&quot;&gt;&lt;a href=&quot;#安装-JDK-环境&quot; class=&quot;headerlink&quot; title=&quot;安装 JDK 环境&quot;&gt;&lt;/a&gt;安装 JDK 环境&lt;/h2&gt;&lt;h3 id=&quot;在-Mac-下&quot;&gt;&lt;a href=&quot;#在-Mac-下&quot; class=&quot;he
      
    
    </summary>
    
      <category term="it" scheme="https://linlshare.github.io/categories/it/"/>
    
      <category term="java" scheme="https://linlshare.github.io/categories/it/java/"/>
    
      <category term="base" scheme="https://linlshare.github.io/categories/it/java/base/"/>
    
    
      <category term="Java" scheme="https://linlshare.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>为什么带饭</title>
    <link href="https://linlshare.github.io/2019/02/08/recipe/%E4%B8%BA%E4%BB%80%E4%B9%88%E5%B8%A6%E9%A5%AD/"/>
    <id>https://linlshare.github.io/2019/02/08/recipe/为什么带饭/</id>
    <published>2019-02-08T07:31:58.000Z</published>
    <updated>2019-02-08T15:45:56.401Z</updated>
    
    <content type="html"><![CDATA[<h2 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h2><p>如果可以在家自己煮饭吃，那是极好极健康的，但在外上班很难有时间认真地做饭，特别是午餐。下馆子、叫外卖是普遍的选择，但餐厅的食品质量和种类显然无法满足我们正常的营养摄取；久而久之还会吃腻了，对吃饭这回事产生厌烦感。此外，商家为掩盖肉类的不鲜添加的各种不必要的调料或者进行不健康的烹饪（例如油炸）对身体健康极为有害。为着健康故，自带午饭是不二之选。下面主要整理带饭的一些小贴士。</p><h2 id="饭盒"><a href="#饭盒" class="headerlink" title="饭盒"></a>饭盒</h2><ul><li>聚丙烯(PP)材质，耐微波炉加热。</li><li>使用玻璃器皿，减少细菌滋生和避免塑料中的有毒分子侵入食物。</li></ul><h2 id="食材"><a href="#食材" class="headerlink" title="食材"></a>食材</h2><ul><li>主食：米饭、番薯、土豆、大豆及其制品。</li><li>素菜：块茎类（芦笋、土豆、豆角、萝卜）、水果（西红柿）、西芹、冬瓜、茄子、蘑菇、木耳、海带、南瓜等可多次加热的蔬菜水果。</li><li>荤菜：鸡肉、瘦肉、牛肉。</li><li>饮料：温水、酸奶。</li></ul><h2 id="禁忌"><a href="#禁忌" class="headerlink" title="禁忌"></a>禁忌</h2><ul><li>忌海鲜，因为还嫌隔夜后易产生蛋白质降解物，会损伤肝、肾功能且降低口感。</li><li>忌凉拌菜、绿叶蔬菜和青椒等，因为这些隔夜后亚硝酸盐含量较高，且色香味俱差。</li><li>忌煎炸。</li><li>忌高油脂食物，因为加热时析出的油脂会使加热不匀且高油脂食物对身体健康有害。</li></ul><h2 id="菜谱"><a href="#菜谱" class="headerlink" title="菜谱"></a>菜谱</h2><p>// Todo</p><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><ol><li>前天晚上做好饭菜，菜七八分熟即可；</li><li>先取饭菜放入保鲜盒中；</li><li>置放保鲜盒到冰箱中冷藏；</li><li>早上提至公司在冰箱或者阴凉处置放；</li><li>中午将保鲜盒盖子取下，放入微波炉加热两分钟至全熟；</li><li>享用午餐。</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://www.meishij.net/changshi/shangbanzudaifanxutiaoduifanheheshiwu.html" target="_blank" rel="noopener">上班族带饭，需挑对饭盒和食物 - 美食杰</a></li><li><a href="http://jiankang.163.com/14/1104/10/AA706QD70038000S.html" target="_blank" rel="noopener">上班族“带饭”有大学问 - 网易健康</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;缘起&quot;&gt;&lt;a href=&quot;#缘起&quot; class=&quot;headerlink&quot; title=&quot;缘起&quot;&gt;&lt;/a&gt;缘起&lt;/h2&gt;&lt;p&gt;如果可以在家自己煮饭吃，那是极好极健康的，但在外上班很难有时间认真地做饭，特别是午餐。下馆子、叫外卖是普遍的选择，但餐厅的食品质量和种类显然
      
    
    </summary>
    
      <category term="recipe" scheme="https://linlshare.github.io/categories/recipe/"/>
    
    
      <category term="Recipe" scheme="https://linlshare.github.io/tags/Recipe/"/>
    
  </entry>
  
  <entry>
    <title>养生自律清单</title>
    <link href="https://linlshare.github.io/2019/01/31/health/%E5%85%BB%E7%94%9F%E8%87%AA%E5%BE%8B%E6%B8%85%E5%8D%95/"/>
    <id>https://linlshare.github.io/2019/01/31/health/养生自律清单/</id>
    <published>2019-01-31T00:47:36.000Z</published>
    <updated>2019-01-31T15:36:27.058Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>世界<a href="http://apps.who.int/mediacentre/factsheets/fs355/zh/index.html" target="_blank" rel="noopener">卫生组织2017年6月的一份报道</a>显示：</p><ul><li>非传染性疾病（慢性病）每年导致4000万人死亡，相当于全球总死亡的70%。</li><li>每年，1700万例非传染性疾病死亡发生在70岁之前；这类“过早”死亡有87%发生在低收入和中等收入国家。</li><li>心血管疾病引起的非传染性疾病死亡人数最多，每年造成1770万人死亡，其次是癌症（880万人）、呼吸系统疾病（390万人）以及糖尿病（160万人）。</li><li>这四类疾病占所有非传染性疾病死亡的81%。</li></ul><p>报道同时指出导致非传染性疾病蔓延的危险因素有：迅速而无序的城市化、不健康生活方式的全球化以及人口老龄化。其中不健康的生活方式主要有不健康饮食和缺乏运动。</p><p>作为个人我们在应对疯狂的城市化和人口老龄化上的作为很有限，我们可以控制的是自身的生活方式，饮食和运动是我们养生的重要内容。</p><p>另据中国卫生信息与健康医疗大数据学会家庭健康专委会联合家庭报社最新发布的<a href="http://www.cfnews.org.cn/uploads/soft/181215/2018%E4%B8%AD%E5%9B%BD%E5%AE%B6%E5%BA%AD%E5%81%A5%E5%BA%B7%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%A5%E5%91%8A.doc" target="_blank" rel="noopener">2018中国家庭健康大数据报告</a>显示：</p><blockquote><p>2018年4月《中国城镇居民心理健康白皮书》指出，目前我国城镇居民，73.6%的人处于心理亚健康状态，存在不同程度心理问题的人有16.1%，心理健康的人仅为10.3%。同时，慢病人群心理问题伴发率极高，心理健康的仅有5.1%。</p></blockquote><blockquote><p>在对在线问诊心理疾病分析发现，未成年患者约占40.3%，其中3-6岁儿童比例为24.5%。从疾病分类来看，青少年在线问诊心理疾病以儿童多动症、孤独症、青少年抑郁等问题比较突出。</p></blockquote><p>可见心理上的疾病尤甚于身体上的疾病，养心是养生的重中之重，只保养身体而不关注心理健康是无法称之为真正健康的人的。</p><p>下面就如何调养身心以达养生目的罗列我的清单。</p><h2 id="心灵"><a href="#心灵" class="headerlink" title="心灵"></a>心灵</h2><ul><li>[ ] 去阅读富有灵性的书籍，诗歌、散文、戏曲或宗教典籍。</li><li>[ ] 通过瑜伽、打坐、林间散步和节食等行为调和心灵。</li><li>[ ] 去聆听富有灵性的音乐，尤其是巴洛克音乐和古典音乐。</li><li>[ ] 关照内心，认识自己。</li><li>[ ] 和谐的人际关系，坦诚待人但不交浅言深，滴水之恩铭记于心适时以报。</li></ul><h2 id="饮食"><a href="#饮食" class="headerlink" title="饮食"></a>饮食</h2><ul><li>[ ] 不吃油炸、膨化、碳酸饮料等垃圾食品。</li><li>[ ] 少吃肉类食品，特别是小餐馆提供的肉食。</li><li>[ ] 以瓜果蔬菜、豆类和米饭为主食。</li><li>[ ] 尽可能地自己做饭吃，用心烹饪，简单美味。</li><li>[ ] 尽可能地减少聚餐，如无法推脱则尽可能缓慢地进食，少吃肉类，少喝酒。</li><li>[ ] 饮食有度，不超过八分饱以保持理性和灵活。</li></ul><h2 id="运动"><a href="#运动" class="headerlink" title="运动"></a>运动</h2><ul><li>[ ] 早晨，在阳光初升，人世间还没那么混浊时去林间跑步迎接新的一天。</li><li>[ ] 抑或在天气不允许的情况下进行室内健身操、瑜伽或打坐。</li><li>[ ] 每周去远方徒步，换换空气，换换心情，还可以练习摄影。</li><li>[ ] 学一门功夫或者舞蹈听起来不错。</li><li>[ ] 早睡早起。</li></ul><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>每一次的自律都不会白费，时光会令其大大增值。与之相对，每一次的放纵都在加深身心的衰老，时光会毫不留情地刻在你的头上、脸上和腿上。当我们听说有一种简单、健康而清醒的生活方式，可以让我们有足够的时间和精力去应对生活和工作的挑战，我们还有什么理由拒绝它呢？我罗列的清单并不完美，这完全是我的一孔之见，但简单、健康而清醒的生活准则，在我看来是人人需要的，大家都可以依次罗列自身的养生自律清单，去好好生活。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;世界&lt;a href=&quot;http://apps.who.int/mediacentre/factsheets/fs355/zh/index.h
      
    
    </summary>
    
      <category term="health" scheme="https://linlshare.github.io/categories/health/"/>
    
    
      <category term="Health" scheme="https://linlshare.github.io/tags/Health/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu</title>
    <link href="https://linlshare.github.io/2019/01/29/it/tool/Ubuntu/"/>
    <id>https://linlshare.github.io/2019/01/29/it/tool/Ubuntu/</id>
    <published>2019-01-29T12:39:32.000Z</published>
    <updated>2019-01-29T12:45:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="排错"><a href="#排错" class="headerlink" title="排错"></a>排错</h2><h3 id="fix-broken-package"><a href="#fix-broken-package" class="headerlink" title="fix broken package"></a>fix broken package</h3><p>参考：<a href="http://www.iasptk.com/ubuntu-fix-broken-package-best-solution/" target="_blank" rel="noopener">Ubuntu fix broken package (best solution)</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> step 1</span><br><span class="line">sudo apt-get update --fix-missing</span><br><span class="line">sudo dpkg --configure -a</span><br><span class="line">sudo apt-get install -f</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> step 2</span><br><span class="line">sudo vim /var/lib/dpkg/status</span><br><span class="line">Locate the corrupt package, and remove the whole block of information about it and save the file.</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;排错&quot;&gt;&lt;a href=&quot;#排错&quot; class=&quot;headerlink&quot; title=&quot;排错&quot;&gt;&lt;/a&gt;排错&lt;/h2&gt;&lt;h3 id=&quot;fix-broken-package&quot;&gt;&lt;a href=&quot;#fix-broken-package&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="it" scheme="https://linlshare.github.io/categories/it/"/>
    
      <category term="tool" scheme="https://linlshare.github.io/categories/it/tool/"/>
    
    
      <category term="Ubuntu" scheme="https://linlshare.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>瓦尔登湖</title>
    <link href="https://linlshare.github.io/2019/01/27/reading/%E7%93%A6%E5%B0%94%E7%99%BB%E6%B9%96/"/>
    <id>https://linlshare.github.io/2019/01/27/reading/瓦尔登湖/</id>
    <published>2019-01-27T11:49:14.000Z</published>
    <updated>2019-01-27T11:49:53.338Z</updated>
    
    <content type="html"><![CDATA[<p>亨利·戴维·梭罗（著）<br>李继宏（译）</p><h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><ul><li><p>其实 我 倒 不强 求 别人 采取 我的 生活 模式， 既 因为 在他 熟练 地 掌握 这种 方式 之前， 我自己 可能 已 经过 上 另一种 生活， 也 因为 我 希望 这 世界上 有 尽可能 多 与众不同 的 人； 但我 盼望 每个人 都能 非常 清醒 地 去 发现 和 追求 他 自己的 生活方式， 而 不是 模仿 他的 父亲、 母亲 或者 邻居。</p></li><li><p>身边 的 人 要来 就 让他 来， 要去 就 让他 去， 让 钟声 回荡， 让 孩子 哭喊—— 下定 决心 好好 地 过 一天。</p></li></ul><h2 id="生计"><a href="#生计" class="headerlink" title="生计"></a>生计</h2><ul><li><p>他们 没有 伊 奥 劳 斯  这样 的 朋友 来 用 火红 的 铁块 去 烙 海 德 拉  的 脖子， 每当 砍掉 一 个头， 会有 两个 新的 头 生出 来。</p></li><li><p>永远 洗 不干净 的 奥 革 阿 斯 牛栏</p></li><li><p>人性 最 美好 的 品质 就 像 水果 表皮 的 白霜， 只有 通过 最 谨慎 的 处理 才能 得到 保留。</p></li><li><p>人 对 自己的 看法， 决定 或者说 影响 着 他的 命运。</p></li><li><p>就连 各种 所谓 的 游戏 和 娱乐， 也 隐藏 着 一种 反复 出现 然而 谁也 没有 察觉 的 绝望。</p></li><li><p>没有 哪种 思考 或 做事 的 方式， 无论 它是 多么 的 古老， 值得 我们 盲目 地 去 跟 从。</p></li><li><p>老 人有 老 习惯， 新人 有 新办 法。</p></li><li><p>还有 什么 比我 们 瞬间 相互 了解 更大 的 奇迹 吗？ 那就 是我 们 可以 只 花 一个 小时， 就能 彻底 认识 这个 世界 的 所有 历程， 甚至 是 各个 世界 的 所有 历程。 去 读 历史、 诗歌 和 神话 吧！——</p></li><li><p>就 本地 的 气候 而言， 人的 生活 必需品 细究 起 来的 话， 可以 具体 分为 如下 几种： 食物、 住所、 衣物 和 燃料；</p></li><li><p>那么 我们 身体 的 最大 需求 就是 保暖， 在 我们 体内 维持 生命 的 热量。</p></li><li><p>我们 只有 站在 安贫乐道 的 立场 上， 才能 够 无私 地 或者 明智 地 去 观察 人类 的 生活。</p></li><li><p>哪 怕是 就 外在 的 生活方式 而言， 哲学家 也是 领先 于 他的 时代 的。 他 进食、 居住、 穿衣 和 取暖 的 方式 并不 像 和他 同时代 的 人。 一个人 既然 成为 哲学家， 他用 以 维持 生命 热量 的 方式 怎能 不比 其他人 高明 呢？</p></li><li><p>土壤 显然 是 适合 种子 的， 因为 它的 胚芽 已经 向下 扎 稳 了 根， 它的 枝叶 现在 可以 满怀信心 地 向上 茁 长。</p></li><li><p>诚然， 我 其实 并没有 帮助 太阳 升起， 但在 日出 时 已经 起床 是 极其 重要的。</p></li><li><p>曾有 很长 时间 我是 记者， 我 服务 的 那家 刊物 发行量 不是 非常 大， 该 刊 的 编辑 始终 认为 我 写的 大部分 稿件 不适合 刊登 ； 就 像 大多数 作家 那样， 我 付出 了 劳动， 得到 的 却 只有 痛苦。 然而， 就这 件事 来说， 痛苦 本身 就是 一种 回报。</p></li><li><p>皇帝 和 皇后 的 衣服 都 只 穿 一次， 虽然 他们 无须 亲自 动手， 都是 裁缝 给 他们 做 的， 但他 们 无法 知道 穿着 合身 的 衣服 有多 么 舒适。 他们 比 挂着 干净 衣服 的 木架 好不 了 多少。</p></li><li><p>人们 追求 衣服 时髦 或者 至少 干净 并且 没有 补丁 的 心情， 远比 追求 良知 完整无损 的 心情 要 迫切。</p></li><li><p>我们 认识 的 人 没 几个， 但 认识 的 上衣 和 裤子 倒是 很多。</p></li><li><p>如果 你 面前 有事 情 要做， 就 穿着 旧衣 服 去做 吧。</p></li><li><p>我们 换 外壳 的 季节， 就 像 禽鸟 换 羽毛 那样， 是 生命 中的 关键 时刻。</p></li><li><p>只有 穿衣 者 严肃 的 双眼， 以及 真诚 的 人生， 才能 抑制 人们 的 嘲笑， 让 衣服 变得 神圣。</p></li><li><p>在 印第安人 的 纪事 中， 一座 茅屋 标志着 一天 的 行程，</p></li><li><p>人生 来不 够 高大 强壮， 只好 设法 缩小 他的 世界， 用 墙壁 围 出 适合 自身 的 空间。</p></li><li><p>人 想要 一个 家庭， 一个 地方 来给 他 温暖 或者 舒适， 他 先是 想要 身体 的 温暖， 然后 是 情感 的 温暖。</p></li><li><p>假如 文明 人的 追求 并不 比 野蛮人 高尚， 假如 他把 生命 的 大部分 都 只用于 谋取 基本 的 必需品 和 舒适 品， 那么 他为 什么 要比 野蛮人 住 得 更好 呢？</p></li><li><p>最好 的 艺术作品 应该 表现 人如 何 奋斗 着 将 自己 从这 种 境况 中 解放 出来，</p></li><li><p>在我看来， 人类 停留在 目前 这种 低级 而 原始 的 境况 中， 也是 由于 相似 的 原因； 但如 果 能够 感受 到 春天 正在 将他 们 唤醒， 他们 必定 可以 过 上一 种 更为 高级、 更具 灵性 的 生活。</p></li><li><p>房屋 无非 是 地穴 入口 的 某种 门廊 而已。</p></li><li><p>我们 生在 社会 里。 并非 只有 裁缝 才是 九分之一 个人 ， 牧师、 商人、 农夫 也都 是。</p></li><li><p>如何 才能 真正 地 把 房子 由 里 到 外 都 盖好， 如何 让 装潢 成为 顺其自然 的 事情。</p></li><li><p>房屋 有如 贝壳， 让 它们 变得 秀丽 的， 是 寄居 在内 者 的 生活， 而 不是 外表 的 任何 纹 饰；</p></li><li><p>我 认为 大学 的 基础 倒不如 由 学生 或者 那些 想要 从 大学 获益 的 人 来 奠定， 这是 个 更好 的 办法。</p></li><li><p>学校里 的 教授 会用 望远镜 和 显微镜 观察 世界， 就是 不用 天生 的 双眼； 会 研究 化学， 就是 不 研究 面包 是 怎么 做 的； 会 研究 各种 技术， 就是 不 研究 如何 得到 它们； 能够 发现 海王星 的 卫星 ， 却 发现 不了 他 眼里 的 灰尘 ， 也 发现 不了 他本人 是 哪个 流浪汉 的 卫星； 会 观察 醋 滴 里 的 怪物， 却被 身边 的 怪物 包围 而 不 自知。</p></li><li><p>它们 是 得到 改善 的 手段， 可是 目的 却 未经 改善， 本来 就 非常 容易 达到；</p></li><li><p>最快 的 旅游 方式 是 步行。</p></li><li><p>把 人生 中最 美好 的 阶段 用来 赚钱， 以便 能够 在 人生 中最 没有 价值 的 阶段 享受 一点 值得 怀疑 的 自由，</p></li><li><p>因此 人 不仅 要 为他 心内 的 兽性 劳动， 还要 为他 身外 的 牲畜 劳动。</p></li><li><p>民族 想要 千古 流芳， 靠的 应该 不是 建筑， 而是 强大 的 抽象 思想 吧？ 东方 所有 的 废墟 加 起来， 也 不及《 薄 伽 梵 歌》  令人 钦佩！</p></li><li><p>许多人 关心 西方 和 东方 的 古迹， 想要 知道 是 谁 修建 了 它们。 对 我 个人 来说， 我想 知道 的 是 那些 不去 修建 它们 的 人， 那些 超脱 于 这种 无聊 琐事 的 人。</p></li><li><p>人们 饿 肚子 却 很 常见， 那不 是因为 缺少 必要 的 食物， 而是 由于 他们 想吃 奢侈 的 菜肴；</p></li><li><p>我曾 见到 某个 移民， 背着 全副 家当 蹒跚 地 前行， 那 包裹 看上去 就 像 长在 他 脖子 后 面的 大 肿瘤； 我 觉得 他很 可怜， 倒 不是 因为 他 全部 家当 就 那么 多， 而是 因为 他 居然 要把 全部 家当 都 搬走。</p></li><li><p>我也 没有 花钱 去 买 窗帘， 因为 我不 需要 遮挡， 会 来 窥视 我的 只有 太阳 和 月亮， 而我 又 很 愿意 让 它们 看 进来。</p></li><li><p>人们 做 的 坏事， 在他 们 身后 依然 流毒 无穷。”</p></li><li><p>无论 什么 东西， 只要 一经 买卖， 都会 变得 不祥； 哪怕 你 交易 的 是 来自 天堂 的 福音， 生意 的 本质 也会 将 这件 事变 得很 邪恶。</p></li><li><p>有些 人 假使 得到 比 现在 更多 的 闲暇 时间， 将会 不知道 该 做些 什么， 我 建议 他们 加倍 努力 地 工作—— 直到 他们 为 自己 赎 了 身， 拿到 自由 的 文件</p></li><li><p>劳动者 日落 而 息， 剩余 的 时间 可以 不管 他的 工作， 自由 地 去做 自己 想做 的 事情； 而他 的 雇主 就 不同 啦， 每个 月 都要 费尽心机 去 算计， 一年到头 没有 休息 的 时间。</p></li><li><p>只要 朴素 地、 明智 地 生活， 在这 世间 谋生 并非 痛苦 的 差事， 而是 欢快 的 娱乐； 就 现在 那些 较为 朴素 的 民族 来说 吧， 他们 所 从事 的 职业 更 像是 娱乐活动。</p></li><li><p>但我 盼望 每个人 都能 非常 清醒 地 去 发现 和 追求 他 自己的 生活方式， 而 不是 模仿 他的 父亲、 母亲 或者 邻居。</p></li><li><p>独 行的 人 今天 就可以 上路， 而有 同伴 的 旅客 则 必须 等 别人 做好 准备， 可能 需要 很长 时间 才能 出发。</p></li><li><p>做好事， 做人 们 常说 的 好事， 绝不 应 成为 我人 生的 主要 目标， 而且 基本上 绝不 应 刻意 为之。</p></li><li><p>与其 去做 好事， 不如 做个 好人。”</p></li><li><p>假如 我 清楚 地 知道 有人 带着 做好事 的 想法 要来 我家， 那 我 肯定 会 没命 地 逃跑， 就 像 躲开 非洲 沙漠 那种 所谓 的 西 蒙 风 （ 那种 干燥 而 炙热 的 烈风 会 将 沙子 吹进 你的 嘴巴、 鼻子、 耳朵 和 眼睛， 直到 你 窒息 而 亡）， 因为 我 害怕 他 要给 我 做好事—— 我怕 我的 血液 会 染上 做好事 的 病毒。 那是 不行 的—— 如果 是 这样， 我 宁可 顺其自然 地 忍受 坏事。</p></li><li><p>斩 恶 树 千 枝， 不如 断 其一 根，</p></li><li><p>在我看来， 一个 人的 正直 和好 心 并不 算 主要 的 美德， 这些 不过 是他 的 枝叶 而已。</p></li><li><p>我想 要的 是一 个人 的 鲜花 和 果实； 我 希望 他 身上 有 某种 芬芳 来 熏陶 我， 在 我们 的 交往 中 能够 感受 到 他的 成熟。 他的 好心 必须 不是 片面 的、 短暂 的 行动， 而是 持续不断 的 漫 溢， 并且 这种 漫 溢 是 毫不 做作、 纯属 自发 的。 这才 是 能够 遮盖 各种 罪恶 的 善行 。</p></li><li><p>如果 你 曾经 上 当做 过 慈善 的 事， 请 别 让你 的 左手 知道 你的 右手 的 所作所为 ， 因为 那 并不 值得 了解。</p></li><li><p>一旦 救起 落水 的 人， 就 系 好 你的 鞋带 吧。 然后 按照 你自己 的 节奏， 去做 一些 自由 的 事。</p></li><li><p>我们 不要 去做 管理 穷人 的 官员， 而是 要 努力 成为 对这 个 世界 有贡献 的 人。</p></li><li><p>每 棵树 都有 其 相应 而 固定 的 开花结果 的 季节， 其间 它 枝 密 叶茂、 繁华 满 树， 而后 则 枯萎 凋零； 柏树 和 这 两种 状态 无缘， 它 总是 苍苍 郁郁， 而这 正是 自由 者 或者说 不受 宗教 羁绊 者 的 特性—— 别 让 你的 心 牵挂 那些 短暂 易变 的 东西； 因为 哪怕 哈 里 发  的 种族 灭绝 了， 底 格 里 斯 河  依然 会 流经 巴格达 ： 如果 你 手上 很 宽裕， 像 枣树 那样 慷慨 大方 吧； 如果 你 没有 可以 送出 去的 余 财， 那就 像 效仿 柏树， 当 一个 自由 的 人 吧。”</p></li><li><p>你 逼迫 许多人 错误 地 将 逆来顺受 的 态度， 捧 得 高于 积极 进取 的 坚强， 这些 凄惨 的 可怜人 只能 永远 流于 平庸， 变成 你 卑贱 的 精神 奴隶， 但我 们 只想 要 认可 和 倡导 的 美德 是 豪爽、 勇往直前、 挥金如土 和 富丽堂皇、 洞见 一切 的 未雨绸缪 和 漫无边际 的 恢弘 气度， 和 自古 流传 至今 的， 英雄 本色， 它 并没有 具体 的 名字， 只有 几个 典范， 比如 赫 拉 克 勒 斯 、 阿 喀 琉 斯  和 忒 修 斯 。</p></li><li><p>居所和生活的目标</p></li><li><p>这 片 土地 一年四季 的 风光， 我 不用 独轮车 也可以 带走。</p></li><li><p>我 并 不想 写 一曲 怅惘 的 哀歌， 而是 准备 像 黎明 的 公鸡 那样 热情 地 啼 唤， 以便 唤醒 我的 邻居。</p></li><li><p>每次 望 向 屋外 的 瓦 尔 登 湖， 我总 觉得 它 像是 山峰 之上 的 天池， 它的 湖 底 远远 高于 其他 湖泊 的 水面； 到了 日出 时分， 我 看见 这 湖 渐渐 脱掉 夜 间的 雾 衣， 细 纹 荡漾 或 波 平 如 镜 的 湖面 慢慢 地 露出 来， 鬼魂 般 的 迷雾 则 悄然 从 四面八方 退入 树林， 仿佛 它们 的 秘密 聚会 终于 散场。 而 朝露 则 悬挂 在 枝叶 上 久久 不肯 离去， 群山 两侧 也 湿漉漉 的 满是 露水。</p></li><li><p>在 水边 居住 是 很好 的， 水能 让 大地 浮起 来。 哪怕 是最 小的 水井， 也有 一个 优点， 就是 当你 往 井底 看 时， 它 能 让你 明白 大地 并不是 相连 的， 而是 隔断 的。</p></li><li><p>我总 觉得 那片 草原 宛 似 水盆 里 的 铜钱， 而 瓦 尔 登 湖 周围 的 土地 就 像 薄薄 的 面包 皮， 就连 这 小小 的 洪水 也能 让 它们 彼此 隔断 和 漂浮 起来； 我 于是 想起 自己 寄居 在 旱地 之上 。</p></li><li><p>早晨 是一 天 中最 值得 纪念 的 光景， 是 苏醒 的 时分。 这时候 我们 的 倦意 最弱， 部分 平时 昏昏沉沉 的 器官 至少 能够 清醒 一个 小时。 假如 我们 不是 在 气魄 的 悸动 中， 而是 在某 个 仆人 生硬 的 推动 下 醒来， 假如 唤醒 我们 的 并非 新生 的 心力 和 灵感， 并非 动听 的 天籁 之音 和 空气 中 弥漫 的 芬芳， 而是 工厂 的 钟声， 假如 我们 醒来 并没有 过 上 比 睡前 更 崇高 的 生活， 那么 白天 也就 没什么 好 期待 的 了， 它 甚至 都 算 不上 是 白天； 如果 是 这样 的 话， 黑暗 就 结出 了 它的 果实， 而 光明 也 并不 比 黑暗 好。</p></li><li><p>清醒 得 足以 从事 体力劳动 的 人数 以 百万 计， 但 百万 人中 只有 一个 清醒 得 足以 从事 脑力劳动， 而 清醒 得 足以 过 上 诗意 或者 神圣 生 活的 人， 一亿 人中 才有 一个。 唯有 清醒 才是 真正 地 活着。</p></li><li><p>每个人 都有 义务 让他 的 生活 变得 崇高， 让 生活 的 方方面面 经得起 最 挑剔 的 审视。</p></li><li><p>你有 没有 想过 铁路 下方 的 枕木 到底 是什么？ 其实 每 根 枕木 都是 一个人， 是一 个 爱尔兰人 或者 扬 基 人 。 他们 身 上铺 着 铁轨， 覆盖 着 黄沙， 任由 火车 轰 隆隆 地 驶过。 我 告诉 你吧， 他们是 长眠 不 起了。</p></li><li><p>从容 而 明智 的 时候， 我们 发现 唯有 伟大 而 高贵 的 东西， 才是 永恒 而 绝对 的 存在—— 至于 那些 琐碎 的 忧惧 与 快感， 那 不过 是 现实 的 影子。</p></li><li><p>只有 持续不断 地 渗入 和 浸泡 在周围 的 现实 之中， 我们 才能 理解 一切 圣洁 而 高贵 的 东西。</p></li><li><p>让 我们 该 起床 时 就 赶紧 起床， 该 休息 时 就 安心 休息， 保持 安宁 而 没有 烦扰 的 心态； 身边 的 人 要来 就 让他 来， 要去 就 让他 去， 让 钟声 回荡， 让 孩子 哭喊—— 下定 决心 好好 地 过 一天。</p></li><li><p>振作 起来， 带着 早晨 的 活力， 启航 前进 吧， 寻找 其他 的 航路， 像 尤 利 西 斯 那样， 把 自己 绑在 桅杆 上 。</p></li><li><p>不管 生 还是 死， 我们 只 渴求 现实。 如果 我们 真的 就要 死亡， 让我 们 聆听 自己 喉咙 里 的 咔 嗒声， 感受 自己 四肢 的 寒冷 吧； 如果 我们 还 活着， 让 我们 为 自己的 事情 奔忙 吧。</p></li></ul><h2 id="阅读"><a href="#阅读" class="headerlink" title="阅读"></a>阅读</h2><ul><li><p>由于 时代 的 变迁， 这些 英雄 史诗 哪怕 用 我们 的 母语 印刷 出来， 其 语言 也是 晦涩 难懂 的， 我们 必须 费力 地 寻找 每个 字 和 每个 句子 的 含义， 必须 有智慧、 勇敢 和气 量 超越 那些 字句 的 惯常 用法， 更深 入地 去 理解 它们。</p></li><li><p>人 在 年轻 时 花 些 时间学 点 古代 语言 是 很值得 的， 因为 古代 语言 超越 了 日常生活 的 琐碎， 具有 永恒 的 启发 和 激励 的 作用。</p></li><li><p>如果 说 口头语 是 我们 的 母语， 那么 书面 语 可以 被称为 我们 的 父 语， 是 谨慎、 凝练 的 表达方式， 其 重要的 含义 是 耳朵 听不 出来 的， 我们 必须 重生 才能 够 掌握 它 。</p></li><li><p>书籍 是 全世界 的 财富， 也是 各个 民族 和 世代 的 珍贵 遗产。 最 古老 和 最 优秀 的 书籍 自然 应该 出现 在 每户 人家 的 书架 上。</p></li><li><p>那些 不能 够 阅读 原文 版 古代 经典 的 人对人 类 历史 的 了解 肯定 是非 常 不全 面的， 因为 显而易见 的 事实 是， 那些 经典 作品 尚未 被 翻译 成 现代 语言， 除非 我们 的 文明 本身 可以 被 视为 这样 的 译本。</p></li><li><p>伟大 诗人 的 作品 迄今 尚未 被 普通人 读懂， 因为 只有 伟大 的 诗人 能 读懂 它们。</p></li><li><p>我 认为 在学 会 认字 之后， 我们 应该 阅读 最好 的 文学作品， 而 不是 永远 死记硬背 几 篇 课文， 认识 几个 简单 的 字， 终生 停留在 小学 四五 年级 的 水平 上。</p></li><li><p>哪怕 他们 已经 饱餐 了 美味佳肴， 因为 他们 什么 也不 舍得 浪费。</p></li><li><p>这些 让我 们 感到 困扰、 惶惑 和 迷惘 的 问题， 所有 的 智者 也都 曾 遇到； 他们 一个 不漏 地 遇到 了， 而且 已经 根据 各自 的 能力， 用 他们的 文字 与 人生 对 每个 问题 做出 了 解答。</p></li><li><p>如果 有 必 要的 话， 少 建 一座 桥 吧， 要 过河 绕 点 路 也 无妨， 请 至少 修起 一座 知识 的 拱桥， 让 它 跨越 包围着 我们 的、 黑暗 的 无知 深渊。</p></li></ul><h2 id="声音"><a href="#声音" class="headerlink" title="声音"></a>声音</h2><ul><li><p>历史、 哲学 和 诗歌 的 课程 哪怕 再 精辟， 各种 学会 哪怕 再 优秀， 生活 的 安排 哪怕 再 令人 羡慕， 跟 学习 如何 永远 凝视 该 看的 景象 相比， 又 算得了 什么 呢？</p></li><li><p>我 热爱 生活 中的 闲暇 时光。 有时候， 在 夏天 的 早晨， 依照 习惯 洗过 澡 之后， 我 就坐 在 阳光明媚 的 门口， 从 日出 静静 地 坐到 中午， 茫然 不知 所思， 在 松树、 山 核桃 和 光 叶 漆  的 环绕 之中， 沉浸于 那种 不受干扰 的 孤寂 和 安宁， 任由 诸多 飞鸟 或 婉转 啼 唱， 或 悄 无 声息 地 飞过 我的 屋子， 直到 太阳 从 西窗 渐渐 沉下， 或 远处 的 公路  传来 某个 过客 的 车 声， 我才 想起 来 时间 已经 过了 很久。 这些 光阴 就 像 夜晚 之 于 玉米 ， 能够 促使 我 成长； 这样 的 闲坐 远远 胜过 双手 的 劳作。 这 并不 是对 生命 的 浪 掷， 而是 让 寻常 的 寿命 得以 延长。</p></li><li><p>假如 我们 总是 真正 地 去 生活， 根据 刚刚 了解到 的 最好 方式 去调节 我们 的 生活， 那么 沉闷 乏味 将 和我 们 无缘。</p></li><li><p>这个 夏日 的 午后 ， 我 在窗 边 静坐， 苍鹰 翱翔 于 我的 耕地 上空； 野 鸽子  三三两两 地 从 我的 视界 疾飞 而过， 或者 在 我 屋 后的 白 松 枝 上 蹦 上 跳下， 尽情 地 啼 唱； 鱼 鹰  插进 波 平 如 镜 的 瓦 尔 登 湖， 叼 起 鱼儿 复 返 长空； 水貂 鬼鬼祟祟 地 走出 我 门前 的 沼泽， 在 岸边 抓住 了 青蛙； 飞来飞去 的 刺 歌 雀  压 弯了 莎 草 ； 过去 半个 小时 来， 我一 直 听见 火车 咔 嗒、 咔 嗒 在 响， 时而 渐渐 消歇， 时而 越来越 响， 很像 榛 鸡  扑打 翅膀 发出 的 声音， 将 旅客 从 波士顿 运载 到这 地区 来。</p></li><li><p>“实际上， 我们 的 村庄 已经 变成 标 靶 飞快 的 铁路 如 长矛 般 疾 刺 而来， 在 我们 这个 和谐  的 地方 奏响 了 不和谐 的 音调。”</p></li><li><p>仿佛 触目 所及 的 松针 都 变成 被 它 轻拂 而过 的 琴弦。</p></li><li><p>我 觉得 养 只 小 公鸡， 就 当它 是 鸣禽， 听听 它的 音乐， 其实 也是 很不 错的。</p></li><li><p>要是 终其 一生 都能 及早 起床， 人们 怎么 可能 不变 得 难以 言喻 地 健康、 富裕 和 聪明 呢？</p></li><li><p>纷飞 的 大雪 不会 盖住 通往 前院 大门 的 小径， 因为 根本 就 没有 大门， 没有 前院， 也没 有 通往 文明 世界 的 道路！</p></li></ul><h2 id="孤寂"><a href="#孤寂" class="headerlink" title="孤寂"></a>孤寂</h2><ul><li><p>将 世界 丢 给 黑暗 和我”</p></li><li><p>然而 我有 时候 深切 地 感受 到， 最 美好、 最 温柔、 最 纯洁、 最 鼓舞 人心 的 相处， 很可能 是 人和 自然 的 相处， 哪怕 对 可怜 的 厌世 者 和 最 忧郁 的 人 来说， 情况 也是 如此。</p></li><li><p>没有 任何 东西 能 迫使 纯朴 而 勇敢 的 人 陷入 庸俗 的 悲哀。</p></li><li><p>我们 寄居 的 这个 地球 无非 是 太空 中的 一点。 和 浩 茫 无际、 连 我们 的 仪器 都 测量 不出 其 直径 有多 大的 宇宙 相比， 在这 个 星球 上 居住 的 两个 人， 哪怕 隔 得 再远， 又能 有 多远 呢？ 我为 什么 要 感到 孤单？ 难道 我们 的 星球 不在 银河系 里 吗？ 在我看来， 你这个 问题 压根 没 问到 点子 上。 什么样 的 空间 才会 将 一个 人和 他的 同胞 隔开， 并 让他 感到 孤寂 呢？ 我 已经 发现， 两个 人的 腿 再 怎么 走， 也 无法 让 两颗 心 靠 得 更 近。</p></li><li><p>只要 达到 一定 的 思想 境界， 对于 人世间 种种 行为 及其 后果， 我们 都能 淡然处之； 所有 的 事情， 无论是 好 是 坏， 就 像 河流 般 从 我们 身边 流过。</p></li><li><p>我 只 知道 我自己 是一 个 单独 的 人， 或者 说是 各种 思维 和 情感 登场 的 舞台， 并且 察觉到 我 多少 具有 双重 人格， 因为 我能 够 站在 远处 观察 我自己， 就 像 观察 别人 那样。</p></li><li><p>思考 着 或者 工作 着 的 人 无论 在哪里 都是 寂寞 的。</p></li><li><p>真正 勤奋 的 学生， 哪怕 身处 剑桥 学院 人满为患 的 教室 中， 也 必定 如 沙漠 里 的 托钵僧 般 孤寂。</p></li><li><p>我 崇拜 的 是 希 比 ， 朱 庇 特 的 斟酒 女侍， 也是 朱 诺 和 野 莴苣 的 女儿， 她 拥 有能 让 诸 神 和 凡人 重获 青春 的 活力。 她 可能 是 地球 从古至今 仅有 的 身体 最 完好、 健康 和 强健 的 少女， 无论 她 走到 哪里， 哪里 就是 春天。</p></li></ul><h2 id="豆田"><a href="#豆田" class="headerlink" title="豆田"></a>豆田</h2><ul><li><p>到了 阳光 灿烂 的 午后， 便有 夜鹰 在 头顶 盘旋， 宛如 眼睛 里 的 微尘， 或者 天空 的 眼睛 里 的 黑点， 他 时不时 俯冲 而下， 发出 裂 帛 般 的 尖叫声， 仿佛 把 天空 撕成 了 破布，</p></li><li><p>我还 看到 两只 鸡 鹰  高 高地 在 天上 飞翔， 交替 着 上 冲 和 陡降， 彼此 靠近 又 分开， 宛如 我自己 的 思绪 的 化身。</p></li><li><p>菜豆 每天 看见 我带 着 锄头 来 拯救 他们， 消灭 他们的 敌人， 让 战壕 里 填满 死掉 的 野草。 许多 骁勇 善战、 翎 枝 飘扬 的 赫 克 特 ， 虽然 比 其 密集 的 战友 高出 整整 一 英尺， 却 纷纷 倒在 我的 武器 之下， 在 尘土 里 翻滚。 </p></li><li><p>至少 古代 的 诗歌 和 神话 都已 表明， 耕耘 原本 是一 门 神圣 的 艺术； 只可 惜 我们 如今 耕作 时 太过 仓促 和 粗心， 而 我们 的 目标 只在 于 拥有 大型 的 农场 和 大量 的 庄稼。 我们 没有 节日， 没有 游行， 没有 庆典， 就连 牲畜 展销会  和 所谓 的 感恩 节  也 变了 味，</p></li><li><p>片 宽阔 的 田地 我 固然 凝望 了 很久， 可 是在 它 看来， 最主要 的 耕种 者 并不 是我， 而是 某些 和 它 更为 息息相关 的 因素， 比如说 浇灌 它、 让 它 变 绿的 雨水 和 青草。</p></li><li><p>他 每日 兢兢业业 地 劳作， 却 又不 将 田里 的 出产 视为 己有；</p></li></ul><h2 id="镇区"><a href="#镇区" class="headerlink" title="镇区"></a>镇区</h2><ul><li><p>因为 人 在这 世界上， 只要 闭上 眼睛 转 一次 身 就会 迷路—— 时， 我们 才能 领略 大自然 的 广袤 和 新奇。</p></li><li><p>只有 到了 失去 这个 世界 之后， 我们 才能 开始 找到 我们自己</p></li><li><p>“你 要是 去 管理 公共 事务， 又 何必 使用 刑罚 呢？ 你 热爱 美德， 民风 就会 淳朴。 高尚 者 的 品行 像 风， 普通 人的 品行 像 草； 风吹 过时， 草 自然 会 伏 低。”</p></li></ul><h2 id="湖泊"><a href="#湖泊" class="headerlink" title="湖泊"></a>湖泊</h2><ul><li><p>湖泊 是 大 地上 最 美丽、 最 生动 的 景物。 它是 大地 的 眼睛； 凝望 着 湖水 的 人 可以 测量 自身 天性 的 深浅。 沿岸 濒 水 而生 的 树木 是它 的 修长 睫毛， 而 周围 郁郁葱葱 的 群山 和 悬崖 则是 它 浓厚 的 眉毛。</p></li><li><p>无论是 从 水底 跃 出 的 鱼， 还是 掉落 湖面 的 昆虫， 都 激起 了 一圈 又 一圈 的 波纹， 那些 线条 看上去 很 美丽， 看上去 仿佛 不断 涌出 的 泉水， 仿佛 湖水 是 活的， 而这 就是 其 脉搏 的 跳动， 是 其 胸膛 的 起伏。</p></li><li><p>年纪 更轻 时， 我曾 在 湖面 上 消磨 了 许多 光阴， 把 小船 划 到 湖心， 然后 任其 随风 飘荡， 自己 躺在 座位 上， 在 夏日 的 午后， 想入非非 地 发 着 白日梦， 直到 小船 碰到 沙滩 才 回过 神， 站起 身 来看 看 命运 让我 漂流 到 那片 湖 岸；</p></li><li><p>在那些 日子 里， 无所事事 是最 具 吸引力 和 最有 收获 的 事业。</p></li><li><p>别再 向往 天堂！ 那是 对 大地 的 侮辱。</p></li></ul><h2 id="贝克尔农场"><a href="#贝克尔农场" class="headerlink" title="贝克尔农场"></a>贝克尔农场</h2><ul><li>但 真正 的 美国 应该 是 这样 的 国家： 在这里 你有 自由 去 追求 一种 无需 这些 东西 也能 过得 很好 的 生活， 政府 不会 想方设法 强迫 你 拥护 奴隶制， 要 求你 为 战争 出钱 出力， 更不 会 让你 承担 各种 多余 的 花销， 那些 因 这些 玩意 而 产生 的 直接 或者 间接 费用。</li></ul><h2 id="更高的法则"><a href="#更高的法则" class="headerlink" title="更高的法则"></a>更高的法则</h2><ul><li><p>我 当时 发现， 现在 也有 发现， 自己 内心 有两 种 本能： 其一 是 想要 过 上 崇高 的 生活， 也就是 所谓 灵性 的 生活， 这是 大多数人 都有 的 本能； 其二 是 渴望 体验 原始 而 野蛮 的 生活； 对这 两种 本能， 我是 一视同仁 的。</p></li><li><p>在我看来， 人们 要是 衷心希望 自己 成为 高尚 或者 富于 诗意 的 人， 那 肯定 是要 戒 吃 兽 肉 的， 而且 吃 其他 食物 也要 讲究 适量。</p></li><li><p>只要 坚持 茹 素， 你将 会 欢快 地 迎接 白天 和 黑夜 的 到来， 生活 将如 鲜花 和 芳草 般 散发 着 香气， 并且 变得 更加 乐观 和 高尚， 而且 更有 仙 气—— 那就 是你 的 成功。</p></li><li><p>我很 高兴 自己 多年 以来 只 喝 白水， 因为 和 吸食 鸦片 者  的 天堂 相比， 我 更 热爱 自然 的 苍穹。 我 愿意 努力 永远 保持 清醒； 令人 迷醉 的 东西 有无 穷 多种。 我 认为 白水 是 唯一 适合 智者 的 饮料， 酒 并非 高贵 的 液体； 一杯 咖啡 能够 冲走 清晨 的 希望， 一杯 热茶 可以 破坏 夜晚 的 美梦！ 我曾 因为 受到 它们 的 引诱 而 堕落！ 即使是 音乐， 也能 令人 意志 消沉。</p></li><li><p>能够 污秽 人的， 不是 吃进 嘴里 的 食物， 而是 不知 餍 足 的 食欲 。</p></li><li><p>智慧 和 纯洁 出自 勤奋， 无知 与 堕落 源于 懒惰。</p></li><li><p>我们 无所顾忌 地 谈论 某种 形式 的 肉欲， 对 另外 一种 却 保持 缄默。 我们 已经 堕落 到 不能 单纯 地 谈论 人类 各种 生理 机能 的 地步。</p></li><li><p>高尚 的 德行 会 让 人们 的 面孔 变得 漂亮， 低 俗 的 德行 则 让 人们 的 容貌 变得 丑陋。</p></li><li><p>室内的取暖</p></li><li><p>印第安 之 夏</p></li></ul><h2 id="冬天的动物"><a href="#冬天的动物" class="headerlink" title="冬天的动物"></a>冬天的动物</h2><ul><li><p>有时 我 被 冰霜 冻裂 大地 的 声音 吵醒， 仿佛 有人 驱赶 畜 生来 撞 我的 门，</p></li><li><p>偶尔 会有 狐狸 被 我的 灯光 所 吸引， 走近 我的 窗口， 咒骂 了 我 一句， 随即 逃之夭夭。</p></li><li><p>每天 早晨， 通常 是 红 松鼠 把 我 叫醒； 他们 从 我 屋顶 爬过， 又 沿着 四壁 爬上 爬下， 仿佛 从 森林 里 走出 来， 就是 为了 做 这件事。</p></li><li><p>红 松鼠 的 来去 则 不分 早晚， 其 花样 百出 的 动作 给我 带来 了 很多 欢乐。 起初 他 会 慎 重地 从 矮 栎 丛 走过 来， 在 雪地 上 跑跑 停 停， 宛如 在 风中 飘零 的 落叶； 他 丝毫 不怕 浪费 力气， 以 非常 快的 速度， 忽而 朝 这边 走 几步， 两条 后腿 跑 起来 快 得 简直 看 不清， 仿佛 动作 太慢 就 吃 不到， 忽 而又 朝 那边 走 几步， 但 每次 顶多 只 走了 半 杆 地 的 距离； 接着 他 会 突然 露出 滑稽 的 表情， 无缘无故 地 翻 个 跟斗， 似乎 全宇宙 的 眼睛 都在 看着 他， 因为 松鼠 就 像 跳舞 的 女孩， 哪怕 在 森林 最为 偏僻 的 角落 里， 一举一动 也 总是 忸怩作态， 仿佛 要 表演 给 许多 观众 欣赏； 若非 如此 迟疑 犹豫、 徘徊 不前， 他 就算 是 慢慢 走过 去， 也 早已 走完 了 全程， 但我 从来 没 见到 过 悠然 地 漫步 的 松鼠； 然后， 突然间， 他 会 以 迅雷 不及 掩耳 之势 爬上 一株 年轻 刚 松 的 树 顶， 上紧 了 他的 发条， 不停 地 指责 那些 想象 出来 的 观众， 那 模样 既 像是 喃喃自语， 又像 是 对着 全宇宙 说话—— 这 到底 是 为了 什么 缘故， 我可 毫不 知情， 我 怀疑 他自己 也说 不出 个 所以然 来。 最后 他 终于 来到 玉米 堆 旁边， 挑选 好 称心如意 的 玉米 穗， 还是 沿着 那 拐 来 拐去 的 三角形 路线， 蹦蹦跳跳 地 跑到 我 放在 窗前 的 木料 堆 最 上端， 从那里 看看 我的 脸， 一 坐 几个 钟头， 时不时 去 弄 个 新的 玉米 穗 来， 起初 狼吞虎咽 地 猛吃 着， 吃完 一半 就 扔掉； 后来 他 变得 比较 挑食， 把玩 着 他的 食物， 开始 只 吃 玉米 粒 里面 的 东西； 他 一个 不留神， 本来 用 爪子 抓住 的 玉米 穗 掉到 地上 了， 于是 他做 出 一副 不知道 怎么回事 的 滑稽 表情， 仿佛 在 怀疑 玉米 是不是 活的， 又 拿不 定 主意 到底 是把 它 捡起 来， 或者 重新 弄 一 根， 还是 干脆 离开 算了； 他 思考 着 玉米 的 事情， 又 竖起 耳朵， 想听 听 风里 有 什么 动静。 这 小家伙 就是 这么 可恶， 一个 早晨 就能 糟蹋 许多 玉米 穗； 到了 最后， 他 会 拿起 最长 最 重的 一 根， 比他 自己 还要 大得 多， 很有 技巧 地 把 它 摆好， 带着 它 向 树林 里 走去， 活像 是 背着 水牛 的 老虎， 还是 那样 歪歪扭扭、 走走 停 停 地 前进， 一副 很 吃力 的 样子， 好像 玉米 穗 对 他 来说 太重 了； 那 玉米 穗 沿途 不停 地 掉下 来， 他 每次 都 死命 地 用 身体 撑住， 决意 不惜 代价 将其 拖 回去， 像 他那 样 轻浮 而 朝秦暮楚 的 家伙， 居然 能够 如此 坚毅， 倒 实在 是 很 特别； 他 就 这样 把 玉米 穗 搬 回 自己的 住处， 也许 是在 四 五十 杆 地 远的 一株 松树 的 树 顶，</p></li><li><p>曾经 有 只 麻雀， 当 我 在 镇上 的 花园 锄草 时， 在 我的 肩膀 上 栖息 了 片刻， 当时 我 觉得 我的 肩上 无论 佩戴 什么 勋章， 都不 如 扛着 那 只 小鸟 来得 光荣。</p></li></ul><h2 id="冬天的湖"><a href="#冬天的湖" class="headerlink" title="冬天的湖"></a>冬天的湖</h2><ul><li>原来 除了 头顶， 我们 脚下 也有 天空。</li></ul><h2 id="春天"><a href="#春天" class="headerlink" title="春天"></a>春天</h2><ul><li><p>谁想 得到 一个 如此 巨大、 冰冷 和 厚皮 的 家伙， 居然 是 如此 地 敏感 呢？</p></li><li><p>它 并非 已成 化石 的 地球， 而是 生机勃勃 的 地球； 和 它 伟大 的 内在 生命 相比， 所有 动物 和 植物 的 生命 不过 是 寄人篱下 的 生命。</p></li><li><p>野草 像 春 火 般 燃 遍 了 山坡——</p></li><li><p>其实 幸福 的 人 应该 永远 生活 在 此刻， 好好 利用 每件 落到 我们 身上 的 琐事， 就 像 青草 坦然 接受 每颗 落在 它 身上 的 最细 小的 露珠 那样， 别把 时间 用于 挽回 从前 失去 的 机会， 并 美其名曰 承担责任。</p></li></ul><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><ul><li>然而 有些 人 明明 毫不 尊重 自己， 却 表现 得很 爱国， 捡起 芝麻 丢了 西瓜。 他们 热爱 可以 供 他们 造 坟 的 土地， 却 对那 使 他们的 泥 身 充满 生气 的 灵魂 毫不 关心。 爱国主义 是 他们 脑 里 的 蛆 虫。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;亨利·戴维·梭罗（著）&lt;br&gt;李继宏（译）&lt;/p&gt;
&lt;h2 id=&quot;导读&quot;&gt;&lt;a href=&quot;#导读&quot; class=&quot;headerlink&quot; title=&quot;导读&quot;&gt;&lt;/a&gt;导读&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;其实 我 倒 不强 求 别人 采取 我的 生活 模式， 既 因为
      
    
    </summary>
    
      <category term="reading" scheme="https://linlshare.github.io/categories/reading/"/>
    
    
      <category term="瓦尔登湖" scheme="https://linlshare.github.io/tags/%E7%93%A6%E5%B0%94%E7%99%BB%E6%B9%96/"/>
    
  </entry>
  
  <entry>
    <title>電飯煲仔</title>
    <link href="https://linlshare.github.io/2019/01/27/recipe/%E9%9B%BB%E9%A3%AF%E7%85%B2%E4%BB%94/"/>
    <id>https://linlshare.github.io/2019/01/27/recipe/電飯煲仔/</id>
    <published>2019-01-27T04:58:53.000Z</published>
    <updated>2019-01-27T05:13:40.052Z</updated>
    
    <content type="html"><![CDATA[<p>使用電飯煲進行煲仔飯，簡稱電飯煲仔。電飯煲仔有以下便利：</p><ol><li>在電飯煲上一氣呵成，不用額外的炒菜，而且電飯煲的鍋也特別好洗滌；</li><li>沒有油煙四溢，這對於保持房屋內空氣的潔淨和個人健康很有益；</li><li>就我來說，每一次煲仔在食材上的費用不超過 15 元，卻可以享用一個中午和晚上，很值得。</li></ol><h2 id="雞肉臘肉土豆煲"><a href="#雞肉臘肉土豆煲" class="headerlink" title="雞肉臘肉土豆煲"></a>雞肉臘肉土豆煲</h2><table><thead><tr><th>食材</th><th>分量</th></tr></thead><tbody><tr><td>雞肉</td><td>半斤多</td></tr><tr><td>臘肉</td><td>兩條</td></tr><tr><td>土豆</td><td>一塊</td></tr><tr><td>大米</td><td>兩杯</td></tr></tbody></table><h2 id="臘肉土豆蘿蔔黑豆煲"><a href="#臘肉土豆蘿蔔黑豆煲" class="headerlink" title="臘肉土豆蘿蔔黑豆煲"></a>臘肉土豆蘿蔔黑豆煲</h2><table><thead><tr><th>食材</th><th>分量</th></tr></thead><tbody><tr><td>臘肉</td><td>兩條</td></tr><tr><td>土豆</td><td>一塊</td></tr><tr><td>紅蘿蔔</td><td>一根</td></tr><tr><td>香菇</td><td>五六顆</td></tr><tr><td>黑豆</td><td>兩把</td></tr><tr><td>大米</td><td>兩杯</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用電飯煲進行煲仔飯，簡稱電飯煲仔。電飯煲仔有以下便利：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在電飯煲上一氣呵成，不用額外的炒菜，而且電飯煲的鍋也特別好洗滌；&lt;/li&gt;
&lt;li&gt;沒有油煙四溢，這對於保持房屋內空氣的潔淨和個人健康很有益；&lt;/li&gt;
&lt;li&gt;就我來說，每一次煲仔在食材上
      
    
    </summary>
    
      <category term="recipe" scheme="https://linlshare.github.io/categories/recipe/"/>
    
    
      <category term="Recipe" scheme="https://linlshare.github.io/tags/Recipe/"/>
    
  </entry>
  
  <entry>
    <title>DynamoDB</title>
    <link href="https://linlshare.github.io/2019/01/19/it/java/aws/DynamoDB/"/>
    <id>https://linlshare.github.io/2019/01/19/it/java/aws/DynamoDB/</id>
    <published>2019-01-19T03:14:51.000Z</published>
    <updated>2019-01-28T04:01:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ol><li><strong>Table</strong>（表），与其他数据库的表的概念一致，即为数据的集合。</li><li><strong>Items</strong>（数据项），代表一行数据。</li><li><strong>Attributes</strong>（属性），一个数据项可由多个属性构成，一个属性由属性名、属性值类型和属性值构成。</li><li><strong>Partition Key</strong>（分区键），即是最简单的主键，由一个属性构成，一张表有且只有一个分区键。由于 DynamoDB 内部在存储数据时使用分区键的 Hash 值实现跨多个分区的数据项目平均分布，故分区键又称之为 <strong>Hash Key</strong>。</li><li><strong>Sort Key</strong>（排序键），排序键和分区键构成另一种主键，用于在分区中按排序键排序。由于 DynamoDB 内部按照排序键值有序地将具有相同分区键的项目存储在互相紧邻的物理位置，故排序键又称之为 <strong>Range Key</strong>。</li><li><strong>Secondary Indexes</strong>（二级索引），这样命名应该是将主键视为一级索引。DynamoDB 的二级索引有两种：<ul><li>Global secondary index（GSI），创建跟主键不同的分区键和排序键的索引，DynamoDB 有最多创建 20 个 GSI 的限制；</li><li>Local secondary index（LSI），创建跟主键的分区键相同但是排序键相异的索引，当且仅当创建表时可用，DynamoDB 有最多创建 5 个 LSI 的限制；</li></ul></li></ol><h2 id="配置本地开发环境"><a href="#配置本地开发环境" class="headerlink" title="配置本地开发环境"></a>配置本地开发环境</h2><h3 id="下载-DynamoDB-本地版本"><a href="#下载-DynamoDB-本地版本" class="headerlink" title="下载 DynamoDB 本地版本"></a>下载 DynamoDB 本地版本</h3><p>从 <a href="https://docs.aws.amazon.com/zh_cn/amazondynamodb/latest/developerguide/DynamoDBLocal.DownloadingAndRunning.html" target="_blank" rel="noopener">计算机上的 DynamoDB（可下载版本）- aws</a> 下载，并放置到合适的位置。</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> aws configure --profile local                                                                                    AWS Access Key ID [None]: fake-ak</span><br><span class="line">AWS Secret Access Key [None]: fake-sk</span><br><span class="line">Default region name [None]:</span><br><span class="line">Default output format [None]:</span><br></pre></td></tr></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Djava.library.path=./DynamoDBLocal_lib -jar DynamoDBLocal.jar -sharedDb</span><br></pre></td></tr></table></figure><h2 id="CLI-操作"><a href="#CLI-操作" class="headerlink" title="CLI 操作"></a>CLI 操作</h2><blockquote><p>注意：如果是本地版本需要添加 <code>--endpoint-url http://localhost:8000</code></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 创建表格</span><br><span class="line">aws dynamodb create-table \</span><br><span class="line">    --table-name ab-debug-proxy \</span><br><span class="line">    --attribute-definitions \</span><br><span class="line">        AttributeName=host,AttributeType=S \</span><br><span class="line">        AttributeName=port,AttributeType=N \</span><br><span class="line">        AttributeName=channel,AttributeType=S \</span><br><span class="line">    --key-schema AttributeName=host,KeyType=HASH AttributeName=port,KeyType=RANGE \</span><br><span class="line">    --global-secondary-indexes IndexName=channel-index,KeySchema=["&#123;AttributeName=channel,KeyType=HASH&#125;"],Projection="&#123;ProjectionType=ALL&#125;",ProvisionedThroughput="&#123;ReadCapacityUnits=1,WriteCapacityUnits=1&#125;" \</span><br><span class="line">    --provisioned-throughput ReadCapacityUnits=1,WriteCapacityUnits=1 \</span><br><span class="line">    --endpoint-url http://localhost:8000</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 删除表格</span><br><span class="line">aws dynamodb delete-table \</span><br><span class="line">    --table-name ab-debug-proxy \</span><br><span class="line">    --endpoint-url http://localhost:8000</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 列出所有表格</span><br><span class="line">aws dynamodb list-tables --endpoint-url http://localhost:8000</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 添加数据项</span><br><span class="line">aws dynamodb put-item \</span><br><span class="line">    --table-name ab-debug-proxy \</span><br><span class="line">    --item '&#123;"host": &#123;"S": "192.168.1.0"&#125;,"port": &#123;"N": "9090"&#125;,"channel": &#123;"S": "sw"&#125; &#125;' \</span><br><span class="line">    --return-consumed-capacity TOTAL \</span><br><span class="line">    --endpoint-url http://localhost:8000</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 扫描数据项</span><br><span class="line">aws dynamodb scan \</span><br><span class="line">    --table-name ab-debug-proxy \</span><br><span class="line">    --endpoint-url http://localhost:8000</span><br></pre></td></tr></table></figure><h2 id="Java-操作"><a href="#Java-操作" class="headerlink" title="Java 操作"></a>Java 操作</h2><h3 id="使用-DynamoDBMapper"><a href="#使用-DynamoDBMapper" class="headerlink" title="使用 DynamoDBMapper"></a>使用 DynamoDBMapper</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">AmazonDynamoDB amazonDynamoDB = builder.build();</span><br><span class="line"><span class="keyword">final</span> String prefix = <span class="string">"project-"</span> + AppConfig.getVariant() + <span class="string">"-"</span>;</span><br><span class="line"><span class="keyword">final</span> DynamoDBMapperConfig.TableNameOverride tableNameOverride =</span><br><span class="line">    DynamoDBMapperConfig.TableNameOverride.withTableNamePrefix(prefix);</span><br><span class="line">DynamoDBMapperConfig dynamoDBMapperConfig = DynamoDBMapperConfig.builder()</span><br><span class="line">    .withTableNameOverride(tableNameOverride)</span><br><span class="line">    .build();</span><br><span class="line"><span class="function">DynamoDBMapper <span class="title">DynamoDBMapper</span><span class="params">(amazonDynamoDB, dynamoDBMapperConfig)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="批量加载（Batch-Load）"><a href="#批量加载（Batch-Load）" class="headerlink" title="批量加载（Batch Load）"></a>批量加载（Batch Load）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">List&lt;KeyPair&gt; keyPairList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (Proxy proxy : proxyList) &#123;</span><br><span class="line">    KeyPair keyPair = <span class="keyword">new</span> KeyPair();</span><br><span class="line">    keyPair.setHashKey(proxy.getHost());</span><br><span class="line">    keyPair.setRangeKey(proxy.getPort());</span><br><span class="line">    keyPairList.add(keyPair);</span><br><span class="line">&#125;</span><br><span class="line">Map&lt;Class&lt;?&gt;, List&lt;KeyPair&gt;&gt; keyPairForTable = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">keyPairForTable.put(Proxy.class, keyPairList);</span><br><span class="line">Map&lt;String, List&lt;Object&gt;&gt; stringListMap = dynamoDBMapper.batchLoad(keyPairForTable);</span><br></pre></td></tr></table></figure><h2 id="排错"><a href="#排错" class="headerlink" title="排错"></a>排错</h2><h3 id="DynamoDBMappingException-class-name-no-mapping-for-HASH-key"><a href="#DynamoDBMappingException-class-name-no-mapping-for-HASH-key" class="headerlink" title="DynamoDBMappingException: [class name] :no mapping for HASH key"></a>DynamoDBMappingException: [class name] :no mapping for HASH key</h3><p>确保对主键设置了以下的注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DynamoDBHashKey</span></span><br></pre></td></tr></table></figure><h3 id="查询数据时使用-limit-字段但是没有返回预期的数据"><a href="#查询数据时使用-limit-字段但是没有返回预期的数据" class="headerlink" title="查询数据时使用 limit 字段但是没有返回预期的数据"></a>查询数据时使用 limit 字段但是没有返回预期的数据</h3><p>原因是 limit 限制的是去查询集合而非结果集合，查看注释可知：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Sets the limit of items to scan and returns a pointer to this object for</span></span><br><span class="line"><span class="comment">     * method-chaining. Please note that this is &lt;b&gt;not&lt;/b&gt; the same as the</span></span><br><span class="line"><span class="comment">     * number of items to return from the scan operation -- the operation will</span></span><br><span class="line"><span class="comment">     * cease and return as soon as this many items are scanned, even if no</span></span><br><span class="line"><span class="comment">     * matching results are found.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> DynamoDBScanExpression#getLimit()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DynamoDBScanExpression <span class="title">withLimit</span><span class="params">(Integer limit)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.limit = limit;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么怎么做到对结果集合的 limit 呢？采用其带 <code>page</code> 的接口分页查询，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// page query</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    QueryResultPage&lt;Proxy&gt; proxyQueryResultPage =</span><br><span class="line">        dynamoDBMapper.queryPage(Proxy.class, queryExpression);</span><br><span class="line">    proxies.addAll(proxyQueryResultPage.getResults());</span><br><span class="line">    queryExpression.setExclusiveStartKey(proxyQueryResultPage.getLastEvaluatedKey());</span><br><span class="line">&#125; <span class="keyword">while</span> (queryExpression.getExclusiveStartKey() != <span class="keyword">null</span> &amp;&amp; proxies.size() &lt; limit);</span><br></pre></td></tr></table></figure><h3 id="设置-SaveBehavior-UPDATE-SKIP-NULL-ATTRIBUTES-但在调用-batchSave-方法时并没有跳过为-null-的字段"><a href="#设置-SaveBehavior-UPDATE-SKIP-NULL-ATTRIBUTES-但在调用-batchSave-方法时并没有跳过为-null-的字段" class="headerlink" title="设置 SaveBehavior.UPDATE_SKIP_NULL_ATTRIBUTES 但在调用 batchSave 方法时并没有跳过为 null 的字段"></a>设置 <code>SaveBehavior.UPDATE_SKIP_NULL_ATTRIBUTES</code> 但在调用 <code>batchSave</code> 方法时并没有跳过为 null 的字段</h3><p>在创建 DynamoDBMapperConfig 时设置 UPDATE_SKIP_NULL_ATTRIBUTES，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DynamoDBMapperConfig dynamoDBMapperConfig = DynamoDBMapperConfig.builder()</span><br><span class="line">    .withTableNameOverride(tableNameOverride)</span><br><span class="line">    <span class="comment">// 设置 UPDATE_SKIP_NULL_ATTRIBUTES</span></span><br><span class="line">    .withSaveBehavior(DynamoDBMapperConfig.SaveBehavior.UPDATE_SKIP_NULL_ATTRIBUTES)</span><br><span class="line">    .build();</span><br></pre></td></tr></table></figure><ul><li>关于 SaveBehavior 参考 <a href="https://aws.amazon.com/cn/blogs/developer/using-the-savebehavior-configuration-for-the-dynamodbmapper/" target="_blank" rel="noopener">Using the SaveBehavior Configuration for the DynamoDBMapper</a></li></ul><p>查看 <code>SaveBehavior</code> 源码，发现:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* UPDATE_SKIP_NULL_ATTRIBUTES is similar to UPDATE, except that it</span></span><br><span class="line"><span class="comment">* ignores any null value attribute(s) and will NOT remove them from</span></span><br><span class="line"><span class="comment">* that item in DynamoDB. It also guarantees to send only one single</span></span><br><span class="line"><span class="comment">* updateItem request, no matter the object is key-only or not.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">UPDATE_SKIP_NULL_ATTRIBUTES,</span><br></pre></td></tr></table></figure><p>也就是说 <strong>不支持</strong> 批量的操作！</p><h3 id="Scan-过滤-Boolean-类型字段时返回为空"><a href="#Scan-过滤-Boolean-类型字段时返回为空" class="headerlink" title="Scan 过滤 Boolean 类型字段时返回为空"></a>Scan 过滤 Boolean 类型字段时返回为空</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, AttributeValue&gt; eav = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">Map&lt;String, String&gt; ean = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">StringBuilder filterExpressionBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">eav.put(<span class="string">":valid"</span>, <span class="keyword">new</span> AttributeValue().withBOOL(proxy.getLocked()));</span><br><span class="line">ean.put(<span class="string">"#valid"</span>,<span class="string">"valid"</span>);</span><br><span class="line">filterExpressionBuilder.append(<span class="string">"#valid = :valid"</span>);</span><br><span class="line">DynamoDBScanExpression scanExpression = <span class="keyword">new</span> DynamoDBScanExpression().withConsistentRead(<span class="keyword">false</span>)</span><br><span class="line">    .withExpressionAttributeValues(eav)</span><br><span class="line">    .withExpressionAttributeNames(ean)</span><br><span class="line">    .withFilterExpression(filterExpressionBuilder.toString());</span><br><span class="line">PaginatedScanList&lt;Proxy&gt; result = dynamoDBMapper.scan(Proxy.class, scanExpression);</span><br></pre></td></tr></table></figure><p>DynamoDB 存储 Boolean 类型时其实是使用 Number 类型存储，进行过滤时不能使用布尔值进行过滤，而是要使用 “0” （false）和 “1”（true），更改如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eav.put(<span class="string">":valid"</span>, <span class="keyword">new</span> AttributeValue().withN(proxy.getLocked() ? <span class="string">"1"</span> : <span class="string">"0"</span>));</span><br></pre></td></tr></table></figure><h3 id="DynamoDBMappingException"><a href="#DynamoDBMappingException" class="headerlink" title="DynamoDBMappingException"></a>DynamoDBMappingException</h3><p>调用 DynamoDB 的 batchSave 接口发生以下错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMappingException: not supported; requires @DynamoDBTyped or @DynamoDBTypeConverted</span><br><span class="line">at com.amazonaws.services.dynamodbv2.datamodeling.StandardModelFactories$Rules$NotSupported.set(StandardModelFactories.java:664)</span><br><span class="line">at com.amazonaws.services.dynamodbv2.datamodeling.StandardModelFactories$Rules$NotSupported.set(StandardModelFactories.java:650)</span><br><span class="line">at com.amazonaws.services.dynamodbv2.datamodeling.StandardModelFactories$AbstractRule.convert(StandardModelFactories.java:709)</span><br><span class="line">at com.amazonaws.services.dynamodbv2.datamodeling.StandardModelFactories$AbstractRule.convert(StandardModelFactories.java:691)</span><br><span class="line">at com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapperFieldModel.convert(DynamoDBMapperFieldModel.java:138)</span><br><span class="line">at com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper.batchWrite(DynamoDBMapper.java:1107)</span><br><span class="line">at com.amazonaws.services.dynamodbv2.datamodeling.AbstractDynamoDBMapper.batchSave(AbstractDynamoDBMapper.java:173)</span><br></pre></td></tr></table></figure><p>原来在注解为 <code>@DynamoDBTable</code> 的实体类中使用了自定义类型的字段，DynamoDB 并不支持。</p><p>解决方案：在该自定义类型的字段上添加注解  <code>@DynamoDBTypeConvertedJson</code> 即可，原理是使用 Jackson 将该字段的值 json 化再存储。如果不想要 <code>Jackson</code> ，可以自定义转化器，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CustomTypeConverter.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomTypeConverter</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">DynamoDBTypeConverter</span>&lt;<span class="title">String</span>, <span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Class&lt;T&gt; clazz;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">CustomTypeConverter</span><span class="params">(Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.clazz = clazz;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">convert</span><span class="params">(T object)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Json.toJson(object);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> T <span class="title">unconvert</span><span class="params">(String json)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Json.fromJson(json, clazz);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// JobTreeConverter.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JobTreeConverter</span> <span class="keyword">extends</span> <span class="title">CustomTypeConverter</span>&lt;<span class="title">JobTree</span>&gt; </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">JobTreeConverter</span><span class="params">(Class&lt;JobTree&gt; clazz)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(clazz);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// JobGroup.java</span></span><br><span class="line"><span class="meta">@DynamoDBTable</span>(tableName = <span class="string">"job-group"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JobGroup</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">  <span class="meta">@DynamoDBHashKey</span>(attributeName = <span class="string">"id"</span>)</span><br><span class="line">  <span class="meta">@SerializedName</span>(<span class="string">"id"</span>)</span><br><span class="line">  <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@SerializedName</span>(<span class="string">"name"</span>)</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@DynamoDBTypeConverted</span>(converter = JobTreeConverter.class)</span><br><span class="line">  <span class="meta">@DynamoDBAttribute</span>(attributeName = <span class="string">"default_job_tree"</span>)</span><br><span class="line">  <span class="meta">@SerializedName</span>(<span class="string">"default_job_tree"</span>)</span><br><span class="line">  <span class="keyword">private</span> JobTree defaultJobTree;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://docs.aws.amazon.com/zh_cn/amazondynamodb/latest/developerguide/DynamoDBLocal.DownloadingAndRunning.html" target="_blank" rel="noopener">计算机上的 DynamoDB（可下载版本）- aws</a></li><li><a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Introduction.html" target="_blank" rel="noopener">Instroduction - Amazon DynamoDB</a></li><li><a href="https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/DynamoDB.html" target="_blank" rel="noopener">DynamoDB API 文档 -aws</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Table&lt;/strong&gt;（表），与其他数据库的表的概念一致，即为数据的集合。&lt;/li&gt;
&lt;l
      
    
    </summary>
    
      <category term="it" scheme="https://linlshare.github.io/categories/it/"/>
    
      <category term="java" scheme="https://linlshare.github.io/categories/it/java/"/>
    
      <category term="aws" scheme="https://linlshare.github.io/categories/it/java/aws/"/>
    
    
      <category term="Java" scheme="https://linlshare.github.io/tags/Java/"/>
    
      <category term="aws" scheme="https://linlshare.github.io/tags/aws/"/>
    
      <category term="DynamoDB" scheme="https://linlshare.github.io/tags/DynamoDB/"/>
    
  </entry>
  
  <entry>
    <title>AWS Lambda 服务</title>
    <link href="https://linlshare.github.io/2019/01/17/it/serverless/AWS%20Lambda%20%E6%9C%8D%E5%8A%A1/"/>
    <id>https://linlshare.github.io/2019/01/17/it/serverless/AWS Lambda 服务/</id>
    <published>2019-01-17T14:40:52.000Z</published>
    <updated>2019-01-18T12:58:15.088Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Lambda 是 AWS 提供的一个无服务器架构的服务，用户只需要专注于写代码而不用关心部署，通常需要关心外部事件源，可以与 API Gateway, SNS, S3, DynamoDB 等等配合使用。</p><h2 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h2><p>简单粗暴地说，一个 Lambda 就是一个 Docker 服务或者 Firecracker 服务，Firecracker 是 AWS 开源的一个类似 Docker 的服务，AWS 计划将所有的 Lambda 实现改为 Firecracker。因此，当 Lambda 第一次被调用时通常会比较慢，因为服务需要先进行冷启动，但接下来的调用就会快很多了。</p><h2 id="支持"><a href="#支持" class="headerlink" title="支持"></a>支持</h2><ol><li>默认支持 6 种编程语言（.Net, Python, Node.js, Java, Go, Ruby）；</li><li>支持自定义运行时（仓库 <a href="https://github.com/mthenw/awesome-layers" target="_blank" rel="noopener">mthenw/awesome-layers</a> 中罗列了一些开源的运行时）；</li><li>支持Lambda 之间的共享库（类似 Docker 的 Layer 概念），方便各个 Lambda 之间共用公共代码；</li><li>支持版本控制；</li><li>支持红蓝发布，即将请求按比例发送到不同版本的 Lambda 函数中。</li></ol><h2 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h2><ol><li>非预留账户并发 1000（注意：不是单个函数，而是单个 AWS 账户），提升需提 case；</li><li>单个函数内存占用 128M ~ 3008M；</li><li>单个函数最长运行时间是 15分钟；</li><li>单个函数最多只能包含 5 个函数层（即共享库）；</li><li>单个函数部署包压缩状态下不得超过 50 MB，解压状态不得超过 250 MB；</li><li>单个区域（Region）Lambda 函数的总大小不得超过 75 GB。</li></ol><h2 id="费用"><a href="#费用" class="headerlink" title="费用"></a>费用</h2><ol><li>计费方式：需按使用量计费，具体为函数的<strong>请求数量</strong>、<strong>持续时间</strong>和<strong>内存量</strong>。</li><li>免费套餐：每个月 100万请求，及 400000GB-秒。</li><li>免费之后：每 100 万个请求 0.20 USD，每 GB-秒 0.00001667 USD。</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://docs.aws.amazon.com/zh_cn/lambda/latest/dg/welcome.html" target="_blank" rel="noopener">AWS Lambda - aws</a>（AWS Lambda 的官方开发人员指南）</li><li><a href="https://aws.amazon.com/cn/lambda/pricing/" target="_blank" rel="noopener">AWS Lambda 定价 - aws</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Lambda 是 AWS 提供的一个无服务器架构的服务，用户只需要专注于写代码而不用关心部署，通常需要关心外部事件源，可以与 API Gat
      
    
    </summary>
    
      <category term="it" scheme="https://linlshare.github.io/categories/it/"/>
    
      <category term="serverless" scheme="https://linlshare.github.io/categories/it/serverless/"/>
    
    
      <category term="Lambda" scheme="https://linlshare.github.io/tags/Lambda/"/>
    
      <category term="AWS" scheme="https://linlshare.github.io/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>漢字雜談</title>
    <link href="https://linlshare.github.io/2019/01/16/language/%E6%BC%A2%E8%AA%9E%E8%A8%80/%E6%BC%A2%E5%AD%97%E9%9B%9C%E8%AB%87/"/>
    <id>https://linlshare.github.io/2019/01/16/language/漢語言/漢字雜談/</id>
    <published>2019-01-16T13:40:38.000Z</published>
    <updated>2019-01-17T01:03:15.164Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文字伊始"><a href="#文字伊始" class="headerlink" title="文字伊始"></a>文字伊始</h2><p>我們的祖先原本生活在資源豐富的非洲森林里，後來也許森林退化，被迫暴露在草原之上，開始試著直立抬頭尋找食物和警惕天敵。到 250 萬年前，能人已經學會了製造石器；隨後在 150 萬年前，匠人學會了使用火；再到 16 萬年前埃塞爾比亞的長者智人出現了喪葬儀式。自從學會了直立行走、製造石器和使用火，人類行走的範圍越來越廣，接收的信息量原來越多，面臨的挑戰越來越大，腦容量也越來越發達，據說 35.5 萬年前的海德堡人腦容量已經有現代人 93%了。</p><p>人類誕生已經是相當久遠的過去了，但開始使用文字亦不過幾千年的時光。直到約 8600 年左右，人類開始使用一些文字符號，有河南漯河出土的賈湖契刻為證，但因為尚無法破譯，且出土量較少，無法滿足我們對文字的定義。真正意義上的文字當屬約 5500 年前兩河流域的蘇美爾人的楔形文字，它是世界上最早的文字。而我們中國最早的文字當是約 3400 年前的甲骨文，有河南安陽殷墟出土的甲骨為證。另外如今全世界都在使用的字母始於約 2000 年前生活在地中海的腓尼基人使用的腓尼基字母。那時的人類使用文字進行交流，與人交流更與神交流；使用文字進行記錄，記錄生活更記錄歷史。</p><p>早期的文字無一例外都是象形文字，而延綿至今的象形文字除漢字外無二。近兩百多年英語獨步世界的情況似乎昭示著象形文字勢必被字母文字取而代之，但無論如何且勿擅改文字，文字自有其生命力，比之三千年的生命力，這兩百多年的經驗實在太短了。</p><h2 id="漢字六書"><a href="#漢字六書" class="headerlink" title="漢字六書"></a>漢字六書</h2><p>漢字這近百年來被誤解太深了，人們以為漢字只是象形文字，沒有表音的功能，學習起來成本高，從而導致國民文盲率高。殊不知漢字除象形外，還有另外五種造字方法，分別是指事、會意、形聲、假借和轉注。這六種方法在《漢書》中稱之為 “六書”。在早期使用象形、指事、會意造字較多，以後則以形聲、轉注和假借造字為主。</p><p>所謂象形即是畫出物體的形狀，但據我所知通常不會完整畫出物體的形狀，而是進行了提煉，提煉出物體的核心特征予以表現，如甲骨文「人」字，表現了能直立，膝蓋會向前彎曲的人的側面形象；指事就更抽象了，使用純符號（點、劃）以在象形的基礎上表達抽象的含義，如甲骨文「上」字是在一條橫線上加一短劃，表達上面的抽象概念；會意則是將幾個漢字的基礎部件組合成起來表達一個新的含義，如「武」字由「止」（腳趾、前進）與「戈」（武器）構成，表達軍隊出征的含義；而形聲是有形符和聲符構成，形符表達其所屬類別，聲符表達其音，形聲造字的出現是為了解決先有語言而後有文字的書寫場景，以化學元素為例：元素 Ra，英文為「Radium」，是法國人居里夫人及其丈夫發現的一種放射性元素，有音但無中國文字，怎麼辦呢？我們取同音符「雷」和表達其屬類的形符「金」，組合成「鐳」完美解決了這一問題。再說到假借，假借是一字多義的源頭，試以「長」為例，甲骨文「長」象一長髮老者拄扙之形，本義就是長者、老人，後假借「長髮」而有尺寸長短的義項，假借「長者」而有市長的義項。漢字活用避免了漢字數量的爆炸。最後一項造字法，也是爭議最大的一項——轉注，依我淺見，轉注就是將原本含有多義項的字，加註符號析出其中一個義項，比如甲骨文「老」表示拄扙的老人，泛指一切老人，為了表達老父親的概念，加「丂」符造出「考」；又如甲骨文「來」是麥子的象形，也有到來的義項，為專指到來之意造出「麥」字，但因為後來「來」經常被借用表到來的意思，反而用了「麥」來表示麥子的意思。</p><h2 id="漢字與外來語"><a href="#漢字與外來語" class="headerlink" title="漢字與外來語"></a>漢字與外來語</h2><p>日語採用片假名吸收外來語，僅吸收了其音，雖然吸收快且多，如コーヒー（咖啡）、アメリカ（美國）、コンピュータ（電腦）、ケーキ（蛋糕）、シャツ（襯衫）等等，但在我看來并不是很高明。漢語吸收外來語的能力比之更為強大。19世紀中葉，中國的大門被人家用鴉片（opium）和大炮打開了，我們被迫融入新的世界秩序，從此我們知道了我們的友鄰是如何強大，他們的文化也絕非蠻夷，我們不再妄自尊大，正視了自身的位置，認真地去向強國學習，吸收了許多新詞彙。這些詞彙不僅有音譯的，比如布爾什維克（большевик）、馬克思（Marx）、美國（America，早期譯為美利堅）、喬叟（Chaucer）、莎士比亞（Shakespeare）、貝多芬（Beethoven）、因特網（Internet）、卡通（cartoon）、壽司（すし）、谷歌（Google）、迪士尼（Disney）；還有形聲的，如鈾（Uranium）；有會意的，如電話（telephone）、电脑（computer）、手機（mobile phone）、軟件（software）；更有假借的，如氧（Oxygen）、民主（democracy，早期音譯為德謨克拉西）、科學（science，早期音譯為賽因斯）、憲法（constitution）、合同（contract）等等。信息的爆炸使得我們來不及造單字了，我們通常以詞為單位擴充漢語的詞彙，還有許多詞我們以英文形式或其縮寫形式整體消化，多見於科技詞彙，比如 AI、Java、BBC等。</p><h2 id="走向世界"><a href="#走向世界" class="headerlink" title="走向世界"></a>走向世界</h2><p>隨著國門的開放，中國也重新對外輸出詞彙，比如： Kung Fu（功夫）、Tao（道）、Qi（氣）、Chopsticks（筷子）、Lychee（荔枝）、Confucius Institute（孔子學院）、GFW（防火长城）、Alibaba（阿里巴巴）、Guanxi（關係）等等。漢字正重新向世界展示其蓬勃的生命力，但還不是最嚴謹、最優美而內涵最豐富的模樣，需要文字學家、語言學家、政府、社會各界與文字愛好者一道努力，讓美好的事情發生。</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ol><li><a href="https://zh.wikipedia.org/wiki/%E4%BA%BA%E7%B1%BB%E6%BC%94%E5%8C%96%E5%8E%86%E7%A8%8B" target="_blank" rel="noopener">人類演化進程 - 維基百科</a></li><li><a href="https://zh.wikipedia.org/wiki/%E5%85%AD%E6%9B%B8" target="_blank" rel="noopener">六書 - 維基百科</a></li><li><a href="http://humanum.arts.cuhk.edu.hk/Lexis/lexi-mf/" target="_blank" rel="noopener">漢語多功能字庫</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;文字伊始&quot;&gt;&lt;a href=&quot;#文字伊始&quot; class=&quot;headerlink&quot; title=&quot;文字伊始&quot;&gt;&lt;/a&gt;文字伊始&lt;/h2&gt;&lt;p&gt;我們的祖先原本生活在資源豐富的非洲森林里，後來也許森林退化，被迫暴露在草原之上，開始試著直立抬頭尋找食物和警惕天敵。到 25
      
    
    </summary>
    
      <category term="language" scheme="https://linlshare.github.io/categories/language/"/>
    
      <category term="漢語言" scheme="https://linlshare.github.io/categories/language/%E6%BC%A2%E8%AA%9E%E8%A8%80/"/>
    
    
      <category term="漢字" scheme="https://linlshare.github.io/tags/%E6%BC%A2%E5%AD%97/"/>
    
  </entry>
  
  <entry>
    <title>JSONPath</title>
    <link href="https://linlshare.github.io/2019/01/14/it/robot/JSONPath/"/>
    <id>https://linlshare.github.io/2019/01/14/it/robot/JSONPath/</id>
    <published>2019-01-14T11:16:57.000Z</published>
    <updated>2019-01-14T11:33:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>JSONPath，XPath for JSON，是仿造 XPath 进行 JSON 定位的一套语法。</p><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><table><thead><tr><th><strong>XPath</strong></th><th><strong>JSONPath</strong></th><th><strong>Description</strong></th></tr></thead><tbody><tr><td>/</td><td>$</td><td>根对象或元素</td></tr><tr><td>.</td><td>@</td><td>当前对象或元素</td></tr><tr><td>/</td><td>. or []</td><td>子操作</td></tr><tr><td>..</td><td>n/a</td><td>父操作</td></tr><tr><td>//</td><td>..</td><td>向下遍历，创意来自 E4X</td></tr><tr><td>*</td><td>*</td><td>通配</td></tr><tr><td>@</td><td>n/a</td><td>获取属性，但 JSON 结构没有任何属性</td></tr><tr><td>[]</td><td>[]</td><td>下标操作。XPath 用来迭代元素集合和断言，在 Javascript 和 JSON 中则是数组操作</td></tr><tr><td>\</td><td></td><td>[,]</td><td>连结操作。在 XPath 中为将节点集合并。 JSONPath 允许选择名称和索引作为集合。</td></tr><tr><td>n/a</td><td><code>[start:end:step]</code></td><td>数组切片操作。创意来自 ES4</td></tr><tr><td>[]</td><td>?()</td><td>执行一个过滤脚本表达式</td></tr><tr><td>n/a</td><td>()</td><td>脚本表达式</td></tr><tr><td>()</td><td>n/a</td><td>XPath 中的分组操作</td></tr></tbody></table><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://goessner.net/articles/JsonPath/" target="_blank" rel="noopener">JsonPath - goessner.net</a>（详细介绍了 JSONPath 语法）</li><li><a href="https://jsonpath.curiousconcept.com/" target="_blank" rel="noopener">JSONPATH Expression Tester - jsonpath.curiousconcept.com</a>（绝好的测试 JSONPath 语法的在线工具）</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h2&gt;&lt;p&gt;JSONPath，XPath for JSON，是仿造 XPath 进行 JSON 定位的一套语法。&lt;/p&gt;
&lt;h2 id=&quot;基本语法&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="it" scheme="https://linlshare.github.io/categories/it/"/>
    
      <category term="robot" scheme="https://linlshare.github.io/categories/it/robot/"/>
    
    
      <category term="JSONPath" scheme="https://linlshare.github.io/tags/JSONPath/"/>
    
  </entry>
  
</feed>
