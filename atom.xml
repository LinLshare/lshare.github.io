<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Share 杂志</title>
  <icon>https://www.gravatar.com/avatar/67398ac80b713195e4e6faee10834ea3</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://linlshare.github.io/"/>
  <updated>2018-12-13T13:48:04.361Z</updated>
  <id>https://linlshare.github.io/</id>
  
  <author>
    <name>Lshare</name>
    <email>Lshare@outlook.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Jconsole</title>
    <link href="https://linlshare.github.io/2018/12/13/it/tool/Jconsole/"/>
    <id>https://linlshare.github.io/2018/12/13/it/tool/Jconsole/</id>
    <published>2018-12-13T13:27:50.000Z</published>
    <updated>2018-12-13T13:48:04.361Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Jconsole-是干嘛的？"><a href="#Jconsole-是干嘛的？" class="headerlink" title="Jconsole 是干嘛的？"></a>Jconsole 是干嘛的？</h2><p>Jsonsole 是 <code>JDK_HOME/bin</code> 目录下的一个可执行程序，用于 Java 性能分析，其 GUI 虽简陋，但功能还是可以的。</p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><p>在终端运行以下命令后就可以监控本地的 Java 程序了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> jconsole</span><br></pre></td></tr></table></figure><h2 id="更进一步"><a href="#更进一步" class="headerlink" title="更进一步"></a>更进一步</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 监控远程 Java 程序</span><br><span class="line"><span class="meta">$</span> jconsole hostName:portNum</span><br><span class="line"><span class="meta">#</span> 监控指定进程 ID 的程序</span><br><span class="line"><span class="meta">$</span> jconsole processID</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://docs.oracle.com/javase/7/docs/technotes/guides/management/jconsole.html" target="_blank" rel="noopener">Using JConsole - oracle.com</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Jconsole-是干嘛的？&quot;&gt;&lt;a href=&quot;#Jconsole-是干嘛的？&quot; class=&quot;headerlink&quot; title=&quot;Jconsole 是干嘛的？&quot;&gt;&lt;/a&gt;Jconsole 是干嘛的？&lt;/h2&gt;&lt;p&gt;Jsonsole 是 &lt;code&gt;JDK_H
      
    
    </summary>
    
      <category term="it" scheme="https://linlshare.github.io/categories/it/"/>
    
      <category term="tool" scheme="https://linlshare.github.io/categories/it/tool/"/>
    
    
      <category term="Java" scheme="https://linlshare.github.io/tags/Java/"/>
    
      <category term="Tool" scheme="https://linlshare.github.io/tags/Tool/"/>
    
      <category term="Jconsole" scheme="https://linlshare.github.io/tags/Jconsole/"/>
    
  </entry>
  
  <entry>
    <title>澳門博彩業簡史</title>
    <link href="https://linlshare.github.io/2018/12/12/history/%E6%BE%B3%E9%96%80%E5%8D%9A%E5%BD%A9%E6%A5%AD%E7%B0%A1%E5%8F%B2/"/>
    <id>https://linlshare.github.io/2018/12/12/history/澳門博彩業簡史/</id>
    <published>2018-12-12T14:41:13.000Z</published>
    <updated>2018-12-12T14:52:15.021Z</updated>
    
    <content type="html"><![CDATA[<h2 id="簡史"><a href="#簡史" class="headerlink" title="簡史"></a>簡史</h2><ol><li>16 世紀開埠，內地工人移民澳門工作，并開設賭檔，監管不利，賭風盛行；</li><li>1842年，香港被割，影響了澳門的貿易港地位，為增加多元收入，<strong>1847 年澳葡政府決定博彩業合法化</strong>，博彩業迅猛發展；</li><li>1851年 ~ 1863年，澳葡政府對博彩場所實行發牌制度，賭檔曾一度多達二百餘家，其時盧九的宜安公司集賭場、妓院、酒館、鴉片煙窟於一體；</li><li>1930年，豪興公司獲得所有博彩遊戲的專營權；</li><li><strong>1937年，澳葡政府決定博彩專營</strong>，由泰興公司投得；</li><li>1961年底，泰興公司期滿，由澳門旅遊娛樂有限公司投得；</li><li>2000年7月，澳門特區政府成立博彩委員會；</li><li><strong>2000年8月，立法會通過《娛樂場幸運博彩經營法律制度》，規定只發出最多三個賭牌</strong>，打破博彩業壟斷；</li><li>2002年2月8日，澳門特區政府宣佈將娛樂場幸運博彩經營權批給原「澳門旅遊娛樂有限公司」新組成的「澳門博彩股份有限公司」(簡稱「澳博」)、「銀河娛樂場股份有限公司」(簡稱「銀河」)及「永利渡假村(澳門)股份有限公司」(簡稱「永利」)，其中「澳博」有效期18年，直到2020年3月，「銀河」和「永利」有效期20年，直到2022年6月。</li></ol><h2 id="名詞"><a href="#名詞" class="headerlink" title="名詞"></a>名詞</h2><h3 id="幸運博彩"><a href="#幸運博彩" class="headerlink" title="幸運博彩"></a>幸運博彩</h3><p>1961年2月，經第119任總督馬濟時界定了賭博與博彩的定義：“凡博彩，其結果為偶然性，純粹幸運致勝者”，概稱“幸運博彩”。</p><h3 id="東方蒙地卡羅"><a href="#東方蒙地卡羅" class="headerlink" title="東方蒙地卡羅"></a>東方蒙地卡羅</h3><p>蒙地卡羅（法語：Monte-Carlo）是歐洲地中海沿岸的小國摩納哥的一座城市，有「賭博之國」之稱。「東方蒙地卡羅」自然就是指澳門了。</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ol><li><a href="http://www.dicj.gov.mo/web/cn/history/index.html" target="_blank" rel="noopener">澳 門 博 彩 業 歷 史 - 澳門博彩監察局</a></li><li><a href="https://zh.wikipedia.org/zh-mo/%E6%BE%B3%E9%96%80%E5%8D%9A%E5%BD%A9%E6%A5%AD" target="_blank" rel="noopener">澳門博彩業 - 維基百科</a></li><li><a href="http://www.macauresearch.org/my%20webs1/magazine1/magazine1casinohistory.htm" target="_blank" rel="noopener">澳門博彩業大事追尋 - 澳門社會發展研究會</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;簡史&quot;&gt;&lt;a href=&quot;#簡史&quot; class=&quot;headerlink&quot; title=&quot;簡史&quot;&gt;&lt;/a&gt;簡史&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;16 世紀開埠，內地工人移民澳門工作，并開設賭檔，監管不利，賭風盛行；&lt;/li&gt;
&lt;li&gt;1842年，香港被割，影響了澳門的貿易
      
    
    </summary>
    
      <category term="history" scheme="https://linlshare.github.io/categories/history/"/>
    
    
      <category term="History" scheme="https://linlshare.github.io/tags/History/"/>
    
      <category term="澳門" scheme="https://linlshare.github.io/tags/%E6%BE%B3%E9%96%80/"/>
    
      <category term="博彩業" scheme="https://linlshare.github.io/tags/%E5%8D%9A%E5%BD%A9%E6%A5%AD/"/>
    
  </entry>
  
  <entry>
    <title>FunnyTool</title>
    <link href="https://linlshare.github.io/2018/12/12/it/tool/FunnyTool/"/>
    <id>https://linlshare.github.io/2018/12/12/it/tool/FunnyTool/</id>
    <published>2018-12-12T03:57:21.000Z</published>
    <updated>2018-12-12T04:02:46.214Z</updated>
    
    <content type="html"><![CDATA[<p> 这里是各类有趣的在线工具的收集箱。收藏品如下：</p><table><thead><tr><th>Tool</th><th>Features</th></tr></thead><tbody><tr><td><a href="http://asciiflow.com/" target="_blank" rel="noopener">asciiflow.com</a></td><td>绘制 ASCII 格式的代码注释</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; 这里是各类有趣的在线工具的收集箱。收藏品如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Tool&lt;/th&gt;
&lt;th&gt;Features&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://asciifl
      
    
    </summary>
    
      <category term="it" scheme="https://linlshare.github.io/categories/it/"/>
    
      <category term="tool" scheme="https://linlshare.github.io/categories/it/tool/"/>
    
    
      <category term="Tool" scheme="https://linlshare.github.io/tags/Tool/"/>
    
  </entry>
  
  <entry>
    <title>Bach</title>
    <link href="https://linlshare.github.io/2018/12/09/music/Bach/"/>
    <id>https://linlshare.github.io/2018/12/09/music/Bach/</id>
    <published>2018-12-09T12:41:49.000Z</published>
    <updated>2018-12-09T14:52:49.438Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th>KEY</th><th>VALUE</th></tr></thead><tbody><tr><td>原名</td><td>Johann Sebastian Bach（德语）</td></tr><tr><td>译名</td><td>約翰·塞巴斯蒂安·巴哈（台灣）、约翰·塞巴斯蒂安·巴赫（大陆）</td></tr><tr><td>国籍</td><td>神圣罗马帝国（德国）</td></tr><tr><td>生卒</td><td>1685年3月21日（Eisenach，埃森纳赫）－1750年7月28日（St Thomas Church，莱比锡圣多马教堂）</td></tr><tr><td>风格</td><td>巴洛克、复调音乐</td></tr><tr><td>身份</td><td>作曲家，管风琴、小提琴和大键琴演奏家，宫廷乐长</td></tr><tr><td>作品</td><td>按作品目录分类，冠之以 <strong>BWV</strong>（巴赫作品目录），共有 1126 件各类音乐作品。注意：BWV 中少数非巴赫所作。</td></tr><tr><td>影响力</td><td>生前未得到正确的评价，死后数十年亦然，直到1829年，门德尔松改编并指挥了巴赫的《马太受难曲》，震惊音乐界，随后开始了“复兴巴赫”运动，才逐渐恢复应有的地位。如今巴赫与维瓦尔第、亨德尔并称巴洛克三巨匠，在音乐史上和莫扎特、贝多芬齐名。</td></tr></tbody></table><h2 id="十二平均律键盘曲集（BWV-846-893）"><a href="#十二平均律键盘曲集（BWV-846-893）" class="headerlink" title="十二平均律键盘曲集（BWV 846-893）"></a>十二平均律键盘曲集（BWV 846-893）</h2><p>巴赫的十二平均律键盘曲集（BWV 846-893）是其较著名作品之一，古尔德和里赫特都曾演奏过。里赫特演奏的版本收录在其专辑 《The Well-Tempered Clavier》中。古尔德演奏的版本收录在其专辑《Bach: The Well-Tempered Clavier Book I, BWV 846-869》及《The Glenn Gould Edition - Bach: The Well-Tempered Clavier, Book II》中。注意：这里所用的专辑名称来自网易云音乐。</p><h2 id="入选旅行者金唱片（Voyager-Golden-Records）"><a href="#入选旅行者金唱片（Voyager-Golden-Records）" class="headerlink" title="入选旅行者金唱片（Voyager Golden Records）"></a>入选旅行者金唱片（Voyager Golden Records）</h2><p>1977 年 NASA 发射了两艘旅行者号太空探测器，其中放置了一张旅行者金唱片，里面收录了用以表述地球上各种文化及生命的声音及图像。其中就有三首属于巴赫的作品：</p><ol><li>《F大调第二勃兰登堡协奏曲》第一乐章，BWV 1047</li><li>《E大调无伴奏小提琴组曲第三号》之回旋曲式的加沃特（Gavotte en rondeaux），BWV 1006</li><li>《平均律钢琴曲集》第二卷第一号，C大调前奏曲及赋格，BWV 870</li></ol><blockquote><p>小贴士：旅行者金唱片可以通过访问网站 <a href="http://goldenrecord.org/#discus-aureus" target="_blank" rel="noopener">goldenrecord.org</a> ，在线播放其中的声音和图像，很有意思。</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://zh.wikipedia.org/zh-cn/约翰·塞巴斯蒂安·巴赫" target="_blank" rel="noopener">约翰·塞巴斯蒂安·巴赫 - 维基百科</a></li><li><a href="https://zh.wikipedia.org/zh-cn/%E6%97%85%E8%A1%8C%E8%80%85%E9%87%91%E5%94%B1%E7%89%87" target="_blank" rel="noopener">旅行者金唱片 - 维基百科</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;KEY&lt;/th&gt;
&lt;th&gt;VALUE&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;原名&lt;/td&gt;
&lt;td&gt;Johann Sebastian Bach（德语）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;译
      
    
    </summary>
    
      <category term="music" scheme="https://linlshare.github.io/categories/music/"/>
    
    
      <category term="Music" scheme="https://linlshare.github.io/tags/Music/"/>
    
      <category term="Bach" scheme="https://linlshare.github.io/tags/Bach/"/>
    
  </entry>
  
  <entry>
    <title>海蒂和爷爷</title>
    <link href="https://linlshare.github.io/2018/12/08/movie/%E6%B5%B7%E8%92%82%E5%92%8C%E7%88%B7%E7%88%B7/"/>
    <id>https://linlshare.github.io/2018/12/08/movie/海蒂和爷爷/</id>
    <published>2018-12-08T15:14:31.000Z</published>
    <updated>2018-12-08T16:02:12.958Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/12/08/movie/海蒂和爷爷/海蒂和爷爷_截图.jpg" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">导演: 阿兰·葛斯彭纳</span><br><span class="line">编剧: 约翰娜·施皮里 / 佩特拉·比翁迪娜·沃尔普</span><br><span class="line">主演: 阿努克·斯特芬 / 布鲁诺·甘茨 / 昆林·艾格匹 / 安娜·申茨 / 伊莎贝尔·奥特曼 / 更多...</span><br><span class="line">类型: 剧情 / 家庭 / 冒险</span><br><span class="line">官方网站: www.heidi.studiocanal.de</span><br><span class="line">制片国家/地区: 德国 / 瑞士 / 南非</span><br><span class="line">语言: 德语 / 瑞士德语 / 南非语</span><br><span class="line">上映日期: 2015-12-10(德国)</span><br><span class="line">片长: 111分钟</span><br><span class="line">又名: 飘零燕(港) / 海蒂 / 阿尔卑斯山少女海蒂</span><br><span class="line">IMDb链接: tt3700392</span><br></pre></td></tr></table></figure><p>海蒂，一个瑞士小女孩，父母双亡，由姨妈带大。后来姨妈想要去法兰克福工作，不能再带海蒂了，于是把她带到她爷爷住的山上。爷爷是一个性情冷淡的老人，邻居都不敢靠近他，甚至流言说他杀过人。爷爷不肯接纳海蒂，但是姨妈已经弃海蒂而去了。尽管爷爷心里抗拒，关闭了房门，可海蒂已经跳进羊圈跟小羊度过了第一天。慢慢地，爷爷接纳了海蒂，让她睡阁楼的草垫上，还给她做了一把小木椅。海蒂也融入了爷爷阿尔卑斯山里自由自在的生活，认识了小牧羊人皮特，并成为了好朋友。</p><p>有一天，海蒂的姨妈又来了，骗走了海蒂，把她卖给了法兰克福一个富裕人家，给他们的小姐克拉拉做玩伴。“粗鲁”的海蒂要遵守各种繁文缛节，常常闹出笑话，给孤独而且双脚不便的克拉拉带来了很多欢乐。克拉拉的奶奶还给海蒂读故事书，海蒂很喜欢，可是奶奶读了不到一半就停了，告诉海蒂想知道后面的故事，要认字。于是，海蒂认真地听私人教师的课。没多久就学会了念读故事书，大家都很高兴。但海蒂心里一直想着阿尔卑斯山、爷爷、皮特还有山羊，还因此梦游去开门，风吹门发出奇怪的声音，大家都以为是闹鬼了。主人家的医生发现后建议主人送她回家以免积郁成疾。尽管克拉拉不肯而发脾气，主人也不情愿，但还是送海蒂回到了阿尔卑斯山。</p><p>海蒂又回到了故乡，那人，那山，那山羊，心里无限欢快。海蒂写信给克拉拉，告诉她这里的生活，要她过来这里看看。克拉拉的奶奶把信读给克拉拉听了。不久，她们就来到了海蒂身边，两人紧紧拥抱，笑容可掬。奶奶留下了克拉拉几天，跟着海蒂一起在大山里玩耍。这时皮特不乐意了，因为他觉得海蒂好像被克拉拉抢走了。于是，在一天早上，把克拉拉的轮椅推向了山谷。这一天，爷爷背着克拉拉，海蒂在后面，一起去放羊。克拉拉坐在石头上，一只蝴蝶落在她的脚上，她伸手去抓，蝴蝶飞起来了，她站起来想要去抓。是的，她站起来了！海蒂和皮特搀扶着她，每天练习走路。在他爸爸来接她的时候，她缓步走向她爸爸，她爸爸和奶奶感动得眼泪夺眶而出，抱起了克拉拉。克拉拉回家了。海蒂和爷爷，也回家了。他们春天放羊，冬天滑雪橇。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2018/12/08/movie/海蒂和爷爷/海蒂和爷爷_截图.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span clas
      
    
    </summary>
    
      <category term="movie" scheme="https://linlshare.github.io/categories/movie/"/>
    
    
      <category term="电影" scheme="https://linlshare.github.io/tags/%E7%94%B5%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>明清時期澳門華人社會研究論文集</title>
    <link href="https://linlshare.github.io/2018/12/07/history/%E6%98%8E%E6%B8%85%E6%99%82%E6%9C%9F%E6%BE%B3%E9%96%80%E8%8F%AF%E4%BA%BA%E7%A4%BE%E6%9C%83%E7%A0%94%E7%A9%B6%E8%AB%96%E6%96%87%E9%9B%86/"/>
    <id>https://linlshare.github.io/2018/12/07/history/明清時期澳門華人社會研究論文集/</id>
    <published>2018-12-07T12:40:52.021Z</published>
    <updated>2018-12-12T15:04:43.795Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th>KEY</th><th>VALUE</th></tr></thead><tbody><tr><td>作者/編者</td><td>林廣志 陳文源</td></tr><tr><td>出版社</td><td>澳門基金會</td></tr><tr><td>出版日期</td><td>2018年03月</td></tr><tr><td>ISBN</td><td>978-99937-1-247-3</td></tr><tr><td>頁數</td><td>775</td></tr></tbody></table><p><a href="https://www.macaudata.com/upload_files/pdf/2018/04/27/2018041524791737819.pdf" target="_blank" rel="noopener">在線閱讀</a></p><h2 id="前言──明清時期澳門華人社會研究的回顧與前瞻"><a href="#前言──明清時期澳門華人社會研究的回顧與前瞻" class="headerlink" title="前言──明清時期澳門華人社會研究的回顧與前瞻"></a>前言──明清時期澳門華人社會研究的回顧與前瞻</h2><blockquote><p>金國平、吳志良認為，兩宋時期澳門已是客家先民從中原遷徙、開發華南的歷史足跡之一。</p></blockquote><p>客家人足跡遍佈大半個中國，了不起。</p><blockquote><p>總體而言，目前澳門華商家族的研究，大多關注晚清居澳華商的經濟狀況、社會地位以及參與社會公益、國內政治活動，對於<strong>由葡國管治下傳統華人家族觀念、家族維繫因素、家族企業經營方式以及家族與社會勾聯</strong>等極具特色的內容，仍需進行學理性的梳理，這種梳理對深入理解澳門近代社會的構成和發展無疑具有重要意義。</p></blockquote><p>從家族社會或者說熟人社會，往現代社會發展的過程是重點。</p><blockquote><p>居澳華人在澳門經濟發展過程中的角色，經歷由<strong>葡商附庸型</strong>到<strong>澳門經濟主控型</strong>的轉變。在鴉片戰爭前，華人主要是從事通事、買辦、小商販、手工、僕役等葡商附庸性的工作…… 19 世紀初，清政府兩次修訂對外策，對日漸增強的澳門華商團體予以沉重的打擊:一是實施禁煙政策，懲辦了一批華人鴉片商;二是為抗擊葡國在澳門推行強硬的殖民政策，廣東政府實施了“以商制夷”策略，將居澳華商遷至黃埔港。經歷了這兩次重大事件，剛剛萌生的澳門華商財團勢力嚴重受挫。</p><p>19 世紀 40 年代，葡國政府為了挽回澳門貿易被邊緣化的危機，追隨英國在香港的政策，<strong>擅自宣佈澳門為自由港</strong>，並在澳門推行強硬的殖民政策，強拆中方官署。由於洋船駛往香港，居澳華商遷至黃埔，澳門並沒能因其“自由”而繁榮起來，反而因失去華商而陷入衰落，致使澳葡政府財政陷入危機。為了扭轉日益惡化的財政狀況，澳葡政府開始對<strong>賭博業與一些重要民生物資 (如豬肉等) 實施專營制度</strong>。 50 年代，由於國內民亂，大批華人攜資避難澳門，而澳葡政府的專營制度為這些新移民者提供了新的營商機會。在這樣的環境下，華人以其資本與勇氣，逐漸壟斷了澳門大部分專營行業，大至賭博經營、鴉片貿易、苦力貿易，小至食品經營、手工車服務、街燈管理等等，華人成為澳門經濟發展最重要的力量。</p></blockquote><p>怎麼做到的？時運輪轉。</p><p>清政府嚴禁鴉片，轉移居澳華商 –&gt; 40年代葡國殖民澳門，陷入財政危機 –&gt; 實施賭博業和重要民生物資專營制度  –&gt; 50年代國內民亂，華人攜資避難澳門 –&gt; 華人壟斷大部分專營行業。</p><blockquote><p>1582 年，澳門議事會成立，此後逐漸形成華葡分治的政治格局。葡王於 1589年發佈訓令，明確規定議事會不得干預華人事務，但華人天主教徒例外……</p><p>華葡分治”是明清時期澳門社會管治的特徵，但明清政府主要是管主權、管邊防、管稅收。亞馬留事件後，儘管澳葡政府極力拉攏居澳華人，但對居澳華人的社會生活卻力不從心。因此，實質上華人社會長期處於“管而不理”的狀態，澳門華人社會內部更多地依賴中葡之外的“第三權力”進行調節。湯開建認為，鏡湖醫院是由當時華人精英籌建，在華人社會中具有極高的公信力，鏡湖醫院不僅從事一般性的慈善公益活動，也是華人集議商事的重要機構……林廣志對華人社會組織進行了歷史考察，認為澳門華人組織從漁農社會到近代商業社會的發展歷經了五個階段:第一是以<strong>媽閣廟、蓮峰廟</strong>為代表的神緣性組織;第二是以<strong>三街會館</strong>為代表的業緣性組織;第三是以<strong>鏡湖醫院、同善堂</strong>為代表的慈善性組織;第四是以<strong>宜安公司</strong>等為代表的聯誼性組織;第五是以<strong>澳門商會</strong>為代表的政商性組織，這些組織大多承擔起華人社會解決糾紛、集議商事的功能，逐漸形成華人社會管的“第三權力”。</p></blockquote><p>華人的事務明清政府不管，葡人又管不了，只能靠民間團體自治了。聯繫澳門華人的紐帶由神、職業、慈善組織、聯誼組織變化到政商組織。原來設立澳門行政區是有其自治背景的。</p><blockquote><p><strong>孫中山在澳門行醫</strong>得到了一眾華商的熱心支持，但在其尋覓革命的“熱心同志”時卻遭受“冷遇”，原因是澳門華商普遍不贊成孫之“激烈之主張”。</p></blockquote><p>據<a href="http://www.takungpao.com.hk/paper/2017/0328/69970.html" target="_blank" rel="noopener">孫中山澳門行醫足跡 - 大公網</a>，孫先生1892年畢業于香港西醫書院，后到澳門鏡湖醫院為華人義診，成為該院首位西醫。</p><blockquote><p>澳門社會的複雜性是眾所周知的，所謂“小澳門，多內涵;表象單純，深層複雜”。</p></blockquote><h2 id="一、人口家族"><a href="#一、人口家族" class="headerlink" title="一、人口家族"></a>一、人口家族</h2><h3 id="晚清澳門華人巨商盧九家族事跡考述-林廣志"><a href="#晚清澳門華人巨商盧九家族事跡考述-林廣志" class="headerlink" title="晚清澳門華人巨商盧九家族事跡考述 - 林廣志"></a>晚清澳門華人巨商盧九家族事跡考述 - 林廣志</h3><blockquote><p>盧九(1848 - 1907)，原名華紹，字育諾，號焯之，小名 ，廣東新會潮連鄉人。盧九是 19 世紀下半葉澳門的“一代賭王”，也是當時澳門政治、經濟及社會生活中最有影響的華商代表之一。幾十年間，盧九及其家族縱橫省澳，際會風雲，專擅煙賭，旁及其餘，熱心社群，樂善好施，在華葡社會享有極高的聲譽。</p></blockquote><p>盧家大屋</p><p>盧廉若公園</p><h2 id="文字比較"><a href="#文字比較" class="headerlink" title="文字比較"></a>文字比較</h2><table><thead><tr><th>大陆简体</th><th>台灣繁體</th><th>澳門繁體</th></tr></thead><tbody><tr><td>研究</td><td>研究</td><td>硏究</td></tr><tr><td>打拼</td><td>打拼</td><td>打<img src="/2018/12/07/history/明清時期澳門華人社會研究論文集/pin.png" alt=""></td></tr><tr><td>节假</td><td>節假</td><td>節假</td></tr><tr><td>判断</td><td>判斷</td><td><img src="/2018/12/07/history/明清時期澳門華人社會研究論文集/pan.png" alt="pan">斷</td></tr><tr><td>学者</td><td>學者</td><td>學者</td></tr><tr><td>价值</td><td>價值</td><td>價値</td></tr><tr><td>读书</td><td>讀書</td><td><img src="/2018/12/07/history/明清時期澳門華人社會研究論文集/du.png" alt="">書</td></tr><tr><td>契约</td><td>契約</td><td><img src="/2018/12/07/history/明清時期澳門華人社會研究論文集/qi.png" alt=""><img src="/2018/12/07/history/明清時期澳門華人社會研究論文集/yue.png" alt=""></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;KEY&lt;/th&gt;
&lt;th&gt;VALUE&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;作者/編者&lt;/td&gt;
&lt;td&gt;林廣志 陳文源&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;出版社&lt;/td&gt;
&lt;td&gt;澳門基
      
    
    </summary>
    
      <category term="history" scheme="https://linlshare.github.io/categories/history/"/>
    
    
      <category term="History" scheme="https://linlshare.github.io/tags/History/"/>
    
      <category term="澳門" scheme="https://linlshare.github.io/tags/%E6%BE%B3%E9%96%80/"/>
    
  </entry>
  
  <entry>
    <title>WebMagic</title>
    <link href="https://linlshare.github.io/2018/12/07/it/robot/WebMagic/"/>
    <id>https://linlshare.github.io/2018/12/07/it/robot/WebMagic/</id>
    <published>2018-12-07T02:06:53.000Z</published>
    <updated>2018-12-07T06:53:04.078Z</updated>
    
    <content type="html"><![CDATA[<h2 id="WebMagic-是干嘛的？"><a href="#WebMagic-是干嘛的？" class="headerlink" title="WebMagic 是干嘛的？"></a>WebMagic 是干嘛的？</h2><p>WebMagic 是一个 Java 平台上的开源爬虫框架，其设计参考了 Scrapy，实现则参考了 HttpClient 和 Jsoup。其由四大组件组成：</p><ol><li>Downloader，负责下载网页，使用 HttpClient。</li><li>PageProcessor，负责解析网页和链接发现，使用 Jsoup 和 Xsoup。</li><li>Scheduler，负责管理待抓取的 URL 和去重。</li><li>Pipeline，负责结果数据的持久化。</li></ol><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="（1）依赖引入"><a href="#（1）依赖引入" class="headerlink" title="（1）依赖引入"></a>（1）依赖引入</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">ext &#123;</span><br><span class="line">  versions = [</span><br><span class="line">    <span class="string">"web_magic"</span>: <span class="string">'0.7.3'</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">  <span class="comment">// 这里有自己项目的日志实现</span></span><br><span class="line">  compile project(<span class="string">':base'</span>)</span><br><span class="line"></span><br><span class="line">  compile(<span class="string">"us.codecraft:webmagic-core:$&#123;versions.web_magic&#125;"</span>) &#123;</span><br><span class="line">    exclude <span class="string">group:</span> <span class="string">'org.slf4j'</span>, <span class="string">module:</span> <span class="string">'slf4j-log4j12'</span> <span class="comment">// 移除默认的日志实现</span></span><br><span class="line">  &#125;</span><br><span class="line">  compile(<span class="string">"us.codecraft:webmagic-extension:$&#123;versions.web_magic&#125;"</span>) &#123;</span><br><span class="line">    exclude <span class="string">group:</span> <span class="string">'org.slf4j'</span>, <span class="string">module:</span> <span class="string">'slf4j-log4j12'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（2）快速开始"><a href="#（2）快速开始" class="headerlink" title="（2）快速开始"></a>（2）快速开始</h3><p>爬取 <a href="https://github.com/code4craft/" target="_blank" rel="noopener">https://github.com/code4craft/</a> 页面上可以发现的所有 Github 仓库信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GithubRepoPageProcessor</span> <span class="keyword">implements</span> <span class="title">PageProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Site site = Site.me().setRetryTimes(<span class="number">3</span>).setSleepTime(<span class="number">200</span>).setTimeOut(<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Page page)</span> </span>&#123;</span><br><span class="line">    String regex = <span class="string">"(https://github\\.com/code4craft/([\\w-_]+)/)"</span>;</span><br><span class="line">    page.addTargetRequests(page.getHtml()</span><br><span class="line">                               .links()</span><br><span class="line">                               .regex(regex)</span><br><span class="line">                               .all());</span><br><span class="line">    <span class="keyword">if</span>(!Pattern.matches(regex,page.getUrl().get()))&#123;</span><br><span class="line">      <span class="comment">//skip this page</span></span><br><span class="line">      page.setSkip(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    page.putField(<span class="string">"author"</span>, page.getUrl().regex(<span class="string">"https://github\\.com/(\\w+)/.*"</span>).toString());</span><br><span class="line">    page.putField(<span class="string">"name"</span>,</span><br><span class="line">                  page.getHtml()</span><br><span class="line">                      .xpath(<span class="string">"//meta[@property='og:title']/@content"</span>)</span><br><span class="line">                      .toString());</span><br><span class="line">    <span class="keyword">if</span> (page.getResultItems().get(<span class="string">"name"</span>) == <span class="keyword">null</span>) &#123;</span><br><span class="line">      page.setSkip(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    page.putField("readme", page.getHtml().xpath("//div[@id='readme']/tidyText()"));</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Site <span class="title">getSite</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> site;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Spider.create(<span class="keyword">new</span> GithubRepoPageProcessor())</span><br><span class="line">          .addUrl(<span class="string">"https://github.com/code4craft/"</span>)</span><br><span class="line">          .thread(<span class="number">5</span>)</span><br><span class="line">          .run();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="更进一步"><a href="#更进一步" class="headerlink" title="更进一步"></a>更进一步</h2><h3 id="Pipeline-接口参数分析"><a href="#Pipeline-接口参数分析" class="headerlink" title="Pipeline 接口参数分析"></a>Pipeline 接口参数分析</h3><p>Pipeline 接口会在每个 Page 解析完成之后回调一次。其中的参数如下：</p><p><strong>（1）Task</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"exitWhenComplete"</span>: <span class="literal">true</span>,</span><br><span class="line">    "pageCount": 0, // 抓取的第几页</span><br><span class="line">    "scheduler": &#123;</span><br><span class="line">        "duplicateRemover": &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    "site": &#123;</span><br><span class="line">        "acceptStatCode": [</span><br><span class="line">            <span class="number">200</span></span><br><span class="line">        ],</span><br><span class="line">        "allCookies": &#123;&#125;,</span><br><span class="line">        "cookies": &#123;&#125;,</span><br><span class="line">        "cycleRetryTimes": 0,</span><br><span class="line">        "disableCookieManagement": false,</span><br><span class="line">        "domain": "github.com",</span><br><span class="line">        "headers": &#123;</span><br><span class="line">            ":method": "GET",</span><br><span class="line">            "origin": "https://github.com"</span><br><span class="line">        &#125;,</span><br><span class="line">        "retrySleepTime": 1000,</span><br><span class="line">        "retryTimes": 3,</span><br><span class="line">        "sleepTime": 100,</span><br><span class="line">        "timeOut": 10000,</span><br><span class="line">        "useGzip": true</span><br><span class="line">    &#125;,</span><br><span class="line">    "spawnUrl": true,</span><br><span class="line">    "startTime": 1544165065094,</span><br><span class="line">    "status": "Running",</span><br><span class="line">    "threadAlive": 1,</span><br><span class="line">    "uUID": "github.com"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>（2）ResultItems</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"all"</span>: &#123;</span><br><span class="line">        // 自定义的字段在这里</span><br><span class="line">        "a_key":"a_value"</span><br><span class="line">    &#125;,</span><br><span class="line">    "request": &#123;</span><br><span class="line">        "binaryContent": false,</span><br><span class="line">        "cookies": &#123;&#125;,</span><br><span class="line">        "headers": &#123;&#125;,</span><br><span class="line">        "priority": 0,</span><br><span class="line">        "url": "https://github.com/code4craft?tab=repositories"</span><br><span class="line">    &#125;,</span><br><span class="line">    "skip": false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="排错"><a href="#排错" class="headerlink" title="排错"></a>排错</h2><h3 id="Https下无法抓取只支持TLS1-2的站点"><a href="#Https下无法抓取只支持TLS1-2的站点" class="headerlink" title="Https下无法抓取只支持TLS1.2的站点"></a>Https下无法抓取只支持TLS1.2的站点</h3><p>作者 code4craft 针对 <a href="https://github.com/code4craft/webmagic/issues/701" target="_blank" rel="noopener">ISSUE 701</a> 提供了如下的解决方案：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">更新会在0.7.4版本发布。</span><br><span class="line"></span><br><span class="line">临时适配方式，修改HttpClientGenerator中的buildSSLConnectionSocketFactory方法，</span><br><span class="line"></span><br><span class="line">return new SSLConnectionSocketFactory(createIgnoreVerifySSL(), new String[]&#123;&quot;SSLv3&quot;, &quot;TLSv1&quot;, &quot;TLSv1.1&quot;, &quot;TLSv1.2&quot;&#125;,</span><br><span class="line">                    null,</span><br><span class="line">                    new DefaultHostnameVerifier())</span><br><span class="line">重写自己实现的HttpClientDownloader，并设置到Spider中。</span><br></pre></td></tr></table></figure><h3 id="java-net-UnknownHostException"><a href="#java-net-UnknownHostException" class="headerlink" title="java.net.UnknownHostException"></a>java.net.UnknownHostException</h3><p>请检查网络连接。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="http://webmagic.io/docs/zh/" target="_blank" rel="noopener">WebMagic in Action - webmagic.io</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;WebMagic-是干嘛的？&quot;&gt;&lt;a href=&quot;#WebMagic-是干嘛的？&quot; class=&quot;headerlink&quot; title=&quot;WebMagic 是干嘛的？&quot;&gt;&lt;/a&gt;WebMagic 是干嘛的？&lt;/h2&gt;&lt;p&gt;WebMagic 是一个 Java 平台上的
      
    
    </summary>
    
      <category term="it" scheme="https://linlshare.github.io/categories/it/"/>
    
      <category term="robot" scheme="https://linlshare.github.io/categories/it/robot/"/>
    
    
      <category term="Java" scheme="https://linlshare.github.io/tags/Java/"/>
    
      <category term="Robot" scheme="https://linlshare.github.io/tags/Robot/"/>
    
      <category term="WebMagic" scheme="https://linlshare.github.io/tags/WebMagic/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cache</title>
    <link href="https://linlshare.github.io/2018/12/05/it/java/cache/Spring%20Cache/"/>
    <id>https://linlshare.github.io/2018/12/05/it/java/cache/Spring Cache/</id>
    <published>2018-12-05T14:46:21.000Z</published>
    <updated>2018-12-06T07:22:57.767Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么要使用-Spring-Cache-管理缓存？"><a href="#为什么要使用-Spring-Cache-管理缓存？" class="headerlink" title="为什么要使用 Spring Cache 管理缓存？"></a>为什么要使用 Spring Cache 管理缓存？</h2><p>让 Spring 来管理 Bean 的缓存具有以下优势：</p><ol><li>Spring 支持 HashMap 缓存，Redis 缓存以及自定义的缓存方式；</li><li>Spring 缓存几乎不需要写代码，只需要配置好并声明好注解。</li></ol><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="（1）依赖引入"><a href="#（1）依赖引入" class="headerlink" title="（1）依赖引入"></a>（1）依赖引入</h3><p>这里使用 Spring 的依赖管理器来管理 Spring Cache 的版本，会自动处理内部的模块间依赖，这也是推荐的方式。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        mavenCentral()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath(<span class="string">"org.springframework.boot:spring-boot-gradle-plugin:2.0.5.RELEASE"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'java'</span></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'org.springframework.boot'</span></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'io.spring.dependency-management'</span></span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile(<span class="string">"org.springframework.boot:spring-boot-starter-cache"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（2）启用缓存"><a href="#（2）启用缓存" class="headerlink" title="（2）启用缓存"></a>（2）启用缓存</h3><p>在 SpringApplication 配置类的地方添加以下注解以启用缓存功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br></pre></td></tr></table></figure><h3 id="（3）ConcurrentHashMap-缓存"><a href="#（3）ConcurrentHashMap-缓存" class="headerlink" title="（3）ConcurrentHashMap 缓存"></a>（3）ConcurrentHashMap 缓存</h3><p>当没有配置其他缓存库时，默认使用 <code>ConcurrentHashMap</code> 作为缓存仓库。</p><h4 id="（3-1）一个简单的实体类"><a href="#（3-1）一个简单的实体类" class="headerlink" title="（3.1）一个简单的实体类"></a>（3.1）一个简单的实体类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String id;</span><br><span class="line">    <span class="keyword">public</span> String firstName;</span><br><span class="line">    <span class="keyword">public</span> String lastName;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">(String firstName, String lastName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">        <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（3-2）一个-Repository"><a href="#（3-2）一个-Repository" class="headerlink" title="（3.2）一个 Repository"></a>（3.2）一个 Repository</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerRepository</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Cachable</span></span><br><span class="line">    <span class="function">Customer <span class="title">getByFirstName</span><span class="params">(String firstName)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 这里应该是从数据库查询数据，DEMO 简省成直接新建了。</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Customer(firstName, <span class="string">"Jobs"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（3-3）测试一下"><a href="#（3-3）测试一下" class="headerlink" title="（3.3）测试一下"></a>（3.3）测试一下</h4><p>如果缓存成功了，那么以下代码执行结果的 HashCode 是一致的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppRunner</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(AppRunner.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CustomerRepository customerRepository;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AppRunner</span><span class="params">(CustomerRepository customerRepository)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.customerRepository = customerRepository;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"John --&gt;"</span> + customerRepository.getByFirstName(<span class="string">"John"</span>).hashCode());</span><br><span class="line">        logger.info(<span class="string">"John --&gt;"</span> + customerRepository.getByFirstName(<span class="string">"John"</span>).hashCode());</span><br><span class="line">        logger.info(<span class="string">"John --&gt;"</span> + customerRepository.getByFirstName(<span class="string">"John"</span>).hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（4）配合-Redis-缓存"><a href="#（4）配合-Redis-缓存" class="headerlink" title="（4）配合 Redis 缓存"></a>（4）配合 Redis 缓存</h3><h4 id="（4-1）添加-Redis-依赖"><a href="#（4-1）添加-Redis-依赖" class="headerlink" title="（4.1）添加 Redis 依赖"></a>（4.1）添加 Redis 依赖</h4><p>在前面的依赖之下再额外新增 Redis 相关的依赖，如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 本环境中的 spring-data-redis 为 1.8.7.RELEASE 版本</span></span><br><span class="line"><span class="comment">// 高版本的配置略有不同，请留意</span></span><br><span class="line">compile (<span class="string">"org.springframework.data:spring-data-redis"</span>) </span><br><span class="line">compile <span class="string">"redis.clients:jedis:2.9.0"</span></span><br></pre></td></tr></table></figure><h4 id="（4-2）配置-Redis"><a href="#（4-2）配置-Redis" class="headerlink" title="（4.2）配置 Redis"></a>（4.2）配置 Redis</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger LOGGER = LoggerFactory.getLogger(RedisConfig.class);</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Map&lt;String, Long&gt; CACHE_EXPIRE_MAP = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    CACHE_EXPIRE_MAP.put(<span class="string">"cache1"</span>, <span class="number">5</span> * <span class="number">60L</span>); <span class="comment">//second</span></span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function">RedisConnectionFactory <span class="title">redisConnectionFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    JedisConnectionFactory jedisConFactory = <span class="keyword">new</span> JedisConnectionFactory();</span><br><span class="line">    jedisConFactory.setHostName(<span class="string">"localhost"</span>);</span><br><span class="line">    jedisConFactory.setPort(<span class="number">6379</span>);</span><br><span class="line">    <span class="keyword">return</span> jedisConFactory;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function">StringRedisTemplate <span class="title">stringRedisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> StringRedisTemplate(redisConnectionFactory);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function">RedisTemplate <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> </span>&#123;</span><br><span class="line">    RedisTemplate template = <span class="keyword">new</span> RedisTemplate();</span><br><span class="line">    template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">    template.afterPropertiesSet();</span><br><span class="line">    <span class="comment">// 默认为 JdkSerializationRedisSerializer, 配合 @Cacheable 时 KEY 会有序列化值在中间</span></span><br><span class="line">    <span class="comment">// 使用 StringRedisSerializer 则不会如此</span></span><br><span class="line">    template.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">    <span class="keyword">return</span> template;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> RedisCacheManager <span class="title">cacheManager</span><span class="params">(RedisTemplate redisTemplate)</span> </span>&#123;</span><br><span class="line">    RedisCacheManager cm = <span class="keyword">new</span> RedisCacheManager(redisTemplate);</span><br><span class="line">    cm.setCacheNames(CACHE_EXPIRE_MAP.keySet());</span><br><span class="line">    cm.setExpires(CACHE_EXPIRE_MAP);</span><br><span class="line">    cm.setUsePrefix(<span class="keyword">true</span>);</span><br><span class="line">    cm.setCachePrefix(cacheName -&gt; (cacheName + <span class="string">":"</span>).getBytes());</span><br><span class="line">    <span class="keyword">return</span> cm;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（4-2）序列化实体类"><a href="#（4-2）序列化实体类" class="headerlink" title="（4.2）序列化实体类"></a>（4.2）序列化实体类</h4><p>Spring 在将实体类缓存到 Redis 中时进行了序列化操作，如果不对实体类进行序列化将会报错。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String id;</span><br><span class="line">    <span class="keyword">public</span> String firstName;</span><br><span class="line">    <span class="keyword">public</span> String lastName;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">(String firstName, String lastName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">        <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（4-3）在需要缓存的位置使用注解，并指定缓存名"><a href="#（4-3）在需要缓存的位置使用注解，并指定缓存名" class="headerlink" title="（4.3）在需要缓存的位置使用注解，并指定缓存名"></a>（4.3）在需要缓存的位置使用注解，并指定缓存名</h4><p>如果在使用 Redis 缓存时，没有指定缓存名，将会报错：<code>no cache could be resolved for at least one cache should be provided per cache operation</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerRepository</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Cachable</span>(<span class="string">"cache1"</span>)</span><br><span class="line">    <span class="function">Customer <span class="title">getByFirstName</span><span class="params">(String firstName)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 这里应该是从数据库查询数据，DEMO 简省成直接新建了。</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Customer(firstName, <span class="string">"Jobs"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（4-4）测试一下"><a href="#（4-4）测试一下" class="headerlink" title="（4.4）测试一下"></a>（4.4）测试一下</h4><p>测试代码同（3.3）。除此之外还可以通过 Redis CLI 检验缓存结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> KEYS *</span><br><span class="line">1) "cache1:cb5775e6-1b39-4f63-85c8-13f134a54f32"</span><br><span class="line"><span class="meta">&gt;</span> GET "cache1:cb5775e6-1b39-4f63-85c8-13f134a54f32"</span><br><span class="line"><span class="meta">&gt;</span> TTL "cache1:cb5775e6-1b39-4f63-85c8-13f134a54f32"</span><br></pre></td></tr></table></figure><h2 id="更进一步"><a href="#更进一步" class="headerlink" title="更进一步"></a>更进一步</h2><h3 id="创建自定义的-KeyGenerator"><a href="#创建自定义的-KeyGenerator" class="headerlink" title="创建自定义的 KeyGenerator"></a>创建自定义的 KeyGenerator</h3><ol><li>使上述的 <code>RedisConfig</code> 继承 <code>CachingConfigurerSupport</code>，这一步很重要，否则创建自定义的 <code>KeyGenerator</code> 失败；</li><li>使用 <code>@Bean</code> 声明自定义的 <code>KeyGenerator</code>。代码如下：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> <span class="keyword">extends</span> <span class="title">CachingConfigurerSupport</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> KeyGenerator <span class="title">keyGenerator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SimpleKeyGenerator() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> Object <span class="title">generate</span><span class="params">(Object target, Method method, Object... params)</span> </span>&#123;</span><br><span class="line">          <span class="comment">// 这里使用 [`] 分割参数，更进一步的还可以加入 method 名，或者直接重写一个 KeyGenerator。</span></span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">super</span>.generate(target, method, StringUtils.arrayToDelimitedString(params, <span class="string">"`"</span>));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，就可以覆盖 Spring Cache 默认的 <code>SimpleKeyGenerator</code> 了。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://spring.io/guides/gs/caching/" target="_blank" rel="noopener">Caching Data with Spring - spring.io</a></li><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-caching.html#boot-features-caching-provider-redis" target="_blank" rel="noopener">Caching - spring.io</a></li><li><a href="https://www.baeldung.com/spring-cache-tutorial" target="_blank" rel="noopener">A Guide To Caching in Spring - baeldung.com</a></li><li><a href="https://docs.spring.io/spring-data/redis/docs/2.1.3.RELEASE/reference/html/#redis.repositories.expirations" target="_blank" rel="noopener">Spring Data Redis</a></li><li><a href="https://www.cnblogs.com/morethink/p/7798602.html" target="_blank" rel="noopener">spring使用redis做缓存 - cnblogs.com</a></li><li><a href="https://www.baeldung.com/spring-cache-custom-keygenerator" target="_blank" rel="noopener">Spring Cache – Creating a Custom KeyGenerator</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;为什么要使用-Spring-Cache-管理缓存？&quot;&gt;&lt;a href=&quot;#为什么要使用-Spring-Cache-管理缓存？&quot; class=&quot;headerlink&quot; title=&quot;为什么要使用 Spring Cache 管理缓存？&quot;&gt;&lt;/a&gt;为什么要使用 Spri
      
    
    </summary>
    
      <category term="it" scheme="https://linlshare.github.io/categories/it/"/>
    
      <category term="java" scheme="https://linlshare.github.io/categories/it/java/"/>
    
      <category term="cache" scheme="https://linlshare.github.io/categories/it/java/cache/"/>
    
    
      <category term="Java" scheme="https://linlshare.github.io/tags/Java/"/>
    
      <category term="Spring" scheme="https://linlshare.github.io/tags/Spring/"/>
    
      <category term="Cache" scheme="https://linlshare.github.io/tags/Cache/"/>
    
  </entry>
  
  <entry>
    <title>Spring Data MongoDB</title>
    <link href="https://linlshare.github.io/2018/12/05/it/java/persistence/Spring%20Data%20MongoDB/"/>
    <id>https://linlshare.github.io/2018/12/05/it/java/persistence/Spring Data MongoDB/</id>
    <published>2018-12-05T06:25:40.000Z</published>
    <updated>2018-12-12T07:20:08.564Z</updated>
    
    <content type="html"><![CDATA[<h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><p>快速集成 MongoDB，不用写一行 MongoDB 的 CRUD 语句。而是使用 Spring Data 独有的方法命名方式定义数据库操作，并且可以方便地替换各种数据库，比如 MySQL。</p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="（0）开始之前"><a href="#（0）开始之前" class="headerlink" title="（0）开始之前"></a>（0）开始之前</h3><p>确保已有可连接的 MongoDB</p><h3 id="（1）依赖引入"><a href="#（1）依赖引入" class="headerlink" title="（1）依赖引入"></a>（1）依赖引入</h3><p>在 <code>build.gradle</code> 中添加如下依赖。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        mavenCentral()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath(<span class="string">"org.springframework.boot:spring-boot-gradle-plugin:2.0.5.RELEASE"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'java'</span></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'org.springframework.boot'</span></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'io.spring.dependency-management'</span></span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sourceCompatibility = <span class="number">1.8</span></span><br><span class="line">targetCompatibility = <span class="number">1.8</span></span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile(<span class="string">"org.springframework.boot:spring-boot-starter-data-mongodb"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（2）配置-MongoDB-连接"><a href="#（2）配置-MongoDB-连接" class="headerlink" title="（2）配置 MongoDB 连接"></a>（2）配置 MongoDB 连接</h3><p>这里配置了 MongoDB 的连接地址和使用的数据库，还配置了扫描 Repositories 的位置。Repositories 我们后面会讲到是什么。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableMongoRepositories</span>(basePackages = <span class="string">"com.example.dao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MongoConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> MongoOperations <span class="title">mongoTemplate</span><span class="params">()</span> <span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MongoTemplate(mongoDbFactory());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> MongoDbFactory <span class="title">mongoDbFactory</span><span class="params">()</span> <span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SimpleMongoDbFactory(<span class="keyword">new</span> MongoClientURI(<span class="string">"mongodb://localhost:27017/test"</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（3）定义一个简单的实体类"><a href="#（3）定义一个简单的实体类" class="headerlink" title="（3）定义一个简单的实体类"></a>（3）定义一个简单的实体类</h3><p>实体类是一个 POJO，不过会多一些注解。简单介绍下这些注解吧：</p><ol><li><code>@Document</code> ，用于自定义 MongoDB 中 Collection 的名称，<strong>默认情况下 collection 值为空，使用类名的小写形式作为 Collection 的名称</strong>；</li><li><code>@Id</code> ，用于指定 MongoDB 内部使用字段 <code>_id</code> 的值，如果不指定，则使用自动生成的值。</li><li><code>@Field</code> ，用于指定字段存储时的名称，如果不指定，则直接使用字段名。<strong>如果字段名为<code>id</code>，那么一定要使用该注解，否则会读取时使用系统的<code>_id</code>作为 <code>id</code> 的值</strong>。</li><li><code>@Indexed</code>，用于为指定字段添加索引，会调用 MongoDB 的 <code>createIndex</code> 方法。值得注意的是：<strong>必须 <code>@Document</code> 注解，否则不会自动生成索引</strong>。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Document</span>(collection = <span class="string">"Customer"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">public</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Indexed</span></span><br><span class="line">    <span class="meta">@Field</span>(<span class="string">"first_name"</span>)</span><br><span class="line">    <span class="keyword">public</span> String firstName;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Field</span>(<span class="string">"last_name"</span>)</span><br><span class="line">    <span class="keyword">public</span> String lastName;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">(String firstName, String lastName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">        <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（4）定义一个-Repository"><a href="#（4）定义一个-Repository" class="headerlink" title="（4）定义一个 Repository"></a>（4）定义一个 Repository</h3><p><code>MongoRepository</code> 中定义的基本的 CRUD 操作，你可以自定义查询方法，不过要遵守一定的规范，Spring Data MongoDB 会根据方法名和参数去执行数据库操作。这个规范参见下文 <u>支持的查询方法关键字列表</u>。此处只需要了解有 <code>findByXx</code> 的方法名即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CustomerRepository</span> <span class="keyword">extends</span> <span class="title">MongoRepository</span>&lt;<span class="title">Customer</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Customer <span class="title">findByFirstName</span><span class="params">(String firstName)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">findByLastName</span><span class="params">(String lastName)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（5）让-Spring-Boot-自动装配-CustomerRepository"><a href="#（5）让-Spring-Boot-自动装配-CustomerRepository" class="headerlink" title="（5）让 Spring Boot 自动装配 CustomerRepository"></a>（5）让 Spring Boot 自动装配 CustomerRepository</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> CustomerRepository repository;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(Application.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">repository.deleteAll();</span><br><span class="line"></span><br><span class="line"><span class="comment">// save a couple of customers</span></span><br><span class="line">repository.save(<span class="keyword">new</span> Customer(<span class="string">"Alice"</span>, <span class="string">"Smith"</span>));</span><br><span class="line">repository.save(<span class="keyword">new</span> Customer(<span class="string">"Bob"</span>, <span class="string">"Smith"</span>));</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"-------------------------------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// fetch an individual customer</span></span><br><span class="line">System.out.println(repository.findByFirstName(<span class="string">"Alice"</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（6）使用-MongoDB-命令行查询"><a href="#（6）使用-MongoDB-命令行查询" class="headerlink" title="（6）使用 MongoDB 命令行查询"></a>（6）使用 MongoDB 命令行查询</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> mongo</span><br><span class="line"><span class="meta">&gt;</span> use test</span><br><span class="line"><span class="meta">&gt;</span> db.Customer.find(&#123;&#125;)</span><br></pre></td></tr></table></figure><h2 id="深入探讨"><a href="#深入探讨" class="headerlink" title="深入探讨"></a>深入探讨</h2><h3 id="常用的匹配注解列表"><a href="#常用的匹配注解列表" class="headerlink" title="常用的匹配注解列表"></a>常用的匹配注解列表</h3><table><thead><tr><th>Annotation</th><th>Desc</th></tr></thead><tbody><tr><td><code>@Id</code></td><td>用于指定 MongoDB 内部使用字段 <code>_id</code> 的值，如果不指定，则使用自动生成的值。</td></tr><tr><td><code>@Field</code></td><td>用于指定数据库中存储的字段名。</td></tr><tr><td><code>@Document</code></td><td>用于指定该类的实例对应 MongoDB 的某个指定 Collection 下的 Document。</td></tr><tr><td><code>@Indexed</code></td><td>用于为指定字段添加索引。<code>@Indexed(unique = true)</code> 可注解唯一键</td></tr><tr><td><code>@CompoundIndex</code></td><td>用于指定复合索引。</td></tr><tr><td><code>@Transient</code></td><td>用于将某些字段排除，不与数据库匹配。</td></tr><tr><td><code>@Version</code></td><td>用于指定字段的版本，默认值为 0，在每次更新字段后自增。</td></tr></tbody></table><p>复合索引用例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Document</span></span><br><span class="line"><span class="meta">@CompoundIndexes</span>(&#123;</span><br><span class="line">    <span class="comment">// lastName 升序，age 降序的复合索引，名称为 age_idx。</span></span><br><span class="line">    <span class="meta">@CompoundIndex</span>(name = <span class="string">"age_idx"</span>, def = <span class="string">"&#123;'lastName': 1, 'age': -1&#125;"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Address</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="支持的查询方法关键字列表"><a href="#支持的查询方法关键字列表" class="headerlink" title="支持的查询方法关键字列表"></a>支持的查询方法关键字列表</h3><table><thead><tr><th>Keyword</th><th>Sample</th><th>Logical result</th></tr></thead><tbody><tr><td><code>After</code></td><td><code>findByBirthdateAfter(Date date)</code></td><td><code>{&quot;birthdate&quot; : {&quot;$gt&quot; : date}}</code></td></tr><tr><td><code>GreaterThan</code></td><td><code>findByAgeGreaterThan(int age)</code></td><td><code>{&quot;age&quot; : {&quot;$gt&quot; : age}}</code></td></tr><tr><td><code>GreaterThanEqual</code></td><td><code>findByAgeGreaterThanEqual(int age)</code></td><td><code>{&quot;age&quot; : {&quot;$gte&quot; : age}}</code></td></tr><tr><td><code>Before</code></td><td><code>findByBirthdateBefore(Date date)</code></td><td><code>{&quot;birthdate&quot; : {&quot;$lt&quot; : date}}</code></td></tr><tr><td><code>LessThan</code></td><td><code>findByAgeLessThan(int age)</code></td><td><code>{&quot;age&quot; : {&quot;$lt&quot; : age}}</code></td></tr><tr><td><code>LessThanEqual</code></td><td><code>findByAgeLessThanEqual(int age)</code></td><td><code>{&quot;age&quot; : {&quot;$lte&quot; : age}}</code></td></tr><tr><td><code>Between</code></td><td><code>findByAgeBetween(int from, int to)</code></td><td><code>{&quot;age&quot; : {&quot;$gt&quot; : from, &quot;$lt&quot; : to}}</code></td></tr><tr><td><code>In</code></td><td><code>findByAgeIn(Collection ages)</code></td><td><code>{&quot;age&quot; : {&quot;$in&quot; : [ages…]}}</code></td></tr><tr><td><code>NotIn</code></td><td><code>findByAgeNotIn(Collection ages)</code></td><td><code>{&quot;age&quot; : {&quot;$nin&quot; : [ages…]}}</code></td></tr><tr><td><code>IsNotNull</code>, <code>NotNull</code></td><td><code>findByFirstnameNotNull()</code></td><td><code>{&quot;firstname&quot; : {&quot;$ne&quot; : null}}</code></td></tr><tr><td><code>IsNull</code>, <code>Null</code></td><td><code>findByFirstnameNull()</code></td><td><code>{&quot;firstname&quot; : null}</code></td></tr><tr><td><code>Like</code>, <code>StartingWith</code>, <code>EndingWith</code></td><td><code>findByFirstnameLike(String name)</code></td><td><code>{&quot;firstname&quot; : name} (name as regex)</code></td></tr><tr><td><code>NotLike</code>, <code>IsNotLike</code></td><td><code>findByFirstnameNotLike(String name)</code></td><td><code>{&quot;firstname&quot; : { &quot;$not&quot; : name }} (name as regex)</code></td></tr><tr><td><code>Containing</code> on String</td><td><code>findByFirstnameContaining(String name)</code></td><td><code>{&quot;firstname&quot; : name} (name as regex)</code></td></tr><tr><td><code>NotContaining</code> on String</td><td><code>findByFirstnameNotContaining(String name)</code></td><td><code>{&quot;firstname&quot; : { &quot;$not&quot; : name}} (name as regex)</code></td></tr><tr><td><code>Containing</code> on Collection</td><td><code>findByAddressesContaining(Address address)</code></td><td><code>{&quot;addresses&quot; : { &quot;$in&quot; : address}}</code></td></tr><tr><td><code>NotContaining</code> on Collection</td><td><code>findByAddressesNotContaining(Address address)</code></td><td><code>{&quot;addresses&quot; : { &quot;$not&quot; : { &quot;$in&quot; : address}}}</code></td></tr><tr><td><code>Regex</code></td><td><code>findByFirstnameRegex(String firstname)</code></td><td><code>{&quot;firstname&quot; : {&quot;$regex&quot; : firstname }}</code></td></tr><tr><td><code>(No keyword)</code></td><td><code>findByFirstname(String name)</code></td><td><code>{&quot;firstname&quot; : name}</code></td></tr><tr><td><code>Not</code></td><td><code>findByFirstnameNot(String name)</code></td><td><code>{&quot;firstname&quot; : {&quot;$ne&quot; : name}}</code></td></tr><tr><td><code>Near</code></td><td><code>findByLocationNear(Point point)</code></td><td><code>{&quot;location&quot; : {&quot;$near&quot; : [x,y]}}</code></td></tr><tr><td><code>Near</code></td><td><code>findByLocationNear(Point point, Distance max)</code></td><td><code>{&quot;location&quot; : {&quot;$near&quot; : [x,y], &quot;$maxDistance&quot; : max}}</code></td></tr><tr><td><code>Near</code></td><td><code>findByLocationNear(Point point, Distance min, Distance max)</code></td><td><code>{&quot;location&quot; : {&quot;$near&quot; : [x,y], &quot;$minDistance&quot; : min, &quot;$maxDistance&quot; : max}}</code></td></tr><tr><td><code>Within</code></td><td><code>findByLocationWithin(Circle circle)</code></td><td><code>{&quot;location&quot; : {&quot;$geoWithin&quot; : {&quot;$center&quot; : [ [x, y], distance]}}}</code></td></tr><tr><td><code>Within</code></td><td><code>findByLocationWithin(Box box)</code></td><td><code>{&quot;location&quot; : {&quot;$geoWithin&quot; : {&quot;$box&quot; : [ [x1, y1], x2, y2]}}}</code></td></tr><tr><td><code>IsTrue</code>, <code>True</code></td><td><code>findByActiveIsTrue()</code></td><td><code>{&quot;active&quot; : true}</code></td></tr><tr><td><code>IsFalse</code>, <code>False</code></td><td><code>findByActiveIsFalse()</code></td><td><code>{&quot;active&quot; : false}</code></td></tr><tr><td><code>Exists</code></td><td><code>findByLocationExists(boolean exists)</code></td><td><code>{&quot;location&quot; : {&quot;$exists&quot; : exists }}</code></td></tr></tbody></table><blockquote><p>Tip：将以上的 <code>findBy</code> 替换成 <code>deleteBy</code> 含义就变成了：查找后进行删除操作。</p></blockquote><p>下面是一个使用示例：查询指定状态集合的 JobFlow。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方式一：使用 SqEL(Spring 表达式)</span></span><br><span class="line"><span class="meta">@Query</span>(<span class="string">"&#123; 'status': &#123; $in: ?0 &#125; &#125;"</span>)</span><br><span class="line"><span class="function">List&lt;JobFlow&gt; <span class="title">findByStatus</span><span class="params">(String... status)</span></span>;</span><br><span class="line"><span class="comment">// 方式二：使用 In</span></span><br><span class="line"><span class="function">List&lt;JobFlow&gt; <span class="title">findByStatusIn</span><span class="params">(List&lt;String&gt; statusList)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://docs.spring.io/spring-data/mongodb/docs/current/reference/html/#repositories.create-instances.spring" target="_blank" rel="noopener">Spring Data MongoDB - Reference Documentation - spring.io</a></li><li><a href="https://spring.io/guides/gs/accessing-data-mongodb/" target="_blank" rel="noopener">Accessing Data with MongoDB - spring.io</a></li><li><a href="https://docs.spring.io/spring-data/data-commons/docs/1.6.1.RELEASE/reference/html/repositories.html" target="_blank" rel="noopener">Working with Spring Data Repositories - spring.io</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;用途&quot;&gt;&lt;a href=&quot;#用途&quot; class=&quot;headerlink&quot; title=&quot;用途&quot;&gt;&lt;/a&gt;用途&lt;/h2&gt;&lt;p&gt;快速集成 MongoDB，不用写一行 MongoDB 的 CRUD 语句。而是使用 Spring Data 独有的方法命名方式定义数据库操作
      
    
    </summary>
    
      <category term="it" scheme="https://linlshare.github.io/categories/it/"/>
    
      <category term="java" scheme="https://linlshare.github.io/categories/it/java/"/>
    
      <category term="persistence" scheme="https://linlshare.github.io/categories/it/java/persistence/"/>
    
    
      <category term="Java" scheme="https://linlshare.github.io/tags/Java/"/>
    
      <category term="Spring" scheme="https://linlshare.github.io/tags/Spring/"/>
    
      <category term="MongoDB" scheme="https://linlshare.github.io/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>澳門編年史 - 二十世紀(1900-1949)</title>
    <link href="https://linlshare.github.io/2018/12/04/history/%E6%BE%B3%E9%96%80%E7%B7%A8%E5%B9%B4%E5%8F%B2%20-%20%E4%BA%8C%E5%8D%81%E4%B8%96%E7%B4%80(1900-1949)%20/"/>
    <id>https://linlshare.github.io/2018/12/04/history/澳門編年史 - 二十世紀(1900-1949) /</id>
    <published>2018-12-04T15:21:55.000Z</published>
    <updated>2018-12-07T15:21:54.009Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th>KEY</th><th>VALUE</th></tr></thead><tbody><tr><td>作者/編者</td><td>施白蒂著、金國平譯</td></tr><tr><td>出版日期</td><td>01/04/1999</td></tr><tr><td>頁數</td><td>368</td></tr></tbody></table><p><a href="https://www.macaudata.com/macaudata/books/showBooks?books.bId=344" target="_blank" rel="noopener">在線閱讀</a></p><blockquote><p>1900～1901年 在義和拳起義期間，當時有“老佛爺”之稱的慈禧太后一露 猙獰面目。她運用手腕，再次出掌大權，充當反對革新精神、洋人的急先鋒。爲此，她煽動民衆助其一臂之力。她 勒令各省成立團練，其中存在大量本來在中華大地叢生 的秘密社團。最著名的爲義和拳。外人稱之爲Boxer，因 爲其徒眾常在集市上耍拳買藝。中國上下掀起了一場驅 逐洋人的如聖戰般的群眾運動。慈禧太后欲將外人斬盡 殺絕，爲此她懸賞割取在京洋人的首級。外人退集東交民巷，以眞絲做土袋，壘築工事。在中華大地逐殺歐洲人的 血雨腥風中，他們渡過了難以言狀的痛苦。正當糧盡彈絕之際，獲聯軍援救。聯軍失去了軍紀，闖入京城，不分靑紅 皂白一通燒殺劫掠，許多價値連城的宮殿化爲灰燼。慈禧 太后扮作民女出逃熱河。中國忍辱賠償6750萬英鎊。賠 款利息以海關收入作爲抵押。但美國將其應得部份用來 以新的敎育方式培養中國靑年。因此，不具備漢唐和睦精 神、遠大目光的滿淸，在出現嚴重的外來危險時，不知所 措，將國家帶入內戰與無政府的狀況。在義和拳運動中，5 位主敎遇難，40名傳敎上（12名屬天主教，餘爲新敎敎士） 及18000敎徒（其中包括53個兒童）喪生。</p></blockquote><p>慈禧無才無德，坐上了大位，只會瞎搞，挑動暴民，引火自焚。聯軍也並非文明之師，火燒圓明園之恥永記！</p><blockquote><p>1945年（8月6日）長崎這一葡萄牙人建立的城市遭受原子彈襲 擊。</p></blockquote><p>維基百科：長崎的歷史開始於1570年（元龜元年）吉利支丹大名大村純忠將長崎浦開放給葡萄牙人作為貿易港。所以這裡說長崎是葡萄牙人建立的城市。</p><blockquote><p>1945 （9月2日）於停泊於東京灣中的“密蘇里”航空母艦上簽 署日本正式投降書。第二次世界大戰結束。不包括死於 大屠殺的5百萬猶太人在內，該戰爭共造成5千5百萬人死亡，其中3千萬爲平民。</p></blockquote><p>希望和平，因為戰爭中死傷最多的永遠都是平民。</p><blockquote><p>1945年（12月4日）經過4個月的追剿後，活動於澳門、香港及二 地之間島嶼的最後海盜之一王孔祺（音譯：Wong Kong Kit）被捕並被處以極刑。此人非戰爭罪犯，而是一殺人魔 王、十足的舊式海盜。</p></blockquote><p>文明國家不允許海盜存在，但罪惡仍在滋生，只是換了一種身份而已。</p><blockquote><p>1948年（1月30日）甘地（Mohadas Gandhi）遇刺 （參見1915年 條），這一偉人的消失在全世界引起反響。</p></blockquote><p>默哀。</p><blockquote><p>1949年（10月1日）在毛澤東取得戰勝蔣介石（在美國的援助下 撤退臺灣）的國民黨的勝利後，成立中華人民共和國。中 國共產黨的歷史領袖毛澤東在北京天安門廣場宣告中華 人民共和國的誕生。新中國政府成立時，身兼外交部部長 的周恩來總理明確宣佈中國政府願在平等、互相尊重的基 礎上與所有國家（臺北除外）政府建立外交關係。共產黨 掌權。文化革命開始（譯注：原文如此）。柵欄墓地被宣佈 爲文物保護單位。</p></blockquote><p>中國終於結束了內戰，但另一場革命又即將來襲。</p><p>柵欄墓地，即是滕公柵欄，位於北京市西城區車公莊大街6號中共北京市委黨校（北京行政學院）院內，是明朝至中華民國時期的天主教墓地，安葬了許多來華西方天主教傳教士及其他天主教教士、教民。現僅存利瑪竇墓等一小部分。</p><blockquote><p>1949年 在此之前，中國擁有21個少數民族。40年後昇至55個。 其中僅有回族和滿族使用漢語。50% 少數民族聚居雲南 （參見《中國少數民族服飾展》目錄，市政廳—賈梅士博物 館，澳門1988年）。根據最新人口普查，漢族佔絕大多數 （10億4千2百萬），而55個少數民族總數爲9千1百20 萬（8%）（參見安東尼奧•卡爾莫，前引書）。澳門包括在此 數字之內。鑒於社會、文化及宗敎影響範圍從未受到國界 的限制，澳門爲在此交匯融合的各種思潮的自然延伸，有 必要在本編年史中對上述數字加以引用。</p></blockquote><p>少數民族的確定有利於民族政策的制定和實施。50%的少數民族聚居雲南這點令人吃驚，這個比例是應該是民族個數佔比而不是種族人數佔比。</p><blockquote><p>1949年    荷蘭承認印度尼西亞獨立。蘇加諾總統於1955年提議召 開萬隆會議。23個亞洲國家及6個非洲國家應邀出席， 仍在歐洲統治下的地區亦有代表參加。它的主題是“讓我 們迎接一個新亞洲及一個新非洲的誕生”，要求結束歐洲 人最後的帝國。荷蘭人撤離印度尼西亞。</p></blockquote><p>原來印尼是1949年萬隆會議后獨立的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;KEY&lt;/th&gt;
&lt;th&gt;VALUE&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;作者/編者&lt;/td&gt;
&lt;td&gt;施白蒂著、金國平譯&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;出版日期&lt;/td&gt;
&lt;td&gt;
      
    
    </summary>
    
      <category term="history" scheme="https://linlshare.github.io/categories/history/"/>
    
    
      <category term="History" scheme="https://linlshare.github.io/tags/History/"/>
    
      <category term="澳門" scheme="https://linlshare.github.io/tags/%E6%BE%B3%E9%96%80/"/>
    
  </entry>
  
  <entry>
    <title>Alfred</title>
    <link href="https://linlshare.github.io/2018/12/04/it/tool/Alfred/"/>
    <id>https://linlshare.github.io/2018/12/04/it/tool/Alfred/</id>
    <published>2018-12-04T12:17:22.000Z</published>
    <updated>2018-12-04T12:27:08.247Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实用的-Alfred-Workflow"><a href="#实用的-Alfred-Workflow" class="headerlink" title="实用的 Alfred Workflow"></a>实用的 Alfred Workflow</h2><table><thead><tr><th>Alfred Workflow</th><th>介绍</th></tr></thead><tbody><tr><td><a href="https://github.com/willfarrell/alfred-pkgman-workflow" target="_blank" rel="noopener">alfred-pkgman-workflow</a></td><td>快速从各个软件仓库(maven, gradle 等等)中查找需要的软件包</td></tr><tr><td><a href="https://github.com/LinLshare/AlfredHanziSourceWorkflow" target="_blank" rel="noopener">AlfredHanziSourceWorkflow</a></td><td>快速从象形字典、汉语字典、说文解字等站点查询字源</td></tr><tr><td><a href="https://github.com/LinLshare/AlfredGoogleTranslateWorkflow" target="_blank" rel="noopener">AlfredGoogleTranslateWorkflow</a></td><td>快速进行多语言翻译</td></tr><tr><td><a href="https://github.com/bchatard/jetbrains-alfred-workflow" target="_blank" rel="noopener"> jetbrains-alfred-workflow</a></td><td>快速打开 JetBrains 家族构建的项目，包括 Android Studio、IDEA 等的项目</td></tr><tr><td><a href="noogel/Alfred-Workflow">noogel/Alfred-Workflow</a></td><td>开发工程师常用工具箱，包括查询 IP、时间戳转换和 Base64编码之类的工具</td></tr></tbody></table><h2 id="小知识"><a href="#小知识" class="headerlink" title="小知识"></a>小知识</h2><ol><li>当 alfred 查询的结果是一个网页链接时，点击<strong>右边的 Shift 键</strong>可以启动快速预览而不用打开网页。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;实用的-Alfred-Workflow&quot;&gt;&lt;a href=&quot;#实用的-Alfred-Workflow&quot; class=&quot;headerlink&quot; title=&quot;实用的 Alfred Workflow&quot;&gt;&lt;/a&gt;实用的 Alfred Workflow&lt;/h2&gt;&lt;tabl
      
    
    </summary>
    
      <category term="it" scheme="https://linlshare.github.io/categories/it/"/>
    
      <category term="tool" scheme="https://linlshare.github.io/categories/it/tool/"/>
    
    
      <category term="Alfred" scheme="https://linlshare.github.io/tags/Alfred/"/>
    
  </entry>
  
  <entry>
    <title>Spring Data JPA</title>
    <link href="https://linlshare.github.io/2018/12/04/it/java/persistence/Spring%20Data%20JPA/"/>
    <id>https://linlshare.github.io/2018/12/04/it/java/persistence/Spring Data JPA/</id>
    <published>2018-12-04T10:02:06.000Z</published>
    <updated>2018-12-04T11:17:03.102Z</updated>
    
    <content type="html"><![CDATA[<h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ol><li>支持自由替换 Hibernate, EclipseLink, OpenJpa。</li></ol><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="依赖引入"><a href="#依赖引入" class="headerlink" title="依赖引入"></a>依赖引入</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">  repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">  &#125;</span><br><span class="line">  dependencies &#123;</span><br><span class="line">    classpath(<span class="string">"org.springframework.boot:spring-boot-gradle-plugin:2.0.5.RELEASE"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'java'</span></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'org.springframework.boot'</span></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'io.spring.dependency-management'</span></span><br><span class="line"></span><br><span class="line">sourceCompatibility = <span class="number">1.8</span></span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">  compile(<span class="string">"org.springframework.boot:spring-boot-starter-data-jpa"</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;用途&quot;&gt;&lt;a href=&quot;#用途&quot; class=&quot;headerlink&quot; title=&quot;用途&quot;&gt;&lt;/a&gt;用途&lt;/h2&gt;&lt;h3 id=&quot;特性&quot;&gt;&lt;a href=&quot;#特性&quot; class=&quot;headerlink&quot; title=&quot;特性&quot;&gt;&lt;/a&gt;特性&lt;/h3&gt;&lt;ol&gt;
&lt;
      
    
    </summary>
    
      <category term="it" scheme="https://linlshare.github.io/categories/it/"/>
    
      <category term="java" scheme="https://linlshare.github.io/categories/it/java/"/>
    
      <category term="persistence" scheme="https://linlshare.github.io/categories/it/java/persistence/"/>
    
    
      <category term="Java" scheme="https://linlshare.github.io/tags/Java/"/>
    
      <category term="Spring" scheme="https://linlshare.github.io/tags/Spring/"/>
    
      <category term="JPA" scheme="https://linlshare.github.io/tags/JPA/"/>
    
  </entry>
  
  <entry>
    <title>JDBC</title>
    <link href="https://linlshare.github.io/2018/12/04/it/java/persistence/JDBC/"/>
    <id>https://linlshare.github.io/2018/12/04/it/java/persistence/JDBC/</id>
    <published>2018-12-04T07:51:06.000Z</published>
    <updated>2018-12-04T10:00:15.286Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JDBC-是干什么的？"><a href="#JDBC-是干什么的？" class="headerlink" title="JDBC 是干什么的？"></a>JDBC 是干什么的？</h2><p>是 Java 语言中用来规范客户端程序如何来访问数据库的应用程序接口，提供了诸如<strong>查询和更新</strong>数据库中数据的方法。JDBC 是面向<strong>关系型数据库</strong>的。</p><h3 id="JPA-与-JDBC-的异同？"><a href="#JPA-与-JDBC-的异同？" class="headerlink" title="JPA 与 JDBC 的异同？"></a>JPA 与 JDBC 的异同？</h3><p><strong>（1）相同点</strong></p><ul><li>都是面向关系型数据库的；</li><li>都具备查询保存数据的能力。</li></ul><p><strong>（2）不同点</strong></p><ul><li>JPA 是 Java 持久化 API 的规范，关注将数据库中的表与实体类做映射；</li><li>JDBC 是 Java 数据库访问的接口，将数据访问与具体的关系型数据库分离，使用驱动完成具体的数据操作。</li></ul><p>参看 <a href="https://stackoverflow.com/questions/11881548/jpa-or-jdbc-how-are-they-different" target="_blank" rel="noopener">JPA or JDBC, how are they different? - stackoverfow</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://zh.wikipedia.org/zh-cn/Java%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5" target="_blank" rel="noopener">Java 数据库连接 - 维基百科</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;JDBC-是干什么的？&quot;&gt;&lt;a href=&quot;#JDBC-是干什么的？&quot; class=&quot;headerlink&quot; title=&quot;JDBC 是干什么的？&quot;&gt;&lt;/a&gt;JDBC 是干什么的？&lt;/h2&gt;&lt;p&gt;是 Java 语言中用来规范客户端程序如何来访问数据库的应用程序接口
      
    
    </summary>
    
      <category term="it" scheme="https://linlshare.github.io/categories/it/"/>
    
      <category term="java" scheme="https://linlshare.github.io/categories/it/java/"/>
    
      <category term="persistence" scheme="https://linlshare.github.io/categories/it/java/persistence/"/>
    
    
      <category term="Java" scheme="https://linlshare.github.io/tags/Java/"/>
    
      <category term="JDBC" scheme="https://linlshare.github.io/tags/JDBC/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis</title>
    <link href="https://linlshare.github.io/2018/12/04/it/java/persistence/MyBatis/"/>
    <id>https://linlshare.github.io/2018/12/04/it/java/persistence/MyBatis/</id>
    <published>2018-12-04T07:51:06.000Z</published>
    <updated>2018-12-04T09:28:06.360Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MyBatis-是干嘛的？"><a href="#MyBatis-是干嘛的？" class="headerlink" title="MyBatis 是干嘛的？"></a>MyBatis 是干嘛的？</h2><p>MyBatis 是一个 SQL 映射框架，它通过 XML 描述符或者注解将对象与<strong>关系型数据库</strong>的存储过程或 SQL 语句关联起来。</p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><ol><li>支持声明式数据缓存；</li><li>提供基于 HashMap 的默认缓存实现；</li><li>提供 API 供其他缓存实现。</li></ol><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="单独使用"><a href="#单独使用" class="headerlink" title="单独使用"></a>单独使用</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="string">'org.mybatis:mybatis:3.4.6'</span></span><br></pre></td></tr></table></figure><p>如使用其他依赖引入方式，参看 <a href="https://search.maven.org/artifact/org.mybatis/mybatis/3.4.6/jar" target="_blank" rel="noopener">mybatis - maven.org</a>。</p><h3 id="集成使用"><a href="#集成使用" class="headerlink" title="集成使用"></a>集成使用</h3><ol><li>与 Spring Framework 集成</li><li>与 Google Guice 集成</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://zh.wikipedia.org/zh-cn/MyBatis" target="_blank" rel="noopener">MyBatis - 维基百科</a></li><li><a href="http://www.mybatis.org/mybatis-3/zh/" target="_blank" rel="noopener">mybatis-3 - mybatis.org</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;MyBatis-是干嘛的？&quot;&gt;&lt;a href=&quot;#MyBatis-是干嘛的？&quot; class=&quot;headerlink&quot; title=&quot;MyBatis 是干嘛的？&quot;&gt;&lt;/a&gt;MyBatis 是干嘛的？&lt;/h2&gt;&lt;p&gt;MyBatis 是一个 SQL 映射框架，它通过 X
      
    
    </summary>
    
      <category term="it" scheme="https://linlshare.github.io/categories/it/"/>
    
      <category term="java" scheme="https://linlshare.github.io/categories/it/java/"/>
    
      <category term="persistence" scheme="https://linlshare.github.io/categories/it/java/persistence/"/>
    
    
      <category term="Java" scheme="https://linlshare.github.io/tags/Java/"/>
    
      <category term="MyBatis" scheme="https://linlshare.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>JPA</title>
    <link href="https://linlshare.github.io/2018/12/04/it/java/persistence/JPA/"/>
    <id>https://linlshare.github.io/2018/12/04/it/java/persistence/JPA/</id>
    <published>2018-12-04T07:51:06.000Z</published>
    <updated>2018-12-04T11:19:45.453Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JPA-是干嘛的？"><a href="#JPA-是干嘛的？" class="headerlink" title="JPA 是干嘛的？"></a>JPA 是干嘛的？</h2><p>JPA（Java Persistence API，Java 持久化 API），是一组 ORM（Object Relational Mapping，对象关系映射）规范。所谓持久化，包含三层意思：</p><ol><li>API 本身，定义在 <code>javax.persistence</code> 包下；</li><li>JPQL（Java Persistence Query Language，Java 持久化查询语言）；</li><li>对象与关联表之间的元数据。</li></ol><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><table><thead><tr><th>项目</th><th>开发公司</th><th>数据库支持</th><th>备注</th></tr></thead><tbody><tr><td><a href="http://hibernate.org/" target="_blank" rel="noopener">Hibernate</a></td><td>RedHat</td><td>SQL</td><td>JPA 制定的参考。</td></tr><tr><td><a href="https://docs.spring.io/spring-data/jpa/docs/2.1.3.RELEASE/reference/html/" target="_blank" rel="noopener">Spring Data JPA</a></td><td>Pivotal</td><td>SQL</td><td>支持 RESTful API 查询，支持 CRUD</td></tr><tr><td><a href="https://www.eclipse.org/eclipselink/" target="_blank" rel="noopener">EclipseLink</a></td><td>Eclipse Foundation</td><td>SQL 及NoSQL</td><td>基于 TopLink</td></tr><tr><td><a href="https://openjpa.apache.org/" target="_blank" rel="noopener">OpenJPA</a></td><td>Apache</td><td>SQL</td><td>支持缓存。</td></tr></tbody></table><p>* 2001年，澳大利亚墨尔本一位名为Gavin King的27岁的程序员，上街买了一本SQL编程的书，他厌倦了实体bean，认为自己可以开发出一个匹配对象关系映射理论，并且真正好用的Java持久化层框架，因此他需要先学习一下SQL。这一年的11月，Hibernate的第一个版本发布了。</p><p>* Pivotal 和 VMware 都是 EMC 的子公司，2015 年 Dell 以 670 亿美元收购 EMC。 </p><p>* MyBatis 是一套持久化框架，但不是 ORM 的，而且 Java 方法与 SQL 语句的关联。</p><p>* OpenJPA 至今已有 4933 次 commit，更新也很频繁，但其 Github 上的 star 却只有 56，坚持不懈的精神令人肃然起敬。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://zh.wikipedia.org/zh-cn/Java%E6%8C%81%E4%B9%85%E5%8C%96API" target="_blank" rel="noopener">Java 持久化 API - 维基百科</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;JPA-是干嘛的？&quot;&gt;&lt;a href=&quot;#JPA-是干嘛的？&quot; class=&quot;headerlink&quot; title=&quot;JPA 是干嘛的？&quot;&gt;&lt;/a&gt;JPA 是干嘛的？&lt;/h2&gt;&lt;p&gt;JPA（Java Persistence API，Java 持久化 API），是一组
      
    
    </summary>
    
      <category term="it" scheme="https://linlshare.github.io/categories/it/"/>
    
      <category term="java" scheme="https://linlshare.github.io/categories/it/java/"/>
    
      <category term="persistence" scheme="https://linlshare.github.io/categories/it/java/persistence/"/>
    
    
      <category term="Java" scheme="https://linlshare.github.io/tags/Java/"/>
    
      <category term="JPA" scheme="https://linlshare.github.io/tags/JPA/"/>
    
  </entry>
  
  <entry>
    <title>Groovy</title>
    <link href="https://linlshare.github.io/2018/12/03/it/tool/Groovy/"/>
    <id>https://linlshare.github.io/2018/12/03/it/tool/Groovy/</id>
    <published>2018-12-03T03:09:17.000Z</published>
    <updated>2018-12-07T04:13:59.020Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><h3 id="Gradle-中的-ext-究竟是什么？"><a href="#Gradle-中的-ext-究竟是什么？" class="headerlink" title="Gradle 中的 ext 究竟是什么？"></a>Gradle 中的 ext 究竟是什么？</h3><p>gradle 中我们使用 <code>ext</code> 定义额外的各种属性，可是 <code>ext</code> 究竟是什么呢？</p><p>参看 <a href="https://docs.gradle.org/current/dsl/org.gradle.api.plugins.ExtraPropertiesExtension.html" target="_blank" rel="noopener">ExtraPropertiesExtension - Gradle DSL</a>，发现 <code>ext</code> 不是 Groovy 固有的定义，而是领域特定的语言（DSL）。使用方式是：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以下的 project 常常被省略</span></span><br><span class="line">project.ext &#123; foo = <span class="string">"bar"</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> project.ext.get(<span class="string">"foo"</span>) == <span class="string">"bar"</span></span><br><span class="line"><span class="keyword">assert</span> project.ext.foo == <span class="string">"bar"</span></span><br><span class="line"><span class="keyword">assert</span> project.ext[<span class="string">"foo"</span>] == <span class="string">"bar"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> project.foo == <span class="string">"bar"</span></span><br><span class="line"><span class="keyword">assert</span> project[<span class="string">"foo"</span>] == <span class="string">"bar"</span></span><br></pre></td></tr></table></figure><p><code>ext</code> 实质上是一个内置的简单对象，但可以动态添加新属性，这个对象叫 <code>ExtraPropertiesExtension</code>，它内置在所有 <code>ExtensionAware</code> 中，<code>ExtenstionAware</code> 的已知子类有 <code>Project</code>、<code>Settings</code>、<code>Task</code> 、<code>SourceSet</code>，所以在这些类中可以直接使用所谓的 <code>namespace method</code> 动态新增新属性。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Extensions are just plain objects, there is no interface/type</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyExtension</span> &#123;</span></span><br><span class="line">  String foo</span><br><span class="line"></span><br><span class="line">  MyExtension(String foo) &#123;</span><br><span class="line">    <span class="keyword">this</span>.foo = foo</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add new extensions via the extension container</span></span><br><span class="line">project.extensions.create(<span class="string">'custom'</span>, MyExtension, <span class="string">"bar"</span>)</span><br><span class="line"><span class="comment">//                       («name»,   «type»,       «constructor args», …)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// extensions appear as properties on the target object by the given name</span></span><br><span class="line"><span class="keyword">assert</span> project.custom <span class="keyword">instanceof</span> MyExtension</span><br><span class="line"><span class="keyword">assert</span> project.custom.foo == <span class="string">"bar"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// also via a namespace method</span></span><br><span class="line">project.custom &#123;</span><br><span class="line">  <span class="keyword">assert</span> foo == <span class="string">"bar"</span></span><br><span class="line">  foo = <span class="string">"other"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">assert</span> project.custom.foo == <span class="string">"other"</span></span><br></pre></td></tr></table></figure><h3 id="Gradle-依赖排除"><a href="#Gradle-依赖排除" class="headerlink" title="Gradle 依赖排除"></a>Gradle 依赖排除</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">compile(<span class="string">'com.zhyea:ar4j:1.0'</span>) &#123;</span><br><span class="line"><span class="comment">//excluding a particular transitive dependency:</span></span><br><span class="line">exclude <span class="string">module:</span> <span class="string">'cglib'</span> <span class="comment">//by artifact name</span></span><br><span class="line">exclude <span class="string">group:</span> <span class="string">'org.jmock'</span> <span class="comment">//by group</span></span><br><span class="line">exclude <span class="string">group:</span> <span class="string">'org.unwanted'</span>, <span class="string">module:</span> <span class="string">'iAmBuggy'</span> <span class="comment">//by both name and group</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="http://www.zhyea.com/2018/02/08/gradle-exclude-dependencies.html" target="_blank" rel="noopener">Gradle 依赖排除</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Q-amp-A&quot;&gt;&lt;a href=&quot;#Q-amp-A&quot; class=&quot;headerlink&quot; title=&quot;Q&amp;amp;A&quot;&gt;&lt;/a&gt;Q&amp;amp;A&lt;/h2&gt;&lt;h3 id=&quot;Gradle-中的-ext-究竟是什么？&quot;&gt;&lt;a href=&quot;#Gradle-中的-ext
      
    
    </summary>
    
      <category term="it" scheme="https://linlshare.github.io/categories/it/"/>
    
      <category term="tool" scheme="https://linlshare.github.io/categories/it/tool/"/>
    
    
      <category term="Groovy" scheme="https://linlshare.github.io/tags/Groovy/"/>
    
  </entry>
  
  <entry>
    <title>Quartz</title>
    <link href="https://linlshare.github.io/2018/12/03/it/java/schedule/Quartz/"/>
    <id>https://linlshare.github.io/2018/12/03/it/java/schedule/Quartz/</id>
    <published>2018-12-03T02:49:29.000Z</published>
    <updated>2018-12-11T09:30:54.955Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Quartz-是什么？"><a href="#Quartz-是什么？" class="headerlink" title="Quartz 是什么？"></a>Quartz 是什么？</h2><p><a href="https://github.com/quartz-scheduler/quartz" target="_blank" rel="noopener">Quartz</a> 是一款 Java 平台上开源的任务调度器。</p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="（1）引入依赖"><a href="#（1）引入依赖" class="headerlink" title="（1）引入依赖"></a>（1）引入依赖</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="string">"org.quartz-scheduler:quartz:2.3.0"</span></span><br><span class="line">compile <span class="string">"org.quartz-scheduler:quartz-jobs:2.3.0"</span></span><br></pre></td></tr></table></figure><h3 id="（2）初始化"><a href="#（2）初始化" class="headerlink" title="（2）初始化"></a>（2）初始化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从工厂中获取 Scheduler 对象</span></span><br><span class="line">Scheduler scheduler = StdSchedulerFactory.getDefaultScheduler();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动</span></span><br><span class="line">scheduler.start();</span><br></pre></td></tr></table></figure><h3 id="（3）新建一个-Job"><a href="#（3）新建一个-Job" class="headerlink" title="（3）新建一个 Job"></a>（3）新建一个 Job</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJob</span> <span class="keyword">implements</span> <span class="title">Job</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(JobExecutionContext context)</span> <span class="keyword">throws</span> JobExecutionException </span>&#123;</span><br><span class="line">    System.err.println(<span class="string">"Hello World!  TestJob is executing."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（4）调度一个-Job"><a href="#（4）调度一个-Job" class="headerlink" title="（4）调度一个 Job"></a>（4）调度一个 Job</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加 Job 的携带数据</span></span><br><span class="line">JobDetail job = newJob(TestJob.class).withIdentity(<span class="string">"job1"</span>, <span class="string">"group1"</span>).build();</span><br><span class="line"><span class="comment">// 新建一个触发器</span></span><br><span class="line">Trigger trigger = newTrigger().withIdentity(<span class="string">"trigger1"</span>, <span class="string">"group1"</span>)</span><br><span class="line">    .startNow()</span><br><span class="line">    .withSchedule(simpleSchedule().withIntervalInSeconds(<span class="number">5</span>)</span><br><span class="line">                  .repeatForever())</span><br><span class="line">    .build();</span><br><span class="line"><span class="comment">// 开始调度</span></span><br><span class="line">scheduler.scheduleJob(job, trigger);</span><br></pre></td></tr></table></figure><h2 id="CronTrigger"><a href="#CronTrigger" class="headerlink" title="CronTrigger"></a>CronTrigger</h2><p>Quartz 的 Cron 表达式不同于 Linux 系统上使用的 Cron 表达式。区别如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> Linux</span><br><span class="line">minute   hour   day   month   week</span><br><span class="line"><span class="meta">#</span> Quartz</span><br><span class="line">secondminute   hour   day   month   weekyear(optional field)</span><br></pre></td></tr></table></figure><p>是的，Quartz 扩充了 second 和 year，这是要特别注意的。</p><p>关于 Quartz Cron 表达式每个字段的取值，整理如下：</p><ul><li>second：[0, 59]。</li><li>minute： [0, 59]。</li><li>hour：[0, 23]。</li><li>day：一个月中的第几天，取值 [1, 31]，注意不同月份有不同的上限值。</li><li>month：[0, 11]，注意这跟 Linux 的有差异。还可取 [JAN, FEB, MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV, DEC]</li><li>week：星期几，取值 [1, 7]，其中 1 代表星期日。还可取 [SUN, MON, TUE, WED, THU, FRI, SAT]</li></ul><p>字段中使用的特殊字符跟 Linux 无异，如下：</p><ul><li>星号（*）：代表所有可能的值，例如month字段如果是星号，则表示在满足其它字段的制约条件后每月都执行该命令操作。</li><li>逗号（,）：可以用逗号隔开的值指定一个列表范围，例如，“1,2,5,7,8,9”</li><li>中杠（-）：可以用整数之间的中杠表示一个整数范围，例如“2-6”表示“2,3,4,5,6”</li><li>正斜线（/）：可以用正斜线指定时间的间隔频率，例如“0-23/2”表示每两小时执行一次。同时正斜线可以和星号一起使用，例如*/10，如果用在minute字段，表示每十分钟执行一次。</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="http://www.quartz-scheduler.org/documentation/quartz-2.2.x/quick-start.html" target="_blank" rel="noopener">quartz-2.2.x/quick-start</a></li><li><a href="http://www.quartz-scheduler.org/documentation/quartz-2.2.x/tutorials/tutorial-lesson-06.html" target="_blank" rel="noopener">Lesson 6: CronTrigger - Quartz Tutorials</a></li><li><a href="https://www.cnblogs.com/peida/archive/2013/01/08/2850483.html" target="_blank" rel="noopener">每天一个linux命令（50）：crontab命令</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Quartz-是什么？&quot;&gt;&lt;a href=&quot;#Quartz-是什么？&quot; class=&quot;headerlink&quot; title=&quot;Quartz 是什么？&quot;&gt;&lt;/a&gt;Quartz 是什么？&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/quartz
      
    
    </summary>
    
      <category term="it" scheme="https://linlshare.github.io/categories/it/"/>
    
      <category term="java" scheme="https://linlshare.github.io/categories/it/java/"/>
    
      <category term="schedule" scheme="https://linlshare.github.io/categories/it/java/schedule/"/>
    
    
      <category term="Quartz" scheme="https://linlshare.github.io/tags/Quartz/"/>
    
  </entry>
  
  <entry>
    <title>CompletableFuture</title>
    <link href="https://linlshare.github.io/2018/12/03/it/java/schedule/CompletableFuture/"/>
    <id>https://linlshare.github.io/2018/12/03/it/java/schedule/CompletableFuture/</id>
    <published>2018-12-03T02:49:29.000Z</published>
    <updated>2018-12-03T02:49:59.457Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="it" scheme="https://linlshare.github.io/categories/it/"/>
    
      <category term="java" scheme="https://linlshare.github.io/categories/it/java/"/>
    
      <category term="schedule" scheme="https://linlshare.github.io/categories/it/java/schedule/"/>
    
    
      <category term="CompletableFuture" scheme="https://linlshare.github.io/tags/CompletableFuture/"/>
    
  </entry>
  
  <entry>
    <title>ZooKeeper</title>
    <link href="https://linlshare.github.io/2018/11/29/it/java/base/ZooKeeper/"/>
    <id>https://linlshare.github.io/2018/11/29/it/java/base/ZooKeeper/</id>
    <published>2018-11-29T04:10:22.000Z</published>
    <updated>2018-11-29T04:10:26.666Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="it" scheme="https://linlshare.github.io/categories/it/"/>
    
      <category term="java" scheme="https://linlshare.github.io/categories/it/java/"/>
    
      <category term="base" scheme="https://linlshare.github.io/categories/it/java/base/"/>
    
    
      <category term="IT" scheme="https://linlshare.github.io/tags/IT/"/>
    
      <category term="ZooKeeper" scheme="https://linlshare.github.io/tags/ZooKeeper/"/>
    
  </entry>
  
  <entry>
    <title>服务发现</title>
    <link href="https://linlshare.github.io/2018/11/28/it/concept/%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0/"/>
    <id>https://linlshare.github.io/2018/11/28/it/concept/服务发现/</id>
    <published>2018-11-28T14:29:25.000Z</published>
    <updated>2018-11-28T15:12:30.622Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是服务发现？"><a href="#什么是服务发现？" class="headerlink" title="什么是服务发现？"></a>什么是服务发现？</h2><p>服务发现，Service Discovery，是<strong>一项提供服务发布和查找的服务</strong>，其实质就是<strong>键值存储</strong>，通过键（Key，在当前语境应是服务名）找到值（Value，在当前语境是服务）。DNS 就是一个简单的例子，人们或其他服务使用域名向 DNS 请求 IP 地址，Key 就是域名，Value 就是 IP 地址。</p><p>服务发现是支持大规模 SOA（service-oriented architecture）的核心服务，需具备以下关键特性：</p><ol><li>注册（Registration），新增服务到服务列表；</li><li>目录（Directory），即服务列表；</li><li>查找（Lookup），通过服务名找到服务。</li></ol><p>服务元数据（metadata，包括服务的 IP、端口、提供的服务等等信息）存储是服务发现的关键。</p><p>服务发现还需<strong>提供查询所有服务的部署状态和集中控制所有服务实例的方式</strong>。</p><h2 id="服务发现解决方案"><a href="#服务发现解决方案" class="headerlink" title="服务发现解决方案"></a>服务发现解决方案</h2><table><thead><tr><th>解决方案</th><th>特性</th><th>发起人</th></tr></thead><tbody><tr><td>Redis</td><td>用 Redis 作为服务中介是最简单的，但不适用于分布式系统，不具备下面的解决方案的优点</td><td>无</td></tr><tr><td>ZooKeeper</td><td>提供了包括配置管理、领导人选举和分布式锁在内的完整解决方案</td><td>Apache</td></tr><tr><td>etcd</td><td>与 ZooKeeper 具有相似的架构和功能</td><td>CoreOS</td></tr><tr><td>doozerd</td><td>与 ZooKeeper 具有相似的架构和功能</td><td>Blake Mizerany &amp; Keith Rarick</td></tr><tr><td>Consul</td><td>提供了 DNS 和 HTTP 两种 API</td><td>Hashicorp</td></tr><tr><td>Eureka</td><td>在出现网络分区时， Eureka 选择可用性，而不是一致性，适合 AP( Availability and Partition ) 系统。</td><td>Netflix</td></tr></tbody></table><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="http://dockone.io/article/509" target="_blank" rel="noopener">六个问题带你了解服务发现 - dockone.io</a></li><li><a href="https://highops.com/insights/service-discovery-6-questions-to-4-experts/" target="_blank" rel="noopener">Service Discovery: 6 questions to 4 experts - highops.com</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是服务发现？&quot;&gt;&lt;a href=&quot;#什么是服务发现？&quot; class=&quot;headerlink&quot; title=&quot;什么是服务发现？&quot;&gt;&lt;/a&gt;什么是服务发现？&lt;/h2&gt;&lt;p&gt;服务发现，Service Discovery，是&lt;strong&gt;一项提供服务发布和查找的服务
      
    
    </summary>
    
      <category term="it" scheme="https://linlshare.github.io/categories/it/"/>
    
      <category term="concept" scheme="https://linlshare.github.io/categories/it/concept/"/>
    
    
      <category term="IT" scheme="https://linlshare.github.io/tags/IT/"/>
    
      <category term="服务发现" scheme="https://linlshare.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0/"/>
    
  </entry>
  
</feed>
